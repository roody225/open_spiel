#include "rbg_game.hpp"

#include <vector>

namespace rbg_game{
    static const std::string cells_names[64] = {
        "rx0y0",
        "rx1y0",
        "rx2y0",
        "rx3y0",
        "rx4y0",
        "rx5y0",
        "rx6y0",
        "rx7y0",
        "rx0y1",
        "rx1y1",
        "rx2y1",
        "rx3y1",
        "rx4y1",
        "rx5y1",
        "rx6y1",
        "rx7y1",
        "rx0y2",
        "rx1y2",
        "rx2y2",
        "rx3y2",
        "rx4y2",
        "rx5y2",
        "rx6y2",
        "rx7y2",
        "rx0y3",
        "rx1y3",
        "rx2y3",
        "rx3y3",
        "rx4y3",
        "rx5y3",
        "rx6y3",
        "rx7y3",
        "rx0y4",
        "rx1y4",
        "rx2y4",
        "rx3y4",
        "rx4y4",
        "rx5y4",
        "rx6y4",
        "rx7y4",
        "rx0y5",
        "rx1y5",
        "rx2y5",
        "rx3y5",
        "rx4y5",
        "rx5y5",
        "rx6y5",
        "rx7y5",
        "rx0y6",
        "rx1y6",
        "rx2y6",
        "rx3y6",
        "rx4y6",
        "rx5y6",
        "rx6y6",
        "rx7y6",
        "rx0y7",
        "rx1y7",
        "rx2y7",
        "rx3y7",
        "rx4y7",
        "rx5y7",
        "rx6y7",
        "rx7y7",
    };

    std::string board_cell_to_string(int cell_id){
        return cells_names[cell_id];
    }

    static const std::string pieces_names[15] = {
        "blackBishop",
        "blackKing",
        "blackKnight",
        "blackPawn",
        "blackQueen",
        "blackRookMoved",
        "blackRookUnmoved",
        "empty",
        "whiteBishop",
        "whiteKing",
        "whiteKnight",
        "whitePawn",
        "whiteQueen",
        "whiteRookMoved",
        "whiteRookUnmoved",
    };

    std::string piece_to_string(int piece_id){
        return pieces_names[piece_id];
    }

    static const std::string variables_names[6] = {
        "black",
        "white",
        "blackKingMoved",
        "pawnDoubleMove",
        "stagnation",
        "whiteKingMoved",
    };

    std::string variable_to_string(int variable_id){
        return variables_names[variable_id];
    }

    int action_to_modifier_index(int action_index){
        switch(action_index){
            case 1:
                return 0;
            case 2:
                return 1;
            case 3:
                return 2;
            case 9:
                return 3;
            case 20:
                return 4;
            case 21:
                return 5;
            case 29:
                return 6;
            case 32:
                return 7;
            case 40:
                return 8;
            case 45:
                return 9;
            case 49:
                return 10;
            case 50:
                return 11;
            case 52:
                return 12;
            case 75:
                return 13;
            case 76:
                return 14;
            case 78:
                return 15;
            case 93:
                return 16;
            case 94:
                return 17;
            case 96:
                return 18;
            case 131:
                return 19;
            case 132:
                return 20;
            case 134:
                return 21;
            case 149:
                return 22;
            case 150:
                return 23;
            case 152:
                return 24;
            case 160:
                return 25;
            case 162:
                return 26;
            case 163:
                return 27;
            case 164:
                return 28;
            case 165:
                return 29;
            case 171:
                return 30;
            case 172:
                return 31;
            case 173:
                return 32;
            case 177:
                return 33;
            case 181:
                return 34;
            case 183:
                return 35;
            case 185:
                return 36;
            case 186:
                return 37;
            case 187:
                return 38;
            case 189:
                return 39;
            case 191:
                return 40;
            case 193:
                return 41;
            case 194:
                return 42;
            case 196:
                return 43;
            case 197:
                return 44;
            case 199:
                return 45;
            case 200:
                return 46;
            case 201:
                return 47;
            case 203:
                return 48;
            case 207:
                return 49;
            case 208:
                return 50;
            case 209:
                return 51;
            case 211:
                return 52;
            case 212:
                return 53;
            case 213:
                return 54;
            case 219:
                return 55;
            case 230:
                return 56;
            case 231:
                return 57;
            case 239:
                return 58;
            case 242:
                return 59;
            case 250:
                return 60;
            case 255:
                return 61;
            case 259:
                return 62;
            case 260:
                return 63;
            case 262:
                return 64;
            case 285:
                return 65;
            case 286:
                return 66;
            case 288:
                return 67;
            case 303:
                return 68;
            case 304:
                return 69;
            case 306:
                return 70;
            case 341:
                return 71;
            case 342:
                return 72;
            case 344:
                return 73;
            case 359:
                return 74;
            case 360:
                return 75;
            case 362:
                return 76;
            case 370:
                return 77;
            case 372:
                return 78;
            case 373:
                return 79;
            case 374:
                return 80;
            case 375:
                return 81;
            case 381:
                return 82;
            case 382:
                return 83;
            case 383:
                return 84;
            case 387:
                return 85;
            case 391:
                return 86;
            case 393:
                return 87;
            case 395:
                return 88;
            case 396:
                return 89;
            case 397:
                return 90;
            case 399:
                return 91;
            case 401:
                return 92;
            case 403:
                return 93;
            case 404:
                return 94;
            case 406:
                return 95;
            case 407:
                return 96;
            case 409:
                return 97;
            case 410:
                return 98;
            case 411:
                return 99;
            case 413:
                return 100;
            case 417:
                return 101;
            case 418:
                return 102;
            case 419:
                return 103;
            default:
                return -1;
        }
    }

    int modifier_to_action_index(int modifier_index){
        switch(modifier_index){
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 9;
            case 4:
                return 20;
            case 5:
                return 21;
            case 6:
                return 29;
            case 7:
                return 32;
            case 8:
                return 40;
            case 9:
                return 45;
            case 10:
                return 49;
            case 11:
                return 50;
            case 12:
                return 52;
            case 13:
                return 75;
            case 14:
                return 76;
            case 15:
                return 78;
            case 16:
                return 93;
            case 17:
                return 94;
            case 18:
                return 96;
            case 19:
                return 131;
            case 20:
                return 132;
            case 21:
                return 134;
            case 22:
                return 149;
            case 23:
                return 150;
            case 24:
                return 152;
            case 25:
                return 160;
            case 26:
                return 162;
            case 27:
                return 163;
            case 28:
                return 164;
            case 29:
                return 165;
            case 30:
                return 171;
            case 31:
                return 172;
            case 32:
                return 173;
            case 33:
                return 177;
            case 34:
                return 181;
            case 35:
                return 183;
            case 36:
                return 185;
            case 37:
                return 186;
            case 38:
                return 187;
            case 39:
                return 189;
            case 40:
                return 191;
            case 41:
                return 193;
            case 42:
                return 194;
            case 43:
                return 196;
            case 44:
                return 197;
            case 45:
                return 199;
            case 46:
                return 200;
            case 47:
                return 201;
            case 48:
                return 203;
            case 49:
                return 207;
            case 50:
                return 208;
            case 51:
                return 209;
            case 52:
                return 211;
            case 53:
                return 212;
            case 54:
                return 213;
            case 55:
                return 219;
            case 56:
                return 230;
            case 57:
                return 231;
            case 58:
                return 239;
            case 59:
                return 242;
            case 60:
                return 250;
            case 61:
                return 255;
            case 62:
                return 259;
            case 63:
                return 260;
            case 64:
                return 262;
            case 65:
                return 285;
            case 66:
                return 286;
            case 67:
                return 288;
            case 68:
                return 303;
            case 69:
                return 304;
            case 70:
                return 306;
            case 71:
                return 341;
            case 72:
                return 342;
            case 73:
                return 344;
            case 74:
                return 359;
            case 75:
                return 360;
            case 76:
                return 362;
            case 77:
                return 370;
            case 78:
                return 372;
            case 79:
                return 373;
            case 80:
                return 374;
            case 81:
                return 375;
            case 82:
                return 381;
            case 83:
                return 382;
            case 84:
                return 383;
            case 85:
                return 387;
            case 86:
                return 391;
            case 87:
                return 393;
            case 88:
                return 395;
            case 89:
                return 396;
            case 90:
                return 397;
            case 91:
                return 399;
            case 92:
                return 401;
            case 93:
                return 403;
            case 94:
                return 404;
            case 95:
                return 406;
            case 96:
                return 407;
            case 97:
                return 409;
            case 98:
                return 410;
            case 99:
                return 411;
            case 100:
                return 413;
            case 101:
                return 417;
            case 102:
                return 418;
            case 103:
                return 419;
            default:
                return -1;
        }
    }

    static const int cell_neighbors[65][4] = {
        {0,0,0,0},
        {9,0,2,0},
        {10,1,3,0},
        {11,2,4,0},
        {12,3,5,0},
        {13,4,6,0},
        {14,5,7,0},
        {15,6,8,0},
        {16,7,0,0},
        {17,0,10,1},
        {18,9,11,2},
        {19,10,12,3},
        {20,11,13,4},
        {21,12,14,5},
        {22,13,15,6},
        {23,14,16,7},
        {24,15,0,8},
        {25,0,18,9},
        {26,17,19,10},
        {27,18,20,11},
        {28,19,21,12},
        {29,20,22,13},
        {30,21,23,14},
        {31,22,24,15},
        {32,23,0,16},
        {33,0,26,17},
        {34,25,27,18},
        {35,26,28,19},
        {36,27,29,20},
        {37,28,30,21},
        {38,29,31,22},
        {39,30,32,23},
        {40,31,0,24},
        {41,0,34,25},
        {42,33,35,26},
        {43,34,36,27},
        {44,35,37,28},
        {45,36,38,29},
        {46,37,39,30},
        {47,38,40,31},
        {48,39,0,32},
        {49,0,42,33},
        {50,41,43,34},
        {51,42,44,35},
        {52,43,45,36},
        {53,44,46,37},
        {54,45,47,38},
        {55,46,48,39},
        {56,47,0,40},
        {57,0,50,41},
        {58,49,51,42},
        {59,50,52,43},
        {60,51,53,44},
        {61,52,54,45},
        {62,53,55,46},
        {63,54,56,47},
        {64,55,0,48},
        {0,0,58,49},
        {0,57,59,50},
        {0,58,60,51},
        {0,59,61,52},
        {0,60,62,53},
        {0,61,63,54},
        {0,62,64,55},
        {0,63,0,56},
    };

    int get_neighbor(int cell_id, int edge_id){
        return cell_neighbors[cell_id+1][edge_id]-1;
    }

    static const int bounds[6] = {
        100,
        100,
        1,
        1,
        50,
        1,
    };

    int get_bound(int variable_id){
        return bounds[variable_id];
    }

    static const std::vector<int> shift_table0[65] = {
        {},
        {2,9,10,},
        {1,3,9,10,11,},
        {2,4,10,11,12,},
        {3,5,11,12,13,},
        {4,6,12,13,14,},
        {5,7,13,14,15,},
        {6,8,14,15,16,},
        {7,15,16,},
        {1,2,10,17,18,},
        {1,2,3,9,11,17,18,19,},
        {2,3,4,10,12,18,19,20,},
        {3,4,5,11,13,19,20,21,},
        {4,5,6,12,14,20,21,22,},
        {5,6,7,13,15,21,22,23,},
        {6,7,8,14,16,22,23,24,},
        {7,8,15,23,24,},
        {9,10,18,25,26,},
        {9,10,11,17,19,25,26,27,},
        {10,11,12,18,20,26,27,28,},
        {11,12,13,19,21,27,28,29,},
        {12,13,14,20,22,28,29,30,},
        {13,14,15,21,23,29,30,31,},
        {14,15,16,22,24,30,31,32,},
        {15,16,23,31,32,},
        {17,18,26,33,34,},
        {17,18,19,25,27,33,34,35,},
        {18,19,20,26,28,34,35,36,},
        {19,20,21,27,29,35,36,37,},
        {20,21,22,28,30,36,37,38,},
        {21,22,23,29,31,37,38,39,},
        {22,23,24,30,32,38,39,40,},
        {23,24,31,39,40,},
        {25,26,34,41,42,},
        {25,26,27,33,35,41,42,43,},
        {26,27,28,34,36,42,43,44,},
        {27,28,29,35,37,43,44,45,},
        {28,29,30,36,38,44,45,46,},
        {29,30,31,37,39,45,46,47,},
        {30,31,32,38,40,46,47,48,},
        {31,32,39,47,48,},
        {33,34,42,49,50,},
        {33,34,35,41,43,49,50,51,},
        {34,35,36,42,44,50,51,52,},
        {35,36,37,43,45,51,52,53,},
        {36,37,38,44,46,52,53,54,},
        {37,38,39,45,47,53,54,55,},
        {38,39,40,46,48,54,55,56,},
        {39,40,47,55,56,},
        {41,42,50,57,58,},
        {41,42,43,49,51,57,58,59,},
        {42,43,44,50,52,58,59,60,},
        {43,44,45,51,53,59,60,61,},
        {44,45,46,52,54,60,61,62,},
        {45,46,47,53,55,61,62,63,},
        {46,47,48,54,56,62,63,64,},
        {47,48,55,63,64,},
        {49,50,58,},
        {49,50,51,57,59,},
        {50,51,52,58,60,},
        {51,52,53,59,61,},
        {52,53,54,60,62,},
        {53,54,55,61,63,},
        {54,55,56,62,64,},
        {55,56,63,},
    };

    static const std::vector<int> shift_table1[65] = {
        {},
        {11,18,},
        {12,17,19,},
        {9,13,18,20,},
        {10,14,19,21,},
        {11,15,20,22,},
        {12,16,21,23,},
        {13,22,24,},
        {14,23,},
        {3,19,26,},
        {4,20,25,27,},
        {1,5,17,21,26,28,},
        {2,6,18,22,27,29,},
        {3,7,19,23,28,30,},
        {4,8,20,24,29,31,},
        {5,21,30,32,},
        {6,22,31,},
        {2,11,27,34,},
        {1,3,12,28,33,35,},
        {2,4,9,13,25,29,34,36,},
        {3,5,10,14,26,30,35,37,},
        {4,6,11,15,27,31,36,38,},
        {5,7,12,16,28,32,37,39,},
        {6,8,13,29,38,40,},
        {7,14,30,39,},
        {10,19,35,42,},
        {9,11,20,36,41,43,},
        {10,12,17,21,33,37,42,44,},
        {11,13,18,22,34,38,43,45,},
        {12,14,19,23,35,39,44,46,},
        {13,15,20,24,36,40,45,47,},
        {14,16,21,37,46,48,},
        {15,22,38,47,},
        {18,27,43,50,},
        {17,19,28,44,49,51,},
        {18,20,25,29,41,45,50,52,},
        {19,21,26,30,42,46,51,53,},
        {20,22,27,31,43,47,52,54,},
        {21,23,28,32,44,48,53,55,},
        {22,24,29,45,54,56,},
        {23,30,46,55,},
        {26,35,51,58,},
        {25,27,36,52,57,59,},
        {26,28,33,37,49,53,58,60,},
        {27,29,34,38,50,54,59,61,},
        {28,30,35,39,51,55,60,62,},
        {29,31,36,40,52,56,61,63,},
        {30,32,37,53,62,64,},
        {31,38,54,63,},
        {34,43,59,},
        {33,35,44,60,},
        {34,36,41,45,57,61,},
        {35,37,42,46,58,62,},
        {36,38,43,47,59,63,},
        {37,39,44,48,60,64,},
        {38,40,45,61,},
        {39,46,62,},
        {42,51,},
        {41,43,52,},
        {42,44,49,53,},
        {43,45,50,54,},
        {44,46,51,55,},
        {45,47,52,56,},
        {46,48,53,},
        {47,54,},
    };

    static const int shift_table2[65] = {
        0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,9,10,11,12,13,14,15,0,17,18,19,20,21,22,23,0,25,26,27,28,29,30,31,0,33,34,35,36,37,38,39,0,41,42,43,44,45,46,47,0,49,50,51,52,53,54,55,
    };

    static const int shift_table3[65] = {
        0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,0,10,11,12,13,14,15,16,0,18,19,20,21,22,23,24,0,26,27,28,29,30,31,32,0,34,35,36,37,38,39,40,0,42,43,44,45,46,47,48,0,50,51,52,53,54,55,56,0,
    };

    static const int shift_table4[65] = {
        0,0,9,10,11,12,13,14,15,0,17,18,19,20,21,22,23,0,25,26,27,28,29,30,31,0,33,34,35,36,37,38,39,0,41,42,43,44,45,46,47,0,49,50,51,52,53,54,55,0,57,58,59,60,61,62,63,0,0,0,0,0,0,0,0,
    };

    static const int shift_table5[65] = {
        0,10,11,12,13,14,15,16,0,18,19,20,21,22,23,24,0,26,27,28,29,30,31,32,0,34,35,36,37,38,39,40,0,42,43,44,45,46,47,48,0,50,51,52,53,54,55,56,0,58,59,60,61,62,63,64,0,0,0,0,0,0,0,0,0,
    };

    static const int shift_table6[65] = {
        0,0,0,1,2,3,4,5,6,0,0,9,10,11,12,13,14,0,0,17,18,19,20,21,22,0,0,25,26,27,28,29,30,0,0,33,34,35,36,37,38,0,0,41,42,43,44,45,46,0,0,49,50,51,52,53,54,0,0,57,58,59,60,61,62,
    };

    static const int shift_table7[65] = {
        0,4,5,6,7,8,0,0,0,12,13,14,15,16,0,0,0,20,21,22,23,24,0,0,0,28,29,30,31,32,0,0,0,36,37,38,39,40,0,0,0,44,45,46,47,48,0,0,0,52,53,54,55,56,0,0,0,60,61,62,63,64,0,0,0,
    };

    static const std::vector<int> shift_table8[65] = {
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {2,},
        {1,3,},
        {2,4,},
        {3,5,},
        {4,6,},
        {5,7,},
        {6,8,},
        {7,},
        {10,},
        {9,11,},
        {10,12,},
        {11,13,},
        {12,14,},
        {13,15,},
        {14,16,},
        {15,},
        {18,},
        {17,19,},
        {18,20,},
        {19,21,},
        {20,22,},
        {21,23,},
        {22,24,},
        {23,},
        {26,},
        {25,27,},
        {26,28,},
        {27,29,},
        {28,30,},
        {29,31,},
        {30,32,},
        {31,},
        {34,},
        {33,35,},
        {34,36,},
        {35,37,},
        {36,38,},
        {37,39,},
        {38,40,},
        {39,},
        {42,},
        {41,43,},
        {42,44,},
        {43,45,},
        {44,46,},
        {45,47,},
        {46,48,},
        {47,},
        {50,},
        {49,51,},
        {50,52,},
        {51,53,},
        {52,54,},
        {53,55,},
        {54,56,},
        {55,},
    };

    static const int shift_table9[65] = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,
    };

    static const std::vector<int> shift_table11[65] = {
        {},
        {10,},
        {9,11,},
        {10,12,},
        {11,13,},
        {12,14,},
        {13,15,},
        {14,16,},
        {15,},
        {18,},
        {17,19,},
        {18,20,},
        {19,21,},
        {20,22,},
        {21,23,},
        {22,24,},
        {23,},
        {26,},
        {25,27,},
        {26,28,},
        {27,29,},
        {28,30,},
        {29,31,},
        {30,32,},
        {31,},
        {34,},
        {33,35,},
        {34,36,},
        {35,37,},
        {36,38,},
        {37,39,},
        {38,40,},
        {39,},
        {42,},
        {41,43,},
        {42,44,},
        {43,45,},
        {44,46,},
        {45,47,},
        {46,48,},
        {47,},
        {50,},
        {49,51,},
        {50,52,},
        {51,53,},
        {52,54,},
        {53,55,},
        {54,56,},
        {55,},
        {58,},
        {57,59,},
        {58,60,},
        {59,61,},
        {60,62,},
        {61,63,},
        {62,64,},
        {63,},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
    };

    static const int shift_table12[65] = {
        0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    };

    void resettable_bitarray_stack::pattern_push0(void){
        if(pattern_current_top0 >= pattern_content0.size()){
            pattern_content0.emplace_back();
        }
        else{
            pattern_content0[pattern_current_top0].reset();
        }
        ++pattern_current_top0;
    }

    void resettable_bitarray_stack::pattern_revert_to_level0(unsigned int level){
        pattern_current_top0 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level0(void){
        return pattern_current_top0;
    }

    bool resettable_bitarray_stack::pattern_is_set0(int state, int cell)const{
        return pattern_content0[pattern_current_top0-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set0(int state, int cell){
        pattern_content0[pattern_current_top0-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset0(void){
        pattern_current_top0 = 0;
        pattern_push0();
    }

    void resettable_bitarray_stack::pattern_push1(void){
        if(pattern_current_top1 >= pattern_content1.size()){
            pattern_content1.emplace_back();
        }
        else{
            pattern_content1[pattern_current_top1].reset();
        }
        ++pattern_current_top1;
    }

    void resettable_bitarray_stack::pattern_revert_to_level1(unsigned int level){
        pattern_current_top1 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level1(void){
        return pattern_current_top1;
    }

    bool resettable_bitarray_stack::pattern_is_set1(int state, int cell)const{
        return pattern_content1[pattern_current_top1-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set1(int state, int cell){
        pattern_content1[pattern_current_top1-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset1(void){
        pattern_current_top1 = 0;
        pattern_push1();
    }

    void resettable_bitarray_stack::pattern_push2(void){
        if(pattern_current_top2 >= pattern_content2.size()){
            pattern_content2.emplace_back();
        }
        else{
            pattern_content2[pattern_current_top2].reset();
        }
        ++pattern_current_top2;
    }

    void resettable_bitarray_stack::pattern_revert_to_level2(unsigned int level){
        pattern_current_top2 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level2(void){
        return pattern_current_top2;
    }

    bool resettable_bitarray_stack::pattern_is_set2(int state, int cell)const{
        return pattern_content2[pattern_current_top2-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set2(int state, int cell){
        pattern_content2[pattern_current_top2-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset2(void){
        pattern_current_top2 = 0;
        pattern_push2();
    }

    void resettable_bitarray_stack::pattern_push3(void){
        if(pattern_current_top3 >= pattern_content3.size()){
            pattern_content3.emplace_back();
        }
        else{
            pattern_content3[pattern_current_top3].reset();
        }
        ++pattern_current_top3;
    }

    void resettable_bitarray_stack::pattern_revert_to_level3(unsigned int level){
        pattern_current_top3 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level3(void){
        return pattern_current_top3;
    }

    bool resettable_bitarray_stack::pattern_is_set3(int state, int cell)const{
        return pattern_content3[pattern_current_top3-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set3(int state, int cell){
        pattern_content3[pattern_current_top3-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset3(void){
        pattern_current_top3 = 0;
        pattern_push3();
    }

    void resettable_bitarray_stack::pattern_push4(void){
        if(pattern_current_top4 >= pattern_content4.size()){
            pattern_content4.emplace_back();
        }
        else{
            pattern_content4[pattern_current_top4].reset();
        }
        ++pattern_current_top4;
    }

    void resettable_bitarray_stack::pattern_revert_to_level4(unsigned int level){
        pattern_current_top4 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level4(void){
        return pattern_current_top4;
    }

    bool resettable_bitarray_stack::pattern_is_set4(int state, int cell)const{
        return pattern_content4[pattern_current_top4-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set4(int state, int cell){
        pattern_content4[pattern_current_top4-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset4(void){
        pattern_current_top4 = 0;
        pattern_push4();
    }

    void resettable_bitarray_stack::pattern_push5(void){
        if(pattern_current_top5 >= pattern_content5.size()){
            pattern_content5.emplace_back();
        }
        else{
            pattern_content5[pattern_current_top5].reset();
        }
        ++pattern_current_top5;
    }

    void resettable_bitarray_stack::pattern_revert_to_level5(unsigned int level){
        pattern_current_top5 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level5(void){
        return pattern_current_top5;
    }

    bool resettable_bitarray_stack::pattern_is_set5(int state, int cell)const{
        return pattern_content5[pattern_current_top5-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set5(int state, int cell){
        pattern_content5[pattern_current_top5-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset5(void){
        pattern_current_top5 = 0;
        pattern_push5();
    }

    void resettable_bitarray_stack::pattern_push6(void){
        if(pattern_current_top6 >= pattern_content6.size()){
            pattern_content6.emplace_back();
        }
        else{
            pattern_content6[pattern_current_top6].reset();
        }
        ++pattern_current_top6;
    }

    void resettable_bitarray_stack::pattern_revert_to_level6(unsigned int level){
        pattern_current_top6 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level6(void){
        return pattern_current_top6;
    }

    bool resettable_bitarray_stack::pattern_is_set6(int state, int cell)const{
        return pattern_content6[pattern_current_top6-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set6(int state, int cell){
        pattern_content6[pattern_current_top6-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset6(void){
        pattern_current_top6 = 0;
        pattern_push6();
    }

    void resettable_bitarray_stack::pattern_push7(void){
        if(pattern_current_top7 >= pattern_content7.size()){
            pattern_content7.emplace_back();
        }
        else{
            pattern_content7[pattern_current_top7].reset();
        }
        ++pattern_current_top7;
    }

    void resettable_bitarray_stack::pattern_revert_to_level7(unsigned int level){
        pattern_current_top7 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level7(void){
        return pattern_current_top7;
    }

    bool resettable_bitarray_stack::pattern_is_set7(int state, int cell)const{
        return pattern_content7[pattern_current_top7-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set7(int state, int cell){
        pattern_content7[pattern_current_top7-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset7(void){
        pattern_current_top7 = 0;
        pattern_push7();
    }

    void resettable_bitarray_stack::pattern_push8(void){
        if(pattern_current_top8 >= pattern_content8.size()){
            pattern_content8.emplace_back();
        }
        else{
            pattern_content8[pattern_current_top8].reset();
        }
        ++pattern_current_top8;
    }

    void resettable_bitarray_stack::pattern_revert_to_level8(unsigned int level){
        pattern_current_top8 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level8(void){
        return pattern_current_top8;
    }

    bool resettable_bitarray_stack::pattern_is_set8(int state, int cell)const{
        return pattern_content8[pattern_current_top8-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set8(int state, int cell){
        pattern_content8[pattern_current_top8-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset8(void){
        pattern_current_top8 = 0;
        pattern_push8();
    }

    void resettable_bitarray_stack::pattern_push9(void){
        if(pattern_current_top9 >= pattern_content9.size()){
            pattern_content9.emplace_back();
        }
        else{
            pattern_content9[pattern_current_top9].reset();
        }
        ++pattern_current_top9;
    }

    void resettable_bitarray_stack::pattern_revert_to_level9(unsigned int level){
        pattern_current_top9 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level9(void){
        return pattern_current_top9;
    }

    bool resettable_bitarray_stack::pattern_is_set9(int state, int cell)const{
        return pattern_content9[pattern_current_top9-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set9(int state, int cell){
        pattern_content9[pattern_current_top9-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset9(void){
        pattern_current_top9 = 0;
        pattern_push9();
    }

    void resettable_bitarray_stack::pattern_push10(void){
        if(pattern_current_top10 >= pattern_content10.size()){
            pattern_content10.emplace_back();
        }
        else{
            pattern_content10[pattern_current_top10].reset();
        }
        ++pattern_current_top10;
    }

    void resettable_bitarray_stack::pattern_revert_to_level10(unsigned int level){
        pattern_current_top10 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level10(void){
        return pattern_current_top10;
    }

    bool resettable_bitarray_stack::pattern_is_set10(int state, int cell)const{
        return pattern_content10[pattern_current_top10-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set10(int state, int cell){
        pattern_content10[pattern_current_top10-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset10(void){
        pattern_current_top10 = 0;
        pattern_push10();
    }

    void resettable_bitarray_stack::pattern_push11(void){
        if(pattern_current_top11 >= pattern_content11.size()){
            pattern_content11.emplace_back();
        }
        else{
            pattern_content11[pattern_current_top11].reset();
        }
        ++pattern_current_top11;
    }

    void resettable_bitarray_stack::pattern_revert_to_level11(unsigned int level){
        pattern_current_top11 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level11(void){
        return pattern_current_top11;
    }

    bool resettable_bitarray_stack::pattern_is_set11(int state, int cell)const{
        return pattern_content11[pattern_current_top11-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set11(int state, int cell){
        pattern_content11[pattern_current_top11-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset11(void){
        pattern_current_top11 = 0;
        pattern_push11();
    }

    void resettable_bitarray_stack::pattern_push13(void){
        if(pattern_current_top13 >= pattern_content13.size()){
            pattern_content13.emplace_back();
        }
        else{
            pattern_content13[pattern_current_top13].reset();
        }
        ++pattern_current_top13;
    }

    void resettable_bitarray_stack::pattern_revert_to_level13(unsigned int level){
        pattern_current_top13 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level13(void){
        return pattern_current_top13;
    }

    bool resettable_bitarray_stack::pattern_is_set13(int state, int cell)const{
        return pattern_content13[pattern_current_top13-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set13(int state, int cell){
        pattern_content13[pattern_current_top13-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset13(void){
        pattern_current_top13 = 0;
        pattern_push13();
    }

    void resettable_bitarray_stack::pattern_push14(void){
        if(pattern_current_top14 >= pattern_content14.size()){
            pattern_content14.emplace_back();
        }
        else{
            pattern_content14[pattern_current_top14].reset();
        }
        ++pattern_current_top14;
    }

    void resettable_bitarray_stack::pattern_revert_to_level14(unsigned int level){
        pattern_current_top14 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level14(void){
        return pattern_current_top14;
    }

    bool resettable_bitarray_stack::pattern_is_set14(int state, int cell)const{
        return pattern_content14[pattern_current_top14-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set14(int state, int cell){
        pattern_content14[pattern_current_top14-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset14(void){
        pattern_current_top14 = 0;
        pattern_push14();
    }

    void resettable_bitarray_stack::pattern_push15(void){
        if(pattern_current_top15 >= pattern_content15.size()){
            pattern_content15.emplace_back();
        }
        else{
            pattern_content15[pattern_current_top15].reset();
        }
        ++pattern_current_top15;
    }

    void resettable_bitarray_stack::pattern_revert_to_level15(unsigned int level){
        pattern_current_top15 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level15(void){
        return pattern_current_top15;
    }

    bool resettable_bitarray_stack::pattern_is_set15(int state, int cell)const{
        return pattern_content15[pattern_current_top15-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set15(int state, int cell){
        pattern_content15[pattern_current_top15-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset15(void){
        pattern_current_top15 = 0;
        pattern_push15();
    }

    void resettable_bitarray_stack::pattern_push16(void){
        if(pattern_current_top16 >= pattern_content16.size()){
            pattern_content16.emplace_back();
        }
        else{
            pattern_content16[pattern_current_top16].reset();
        }
        ++pattern_current_top16;
    }

    void resettable_bitarray_stack::pattern_revert_to_level16(unsigned int level){
        pattern_current_top16 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level16(void){
        return pattern_current_top16;
    }

    bool resettable_bitarray_stack::pattern_is_set16(int state, int cell)const{
        return pattern_content16[pattern_current_top16-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set16(int state, int cell){
        pattern_content16[pattern_current_top16-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset16(void){
        pattern_current_top16 = 0;
        pattern_push16();
    }

    void resettable_bitarray_stack::pattern_push17(void){
        if(pattern_current_top17 >= pattern_content17.size()){
            pattern_content17.emplace_back();
        }
        else{
            pattern_content17[pattern_current_top17].reset();
        }
        ++pattern_current_top17;
    }

    void resettable_bitarray_stack::pattern_revert_to_level17(unsigned int level){
        pattern_current_top17 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level17(void){
        return pattern_current_top17;
    }

    bool resettable_bitarray_stack::pattern_is_set17(int state, int cell)const{
        return pattern_content17[pattern_current_top17-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set17(int state, int cell){
        pattern_content17[pattern_current_top17-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset17(void){
        pattern_current_top17 = 0;
        pattern_push17();
    }

    void resettable_bitarray_stack::pattern_push18(void){
        if(pattern_current_top18 >= pattern_content18.size()){
            pattern_content18.emplace_back();
        }
        else{
            pattern_content18[pattern_current_top18].reset();
        }
        ++pattern_current_top18;
    }

    void resettable_bitarray_stack::pattern_revert_to_level18(unsigned int level){
        pattern_current_top18 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level18(void){
        return pattern_current_top18;
    }

    bool resettable_bitarray_stack::pattern_is_set18(int state, int cell)const{
        return pattern_content18[pattern_current_top18-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set18(int state, int cell){
        pattern_content18[pattern_current_top18-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset18(void){
        pattern_current_top18 = 0;
        pattern_push18();
    }

    void resettable_bitarray_stack::pattern_push19(void){
        if(pattern_current_top19 >= pattern_content19.size()){
            pattern_content19.emplace_back();
        }
        else{
            pattern_content19[pattern_current_top19].reset();
        }
        ++pattern_current_top19;
    }

    void resettable_bitarray_stack::pattern_revert_to_level19(unsigned int level){
        pattern_current_top19 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level19(void){
        return pattern_current_top19;
    }

    bool resettable_bitarray_stack::pattern_is_set19(int state, int cell)const{
        return pattern_content19[pattern_current_top19-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set19(int state, int cell){
        pattern_content19[pattern_current_top19-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset19(void){
        pattern_current_top19 = 0;
        pattern_push19();
    }

    void resettable_bitarray_stack::pattern_push20(void){
        if(pattern_current_top20 >= pattern_content20.size()){
            pattern_content20.emplace_back();
        }
        else{
            pattern_content20[pattern_current_top20].reset();
        }
        ++pattern_current_top20;
    }

    void resettable_bitarray_stack::pattern_revert_to_level20(unsigned int level){
        pattern_current_top20 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level20(void){
        return pattern_current_top20;
    }

    bool resettable_bitarray_stack::pattern_is_set20(int state, int cell)const{
        return pattern_content20[pattern_current_top20-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set20(int state, int cell){
        pattern_content20[pattern_current_top20-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset20(void){
        pattern_current_top20 = 0;
        pattern_push20();
    }

    void resettable_bitarray_stack::pattern_push21(void){
        if(pattern_current_top21 >= pattern_content21.size()){
            pattern_content21.emplace_back();
        }
        else{
            pattern_content21[pattern_current_top21].reset();
        }
        ++pattern_current_top21;
    }

    void resettable_bitarray_stack::pattern_revert_to_level21(unsigned int level){
        pattern_current_top21 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level21(void){
        return pattern_current_top21;
    }

    bool resettable_bitarray_stack::pattern_is_set21(int state, int cell)const{
        return pattern_content21[pattern_current_top21-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set21(int state, int cell){
        pattern_content21[pattern_current_top21-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset21(void){
        pattern_current_top21 = 0;
        pattern_push21();
    }

    void resettable_bitarray_stack::pattern_push22(void){
        if(pattern_current_top22 >= pattern_content22.size()){
            pattern_content22.emplace_back();
        }
        else{
            pattern_content22[pattern_current_top22].reset();
        }
        ++pattern_current_top22;
    }

    void resettable_bitarray_stack::pattern_revert_to_level22(unsigned int level){
        pattern_current_top22 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level22(void){
        return pattern_current_top22;
    }

    bool resettable_bitarray_stack::pattern_is_set22(int state, int cell)const{
        return pattern_content22[pattern_current_top22-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set22(int state, int cell){
        pattern_content22[pattern_current_top22-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset22(void){
        pattern_current_top22 = 0;
        pattern_push22();
    }

    void resettable_bitarray_stack::pattern_push23(void){
        if(pattern_current_top23 >= pattern_content23.size()){
            pattern_content23.emplace_back();
        }
        else{
            pattern_content23[pattern_current_top23].reset();
        }
        ++pattern_current_top23;
    }

    void resettable_bitarray_stack::pattern_revert_to_level23(unsigned int level){
        pattern_current_top23 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level23(void){
        return pattern_current_top23;
    }

    bool resettable_bitarray_stack::pattern_is_set23(int state, int cell)const{
        return pattern_content23[pattern_current_top23-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set23(int state, int cell){
        pattern_content23[pattern_current_top23-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset23(void){
        pattern_current_top23 = 0;
        pattern_push23();
    }

    void resettable_bitarray_stack::pattern_push24(void){
        if(pattern_current_top24 >= pattern_content24.size()){
            pattern_content24.emplace_back();
        }
        else{
            pattern_content24[pattern_current_top24].reset();
        }
        ++pattern_current_top24;
    }

    void resettable_bitarray_stack::pattern_revert_to_level24(unsigned int level){
        pattern_current_top24 = level;
    }

    unsigned int resettable_bitarray_stack::pattern_get_level24(void){
        return pattern_current_top24;
    }

    bool resettable_bitarray_stack::pattern_is_set24(int state, int cell)const{
        return pattern_content24[pattern_current_top24-1].is_set(state,cell);
    }

    void resettable_bitarray_stack::pattern_set24(int state, int cell){
        pattern_content24[pattern_current_top24-1].set(state,cell);
    }

    void resettable_bitarray_stack::pattern_reset24(void){
        pattern_current_top24 = 0;
        pattern_push24();
    }

    bool action_representation::operator==(const action_representation& rhs) const{
        return index == rhs.index and cell == rhs.cell;
    }
    move::move(const move_representation& mr)
    : mr(mr){
    }
    bool move::operator==(const move& rhs) const{
        return mr == rhs.mr;
    }
    semimove::semimove(const move_representation& mr, int cell, int state)
    : mr(mr)
    , cell(cell)
    , state(state){
    }
    const move_representation& semimove::get_actions(void)const{
        return mr;
    }
    bool semimove::operator==(const semimove& rhs) const{
        return cell == rhs.cell and state == rhs.state and mr == rhs.mr;
    }
    int game_state::get_current_cell(void)const{
        return current_cell-1;
    }

    int game_state::get_piece(int cell_id)const{
        return pieces[cell_id+1];
    }

    int game_state::get_variable_value(int variable_id)const{
        return variables[variable_id];
    }

    int game_state::get_current_player(void)const{
        return current_player;
    }

    int game_state::get_player_score(int player_id)const{
        return variables[player_id-1];
    }

    bool game_state::is_nodal(void)const{
        switch(current_state){
            case 1:
            case 178:
            case 181:
            case 188:
            case 191:
            case 194:
            case 196:
            case 373:
            case 376:
            case 383:
            case 386:
            case 389:
            case 391:
                return true;
            default:
                return false;
        }
    }

    revert_information game_state::apply_semimove_with_revert(const semimove& m){
        revert_information ri;
        ri.previous_cell = current_cell;
        ri.previous_player = current_player;
        ri.previous_state = current_state;
        for(const auto& el: m.mr){
            apply_action_with_revert(el, ri);
        }
        current_cell = m.cell;
        current_state = m.state;
        return ri;
    }

    void game_state::apply_semimove(const semimove& m){
        for(const auto& el: m.mr){
            apply_action(el);
        }
        current_cell = m.cell;
        current_state = m.state;
    }
    void game_state::apply_move(const move& m){
        for(const auto& el: m.mr){
            apply_action(el);
        }
    }

    std::vector<move> game_state::get_all_moves(resettable_bitarray_stack& cache){
        std::vector<move> result;
        result.reserve(100);
        get_all_moves(cache, result);
        return result;
    }

    void game_state::get_all_moves(resettable_bitarray_stack& cache, std::vector<move>& moves){
        std::vector<semimove> semimoves;
        get_all_semimoves(cache, semimoves, 1000);
        moves.clear();
        for(const auto& el: semimoves){
            moves.emplace_back(el.mr);
        }
    }

    void game_state::get_all_semimoves(resettable_bitarray_stack& cache, std::vector<semimove>& moves, unsigned int move_length_limit){
        moves.clear();
        move_representation mr;
        switch(current_state){
            case 0:
                get_all_moves_0_1(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 1:
                get_all_moves_1_3(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_1_170(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 2:
                get_all_moves_2_178(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 3:
                get_all_moves_3_4(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 4:
                get_all_moves_4_5(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 5:
                get_all_moves_5_7(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_5_27(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_5_56(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_5_85(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_5_134(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_5_143(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 6:
                get_all_moves_6_2(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 7:
                get_all_moves_7_8(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 8:
                get_all_moves_8_10(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_8_18(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 9:
                get_all_moves_9_26(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 10:
                get_all_moves_10_11(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 11:
                get_all_moves_11_13(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_11_15(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 12:
                get_all_moves_12_17(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 13:
                get_all_moves_13_14(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 14:
                get_all_moves_14_12(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 15:
                get_all_moves_15_16(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 16:
                get_all_moves_16_12(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 17:
                get_all_moves_17_9(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 18:
                get_all_moves_18_19(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 19:
                get_all_moves_19_21(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_19_23(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 20:
                get_all_moves_20_25(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 21:
                get_all_moves_21_22(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 22:
                get_all_moves_22_20(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 23:
                get_all_moves_23_24(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 24:
                get_all_moves_24_20(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 25:
                get_all_moves_25_9(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 26:
                get_all_moves_26_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 27:
                get_all_moves_27_28(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 28:
                get_all_moves_28_32(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_28_37(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_28_42(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_28_47(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 29:
                get_all_moves_29_51(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_29_53(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 30:
                get_all_moves_30_31(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 31:
                get_all_moves_31_33(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_31_30(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 32:
                get_all_moves_32_30(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_32_33(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 33:
                get_all_moves_33_34(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 34:
                get_all_moves_34_29(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 35:
                get_all_moves_35_36(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 36:
                get_all_moves_36_38(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_36_35(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 37:
                get_all_moves_37_35(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_37_38(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 38:
                get_all_moves_38_39(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 39:
                get_all_moves_39_29(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 40:
                get_all_moves_40_41(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 41:
                get_all_moves_41_43(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_41_40(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 42:
                get_all_moves_42_40(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_42_43(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 43:
                get_all_moves_43_44(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 44:
                get_all_moves_44_29(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 45:
                get_all_moves_45_46(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 46:
                get_all_moves_46_48(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_46_45(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 47:
                get_all_moves_47_45(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_47_48(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 48:
                get_all_moves_48_49(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 49:
                get_all_moves_49_29(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 50:
                get_all_moves_50_55(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 51:
                get_all_moves_51_52(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 52:
                get_all_moves_52_50(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 53:
                get_all_moves_53_54(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 54:
                get_all_moves_54_50(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 55:
                get_all_moves_55_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 56:
                get_all_moves_56_57(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 57:
                get_all_moves_57_61(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_57_66(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_57_71(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_57_76(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 58:
                get_all_moves_58_80(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_58_82(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 59:
                get_all_moves_59_60(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 60:
                get_all_moves_60_62(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_60_59(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 61:
                get_all_moves_61_59(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_61_62(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 62:
                get_all_moves_62_63(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 63:
                get_all_moves_63_58(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 64:
                get_all_moves_64_65(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 65:
                get_all_moves_65_67(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_65_64(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 66:
                get_all_moves_66_64(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_66_67(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 67:
                get_all_moves_67_68(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 68:
                get_all_moves_68_58(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 69:
                get_all_moves_69_70(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 70:
                get_all_moves_70_72(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_70_69(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 71:
                get_all_moves_71_69(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_71_72(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 72:
                get_all_moves_72_73(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 73:
                get_all_moves_73_58(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 74:
                get_all_moves_74_75(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 75:
                get_all_moves_75_77(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_75_74(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 76:
                get_all_moves_76_74(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_76_77(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 77:
                get_all_moves_77_78(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 78:
                get_all_moves_78_58(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 79:
                get_all_moves_79_84(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 80:
                get_all_moves_80_81(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 81:
                get_all_moves_81_79(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 82:
                get_all_moves_82_83(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 83:
                get_all_moves_83_79(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 84:
                get_all_moves_84_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 85:
                get_all_moves_85_86(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 86:
                get_all_moves_86_90(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_95(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_100(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_105(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_110(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_115(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_120(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_86_125(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 87:
                get_all_moves_87_129(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_87_131(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 88:
                get_all_moves_88_89(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 89:
                get_all_moves_89_91(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_89_88(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 90:
                get_all_moves_90_88(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_90_91(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 91:
                get_all_moves_91_92(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 92:
                get_all_moves_92_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 93:
                get_all_moves_93_94(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 94:
                get_all_moves_94_96(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_94_93(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 95:
                get_all_moves_95_93(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_95_96(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 96:
                get_all_moves_96_97(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 97:
                get_all_moves_97_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 98:
                get_all_moves_98_99(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 99:
                get_all_moves_99_101(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_99_98(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 100:
                get_all_moves_100_98(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_100_101(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 101:
                get_all_moves_101_102(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 102:
                get_all_moves_102_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 103:
                get_all_moves_103_104(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 104:
                get_all_moves_104_106(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_104_103(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 105:
                get_all_moves_105_103(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_105_106(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 106:
                get_all_moves_106_107(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 107:
                get_all_moves_107_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 108:
                get_all_moves_108_109(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 109:
                get_all_moves_109_111(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_109_108(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 110:
                get_all_moves_110_108(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_110_111(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 111:
                get_all_moves_111_112(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 112:
                get_all_moves_112_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 113:
                get_all_moves_113_114(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 114:
                get_all_moves_114_116(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_114_113(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 115:
                get_all_moves_115_113(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_115_116(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 116:
                get_all_moves_116_117(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 117:
                get_all_moves_117_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 118:
                get_all_moves_118_119(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 119:
                get_all_moves_119_121(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_119_118(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 120:
                get_all_moves_120_118(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_120_121(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 121:
                get_all_moves_121_122(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 122:
                get_all_moves_122_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 123:
                get_all_moves_123_124(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 124:
                get_all_moves_124_126(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_124_123(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 125:
                get_all_moves_125_123(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_125_126(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 126:
                get_all_moves_126_127(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 127:
                get_all_moves_127_87(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 128:
                get_all_moves_128_133(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 129:
                get_all_moves_129_130(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 130:
                get_all_moves_130_128(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 131:
                get_all_moves_131_132(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 132:
                get_all_moves_132_128(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 133:
                get_all_moves_133_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 134:
                get_all_moves_134_135(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 135:
                get_all_moves_135_136(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 136:
                get_all_moves_136_138(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_136_140(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 137:
                get_all_moves_137_142(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 138:
                get_all_moves_138_139(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 139:
                get_all_moves_139_137(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 140:
                get_all_moves_140_141(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 141:
                get_all_moves_141_137(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 142:
                get_all_moves_142_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 143:
                get_all_moves_143_144(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 144:
                get_all_moves_144_146(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_144_167(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 145:
                get_all_moves_145_169(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 146:
                get_all_moves_146_148(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_146_150(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 147:
                get_all_moves_147_154(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_147_156(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 148:
                get_all_moves_148_149(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 149:
                get_all_moves_149_147(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 150:
                get_all_moves_150_151(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 151:
                get_all_moves_151_152(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 152:
                get_all_moves_152_147(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 153:
                get_all_moves_153_145(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 154:
                get_all_moves_154_155(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 155:
                get_all_moves_155_153(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 156:
                get_all_moves_156_157(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 157:
                get_all_moves_157_159(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_157_161(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_157_163(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_157_165(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 158:
                get_all_moves_158_153(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 159:
                get_all_moves_159_160(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 160:
                get_all_moves_160_158(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 161:
                get_all_moves_161_162(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 162:
                get_all_moves_162_158(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 163:
                get_all_moves_163_164(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 164:
                get_all_moves_164_158(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 165:
                get_all_moves_165_166(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 166:
                get_all_moves_166_158(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 167:
                get_all_moves_167_168(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 168:
                get_all_moves_168_145(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 169:
                get_all_moves_169_6(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 170:
                get_all_moves_170_171(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 171:
                get_all_moves_171_173(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_171_175(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 172:
                get_all_moves_172_177(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 173:
                get_all_moves_173_174(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 174:
                get_all_moves_174_172(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 175:
                get_all_moves_175_176(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 176:
                get_all_moves_176_172(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 177:
                get_all_moves_177_2(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 178:
                get_all_moves_178_180(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_178_187(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 179:
                get_all_moves_179_196(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 180:
                get_all_moves_180_181(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 181:
                get_all_moves_181_183(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_181_185(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 182:
                get_all_moves_182_179(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 183:
                get_all_moves_183_184(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 184:
                get_all_moves_184_182(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 185:
                get_all_moves_185_186(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 186:
                get_all_moves_186_182(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 187:
                get_all_moves_187_188(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 188:
                get_all_moves_188_190(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_188_193(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 189:
                get_all_moves_189_179(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 190:
                get_all_moves_190_191(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 191:
                get_all_moves_191_192(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 192:
                get_all_moves_192_189(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 193:
                get_all_moves_193_194(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 194:
                get_all_moves_194_195(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 195:
                get_all_moves_195_189(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 196:
                get_all_moves_196_198(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_196_365(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 197:
                get_all_moves_197_373(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 198:
                get_all_moves_198_199(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 199:
                get_all_moves_199_200(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 200:
                get_all_moves_200_202(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_200_222(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_200_251(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_200_280(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_200_329(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_200_338(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 201:
                get_all_moves_201_197(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 202:
                get_all_moves_202_203(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 203:
                get_all_moves_203_205(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_203_213(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 204:
                get_all_moves_204_221(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 205:
                get_all_moves_205_206(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 206:
                get_all_moves_206_208(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_206_210(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 207:
                get_all_moves_207_212(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 208:
                get_all_moves_208_209(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 209:
                get_all_moves_209_207(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 210:
                get_all_moves_210_211(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 211:
                get_all_moves_211_207(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 212:
                get_all_moves_212_204(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 213:
                get_all_moves_213_214(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 214:
                get_all_moves_214_216(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_214_218(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 215:
                get_all_moves_215_220(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 216:
                get_all_moves_216_217(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 217:
                get_all_moves_217_215(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 218:
                get_all_moves_218_219(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 219:
                get_all_moves_219_215(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 220:
                get_all_moves_220_204(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 221:
                get_all_moves_221_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 222:
                get_all_moves_222_223(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 223:
                get_all_moves_223_227(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_223_232(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_223_237(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_223_242(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 224:
                get_all_moves_224_246(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_224_248(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 225:
                get_all_moves_225_226(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 226:
                get_all_moves_226_228(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_226_225(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 227:
                get_all_moves_227_225(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_227_228(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 228:
                get_all_moves_228_229(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 229:
                get_all_moves_229_224(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 230:
                get_all_moves_230_231(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 231:
                get_all_moves_231_233(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_231_230(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 232:
                get_all_moves_232_230(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_232_233(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 233:
                get_all_moves_233_234(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 234:
                get_all_moves_234_224(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 235:
                get_all_moves_235_236(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 236:
                get_all_moves_236_238(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_236_235(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 237:
                get_all_moves_237_235(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_237_238(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 238:
                get_all_moves_238_239(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 239:
                get_all_moves_239_224(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 240:
                get_all_moves_240_241(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 241:
                get_all_moves_241_243(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_241_240(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 242:
                get_all_moves_242_240(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_242_243(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 243:
                get_all_moves_243_244(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 244:
                get_all_moves_244_224(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 245:
                get_all_moves_245_250(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 246:
                get_all_moves_246_247(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 247:
                get_all_moves_247_245(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 248:
                get_all_moves_248_249(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 249:
                get_all_moves_249_245(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 250:
                get_all_moves_250_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 251:
                get_all_moves_251_252(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 252:
                get_all_moves_252_256(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_252_261(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_252_266(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_252_271(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 253:
                get_all_moves_253_275(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_253_277(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 254:
                get_all_moves_254_255(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 255:
                get_all_moves_255_257(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_255_254(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 256:
                get_all_moves_256_254(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_256_257(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 257:
                get_all_moves_257_258(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 258:
                get_all_moves_258_253(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 259:
                get_all_moves_259_260(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 260:
                get_all_moves_260_262(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_260_259(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 261:
                get_all_moves_261_259(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_261_262(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 262:
                get_all_moves_262_263(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 263:
                get_all_moves_263_253(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 264:
                get_all_moves_264_265(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 265:
                get_all_moves_265_267(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_265_264(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 266:
                get_all_moves_266_264(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_266_267(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 267:
                get_all_moves_267_268(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 268:
                get_all_moves_268_253(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 269:
                get_all_moves_269_270(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 270:
                get_all_moves_270_272(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_270_269(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 271:
                get_all_moves_271_269(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_271_272(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 272:
                get_all_moves_272_273(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 273:
                get_all_moves_273_253(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 274:
                get_all_moves_274_279(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 275:
                get_all_moves_275_276(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 276:
                get_all_moves_276_274(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 277:
                get_all_moves_277_278(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 278:
                get_all_moves_278_274(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 279:
                get_all_moves_279_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 280:
                get_all_moves_280_281(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 281:
                get_all_moves_281_285(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_290(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_295(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_300(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_305(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_310(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_315(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_281_320(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 282:
                get_all_moves_282_324(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_282_326(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 283:
                get_all_moves_283_284(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 284:
                get_all_moves_284_286(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_284_283(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 285:
                get_all_moves_285_283(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_285_286(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 286:
                get_all_moves_286_287(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 287:
                get_all_moves_287_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 288:
                get_all_moves_288_289(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 289:
                get_all_moves_289_291(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_289_288(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 290:
                get_all_moves_290_288(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_290_291(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 291:
                get_all_moves_291_292(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 292:
                get_all_moves_292_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 293:
                get_all_moves_293_294(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 294:
                get_all_moves_294_296(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_294_293(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 295:
                get_all_moves_295_293(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_295_296(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 296:
                get_all_moves_296_297(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 297:
                get_all_moves_297_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 298:
                get_all_moves_298_299(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 299:
                get_all_moves_299_301(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_299_298(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 300:
                get_all_moves_300_298(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_300_301(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 301:
                get_all_moves_301_302(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 302:
                get_all_moves_302_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 303:
                get_all_moves_303_304(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 304:
                get_all_moves_304_306(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_304_303(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 305:
                get_all_moves_305_303(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_305_306(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 306:
                get_all_moves_306_307(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 307:
                get_all_moves_307_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 308:
                get_all_moves_308_309(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 309:
                get_all_moves_309_311(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_309_308(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 310:
                get_all_moves_310_308(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_310_311(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 311:
                get_all_moves_311_312(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 312:
                get_all_moves_312_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 313:
                get_all_moves_313_314(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 314:
                get_all_moves_314_316(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_314_313(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 315:
                get_all_moves_315_313(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_315_316(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 316:
                get_all_moves_316_317(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 317:
                get_all_moves_317_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 318:
                get_all_moves_318_319(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 319:
                get_all_moves_319_321(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_319_318(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 320:
                get_all_moves_320_318(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_320_321(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 321:
                get_all_moves_321_322(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 322:
                get_all_moves_322_282(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 323:
                get_all_moves_323_328(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 324:
                get_all_moves_324_325(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 325:
                get_all_moves_325_323(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 326:
                get_all_moves_326_327(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 327:
                get_all_moves_327_323(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 328:
                get_all_moves_328_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 329:
                get_all_moves_329_330(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 330:
                get_all_moves_330_331(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 331:
                get_all_moves_331_333(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_331_335(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 332:
                get_all_moves_332_337(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 333:
                get_all_moves_333_334(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 334:
                get_all_moves_334_332(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 335:
                get_all_moves_335_336(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 336:
                get_all_moves_336_332(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 337:
                get_all_moves_337_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 338:
                get_all_moves_338_339(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 339:
                get_all_moves_339_341(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_339_362(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 340:
                get_all_moves_340_364(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 341:
                get_all_moves_341_343(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_341_345(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 342:
                get_all_moves_342_349(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_342_351(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 343:
                get_all_moves_343_344(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 344:
                get_all_moves_344_342(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 345:
                get_all_moves_345_346(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 346:
                get_all_moves_346_347(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 347:
                get_all_moves_347_342(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 348:
                get_all_moves_348_340(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 349:
                get_all_moves_349_350(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 350:
                get_all_moves_350_348(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 351:
                get_all_moves_351_352(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 352:
                get_all_moves_352_354(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_352_356(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_352_358(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_352_360(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 353:
                get_all_moves_353_348(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 354:
                get_all_moves_354_355(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 355:
                get_all_moves_355_353(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 356:
                get_all_moves_356_357(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 357:
                get_all_moves_357_353(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 358:
                get_all_moves_358_359(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 359:
                get_all_moves_359_353(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 360:
                get_all_moves_360_361(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 361:
                get_all_moves_361_353(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 362:
                get_all_moves_362_363(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 363:
                get_all_moves_363_340(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 364:
                get_all_moves_364_201(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 365:
                get_all_moves_365_366(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 366:
                get_all_moves_366_368(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_366_370(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 367:
                get_all_moves_367_372(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 368:
                get_all_moves_368_369(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 369:
                get_all_moves_369_367(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 370:
                get_all_moves_370_371(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 371:
                get_all_moves_371_367(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 372:
                get_all_moves_372_197(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 373:
                get_all_moves_373_375(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_373_382(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 374:
                get_all_moves_374_392(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_374_0(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 375:
                get_all_moves_375_376(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 376:
                get_all_moves_376_378(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_376_380(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 377:
                get_all_moves_377_374(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 378:
                get_all_moves_378_379(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 379:
                get_all_moves_379_377(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 380:
                get_all_moves_380_381(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 381:
                get_all_moves_381_377(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 382:
                get_all_moves_382_383(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 383:
                get_all_moves_383_385(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_383_388(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 384:
                get_all_moves_384_374(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 385:
                get_all_moves_385_386(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 386:
                get_all_moves_386_387(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 387:
                get_all_moves_387_384(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 388:
                get_all_moves_388_389(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 389:
                get_all_moves_389_390(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 390:
                get_all_moves_390_384(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 391:
                get_all_moves_391_0(current_cell, cache, mr, moves, move_length_limit);
                get_all_moves_391_392(current_cell, cache, mr, moves, move_length_limit);
                break;
            case 392:
                break;
            default:
                break;
        }
    }

    bool game_state::apply_any_move(resettable_bitarray_stack& cache){
        switch(current_state){
            case 1:
                if(apply_any_move_1_3(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_1_170(current_cell, cache)){
                    return true;
                }
                return false;
            case 5:
                if(apply_any_move_5_7(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_5_27(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_5_56(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_5_85(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_5_134(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_5_143(current_cell, cache)){
                    return true;
                }
                return false;
            case 8:
                if(apply_any_move_8_10(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_8_18(current_cell, cache)){
                    return true;
                }
                return false;
            case 11:
                if(apply_any_move_11_13(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_11_15(current_cell, cache)){
                    return true;
                }
                return false;
            case 19:
                if(apply_any_move_19_21(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_19_23(current_cell, cache)){
                    return true;
                }
                return false;
            case 28:
                if(apply_any_move_28_32(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_28_37(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_28_42(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_28_47(current_cell, cache)){
                    return true;
                }
                return false;
            case 29:
                if(apply_any_move_29_51(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_29_53(current_cell, cache)){
                    return true;
                }
                return false;
            case 31:
                if(apply_any_move_31_33(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_31_30(current_cell, cache)){
                    return true;
                }
                return false;
            case 32:
                if(apply_any_move_32_30(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_32_33(current_cell, cache)){
                    return true;
                }
                return false;
            case 36:
                if(apply_any_move_36_38(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_36_35(current_cell, cache)){
                    return true;
                }
                return false;
            case 37:
                if(apply_any_move_37_35(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_37_38(current_cell, cache)){
                    return true;
                }
                return false;
            case 41:
                if(apply_any_move_41_43(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_41_40(current_cell, cache)){
                    return true;
                }
                return false;
            case 42:
                if(apply_any_move_42_40(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_42_43(current_cell, cache)){
                    return true;
                }
                return false;
            case 46:
                if(apply_any_move_46_48(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_46_45(current_cell, cache)){
                    return true;
                }
                return false;
            case 47:
                if(apply_any_move_47_45(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_47_48(current_cell, cache)){
                    return true;
                }
                return false;
            case 57:
                if(apply_any_move_57_61(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_57_66(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_57_71(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_57_76(current_cell, cache)){
                    return true;
                }
                return false;
            case 58:
                if(apply_any_move_58_80(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_58_82(current_cell, cache)){
                    return true;
                }
                return false;
            case 60:
                if(apply_any_move_60_62(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_60_59(current_cell, cache)){
                    return true;
                }
                return false;
            case 61:
                if(apply_any_move_61_59(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_61_62(current_cell, cache)){
                    return true;
                }
                return false;
            case 65:
                if(apply_any_move_65_67(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_65_64(current_cell, cache)){
                    return true;
                }
                return false;
            case 66:
                if(apply_any_move_66_64(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_66_67(current_cell, cache)){
                    return true;
                }
                return false;
            case 70:
                if(apply_any_move_70_72(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_70_69(current_cell, cache)){
                    return true;
                }
                return false;
            case 71:
                if(apply_any_move_71_69(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_71_72(current_cell, cache)){
                    return true;
                }
                return false;
            case 75:
                if(apply_any_move_75_77(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_75_74(current_cell, cache)){
                    return true;
                }
                return false;
            case 76:
                if(apply_any_move_76_74(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_76_77(current_cell, cache)){
                    return true;
                }
                return false;
            case 86:
                if(apply_any_move_86_90(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_95(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_100(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_105(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_110(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_115(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_120(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_86_125(current_cell, cache)){
                    return true;
                }
                return false;
            case 87:
                if(apply_any_move_87_129(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_87_131(current_cell, cache)){
                    return true;
                }
                return false;
            case 89:
                if(apply_any_move_89_91(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_89_88(current_cell, cache)){
                    return true;
                }
                return false;
            case 90:
                if(apply_any_move_90_88(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_90_91(current_cell, cache)){
                    return true;
                }
                return false;
            case 94:
                if(apply_any_move_94_96(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_94_93(current_cell, cache)){
                    return true;
                }
                return false;
            case 95:
                if(apply_any_move_95_93(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_95_96(current_cell, cache)){
                    return true;
                }
                return false;
            case 99:
                if(apply_any_move_99_101(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_99_98(current_cell, cache)){
                    return true;
                }
                return false;
            case 100:
                if(apply_any_move_100_98(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_100_101(current_cell, cache)){
                    return true;
                }
                return false;
            case 104:
                if(apply_any_move_104_106(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_104_103(current_cell, cache)){
                    return true;
                }
                return false;
            case 105:
                if(apply_any_move_105_103(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_105_106(current_cell, cache)){
                    return true;
                }
                return false;
            case 109:
                if(apply_any_move_109_111(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_109_108(current_cell, cache)){
                    return true;
                }
                return false;
            case 110:
                if(apply_any_move_110_108(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_110_111(current_cell, cache)){
                    return true;
                }
                return false;
            case 114:
                if(apply_any_move_114_116(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_114_113(current_cell, cache)){
                    return true;
                }
                return false;
            case 115:
                if(apply_any_move_115_113(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_115_116(current_cell, cache)){
                    return true;
                }
                return false;
            case 119:
                if(apply_any_move_119_121(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_119_118(current_cell, cache)){
                    return true;
                }
                return false;
            case 120:
                if(apply_any_move_120_118(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_120_121(current_cell, cache)){
                    return true;
                }
                return false;
            case 124:
                if(apply_any_move_124_126(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_124_123(current_cell, cache)){
                    return true;
                }
                return false;
            case 125:
                if(apply_any_move_125_123(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_125_126(current_cell, cache)){
                    return true;
                }
                return false;
            case 136:
                if(apply_any_move_136_138(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_136_140(current_cell, cache)){
                    return true;
                }
                return false;
            case 144:
                if(apply_any_move_144_146(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_144_167(current_cell, cache)){
                    return true;
                }
                return false;
            case 146:
                if(apply_any_move_146_148(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_146_150(current_cell, cache)){
                    return true;
                }
                return false;
            case 147:
                if(apply_any_move_147_154(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_147_156(current_cell, cache)){
                    return true;
                }
                return false;
            case 151:
                if(apply_any_move_151_152(current_cell, cache)){
                    return true;
                }
                return false;
            case 157:
                if(apply_any_move_157_159(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_157_161(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_157_163(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_157_165(current_cell, cache)){
                    return true;
                }
                return false;
            case 171:
                if(apply_any_move_171_173(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_171_175(current_cell, cache)){
                    return true;
                }
                return false;
            case 178:
                if(apply_any_move_178_180(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_178_187(current_cell, cache)){
                    return true;
                }
                return false;
            case 181:
                if(apply_any_move_181_183(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_181_185(current_cell, cache)){
                    return true;
                }
                return false;
            case 188:
                if(apply_any_move_188_190(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_188_193(current_cell, cache)){
                    return true;
                }
                return false;
            case 191:
                if(apply_any_move_191_192(current_cell, cache)){
                    return true;
                }
                return false;
            case 194:
                if(apply_any_move_194_195(current_cell, cache)){
                    return true;
                }
                return false;
            case 196:
                if(apply_any_move_196_198(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_196_365(current_cell, cache)){
                    return true;
                }
                return false;
            case 200:
                if(apply_any_move_200_202(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_200_222(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_200_251(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_200_280(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_200_329(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_200_338(current_cell, cache)){
                    return true;
                }
                return false;
            case 203:
                if(apply_any_move_203_205(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_203_213(current_cell, cache)){
                    return true;
                }
                return false;
            case 206:
                if(apply_any_move_206_208(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_206_210(current_cell, cache)){
                    return true;
                }
                return false;
            case 214:
                if(apply_any_move_214_216(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_214_218(current_cell, cache)){
                    return true;
                }
                return false;
            case 223:
                if(apply_any_move_223_227(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_223_232(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_223_237(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_223_242(current_cell, cache)){
                    return true;
                }
                return false;
            case 224:
                if(apply_any_move_224_246(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_224_248(current_cell, cache)){
                    return true;
                }
                return false;
            case 226:
                if(apply_any_move_226_228(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_226_225(current_cell, cache)){
                    return true;
                }
                return false;
            case 227:
                if(apply_any_move_227_225(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_227_228(current_cell, cache)){
                    return true;
                }
                return false;
            case 231:
                if(apply_any_move_231_233(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_231_230(current_cell, cache)){
                    return true;
                }
                return false;
            case 232:
                if(apply_any_move_232_230(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_232_233(current_cell, cache)){
                    return true;
                }
                return false;
            case 236:
                if(apply_any_move_236_238(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_236_235(current_cell, cache)){
                    return true;
                }
                return false;
            case 237:
                if(apply_any_move_237_235(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_237_238(current_cell, cache)){
                    return true;
                }
                return false;
            case 241:
                if(apply_any_move_241_243(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_241_240(current_cell, cache)){
                    return true;
                }
                return false;
            case 242:
                if(apply_any_move_242_240(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_242_243(current_cell, cache)){
                    return true;
                }
                return false;
            case 252:
                if(apply_any_move_252_256(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_252_261(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_252_266(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_252_271(current_cell, cache)){
                    return true;
                }
                return false;
            case 253:
                if(apply_any_move_253_275(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_253_277(current_cell, cache)){
                    return true;
                }
                return false;
            case 255:
                if(apply_any_move_255_257(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_255_254(current_cell, cache)){
                    return true;
                }
                return false;
            case 256:
                if(apply_any_move_256_254(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_256_257(current_cell, cache)){
                    return true;
                }
                return false;
            case 260:
                if(apply_any_move_260_262(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_260_259(current_cell, cache)){
                    return true;
                }
                return false;
            case 261:
                if(apply_any_move_261_259(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_261_262(current_cell, cache)){
                    return true;
                }
                return false;
            case 265:
                if(apply_any_move_265_267(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_265_264(current_cell, cache)){
                    return true;
                }
                return false;
            case 266:
                if(apply_any_move_266_264(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_266_267(current_cell, cache)){
                    return true;
                }
                return false;
            case 270:
                if(apply_any_move_270_272(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_270_269(current_cell, cache)){
                    return true;
                }
                return false;
            case 271:
                if(apply_any_move_271_269(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_271_272(current_cell, cache)){
                    return true;
                }
                return false;
            case 281:
                if(apply_any_move_281_285(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_290(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_295(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_300(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_305(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_310(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_315(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_281_320(current_cell, cache)){
                    return true;
                }
                return false;
            case 282:
                if(apply_any_move_282_324(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_282_326(current_cell, cache)){
                    return true;
                }
                return false;
            case 284:
                if(apply_any_move_284_286(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_284_283(current_cell, cache)){
                    return true;
                }
                return false;
            case 285:
                if(apply_any_move_285_283(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_285_286(current_cell, cache)){
                    return true;
                }
                return false;
            case 289:
                if(apply_any_move_289_291(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_289_288(current_cell, cache)){
                    return true;
                }
                return false;
            case 290:
                if(apply_any_move_290_288(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_290_291(current_cell, cache)){
                    return true;
                }
                return false;
            case 294:
                if(apply_any_move_294_296(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_294_293(current_cell, cache)){
                    return true;
                }
                return false;
            case 295:
                if(apply_any_move_295_293(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_295_296(current_cell, cache)){
                    return true;
                }
                return false;
            case 299:
                if(apply_any_move_299_301(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_299_298(current_cell, cache)){
                    return true;
                }
                return false;
            case 300:
                if(apply_any_move_300_298(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_300_301(current_cell, cache)){
                    return true;
                }
                return false;
            case 304:
                if(apply_any_move_304_306(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_304_303(current_cell, cache)){
                    return true;
                }
                return false;
            case 305:
                if(apply_any_move_305_303(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_305_306(current_cell, cache)){
                    return true;
                }
                return false;
            case 309:
                if(apply_any_move_309_311(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_309_308(current_cell, cache)){
                    return true;
                }
                return false;
            case 310:
                if(apply_any_move_310_308(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_310_311(current_cell, cache)){
                    return true;
                }
                return false;
            case 314:
                if(apply_any_move_314_316(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_314_313(current_cell, cache)){
                    return true;
                }
                return false;
            case 315:
                if(apply_any_move_315_313(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_315_316(current_cell, cache)){
                    return true;
                }
                return false;
            case 319:
                if(apply_any_move_319_321(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_319_318(current_cell, cache)){
                    return true;
                }
                return false;
            case 320:
                if(apply_any_move_320_318(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_320_321(current_cell, cache)){
                    return true;
                }
                return false;
            case 331:
                if(apply_any_move_331_333(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_331_335(current_cell, cache)){
                    return true;
                }
                return false;
            case 339:
                if(apply_any_move_339_341(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_339_362(current_cell, cache)){
                    return true;
                }
                return false;
            case 341:
                if(apply_any_move_341_343(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_341_345(current_cell, cache)){
                    return true;
                }
                return false;
            case 342:
                if(apply_any_move_342_349(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_342_351(current_cell, cache)){
                    return true;
                }
                return false;
            case 346:
                if(apply_any_move_346_347(current_cell, cache)){
                    return true;
                }
                return false;
            case 352:
                if(apply_any_move_352_354(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_352_356(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_352_358(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_352_360(current_cell, cache)){
                    return true;
                }
                return false;
            case 366:
                if(apply_any_move_366_368(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_366_370(current_cell, cache)){
                    return true;
                }
                return false;
            case 373:
                if(apply_any_move_373_375(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_373_382(current_cell, cache)){
                    return true;
                }
                return false;
            case 374:
                if(apply_any_move_374_392(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_374_0(current_cell, cache)){
                    return true;
                }
                return false;
            case 376:
                if(apply_any_move_376_378(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_376_380(current_cell, cache)){
                    return true;
                }
                return false;
            case 383:
                if(apply_any_move_383_385(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_383_388(current_cell, cache)){
                    return true;
                }
                return false;
            case 386:
                if(apply_any_move_386_387(current_cell, cache)){
                    return true;
                }
                return false;
            case 389:
                if(apply_any_move_389_390(current_cell, cache)){
                    return true;
                }
                return false;
            case 391:
                if(apply_any_move_391_0(current_cell, cache)){
                    return true;
                }
                if(apply_any_move_391_392(current_cell, cache)){
                    return true;
                }
                return false;
            default:
                return false;
        }
    }

    void game_state::revert(const revert_information& ri){
        current_cell = ri.previous_cell;
        current_player = ri.previous_player;
        current_state = ri.previous_state;
        for(unsigned int i=ri.brr.size();i>0;--i){
            pieces[ri.brr[i-1].cell] = ri.brr[i-1].previous_piece;
        }
        for(unsigned int i=ri.vrr.size();i>0;--i){
            variables[ri.vrr[i-1].variable] = ri.vrr[i-1].previous_value;
        }
    }

    void game_state::apply_action_with_revert(const action_representation& action, revert_information& ri){
        switch(action.index){
            case 1:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = (variables[4])+(1);
                break;
            case 2:
                current_player = 2;
                break;
            case 189:
                current_player = 0;
                break;
            case 3:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 0;
                break;
            case 9:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 50:
                ri.vrr.emplace_back(variables[5], 5);
                variables[5] = 1;
                break;
            case 21:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 9;
                break;
            case 20:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 49:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 13;
                break;
            case 29:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 9;
                break;
            case 32:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 40:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 9;
                break;
            case 45:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 52:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 76:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 8;
                break;
            case 75:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 78:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 94:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 13;
                break;
            case 93:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 96:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 132:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 12;
                break;
            case 131:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 134:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 150:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 10;
                break;
            case 149:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 152:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 173:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 160:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 11;
                break;
            case 162:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 13;
                break;
            case 163:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 10;
                break;
            case 164:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 8;
                break;
            case 165:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 12;
                break;
            case 171:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 11;
                break;
            case 172:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 1;
                break;
            case 183:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 185:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 11;
                break;
            case 186:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 0;
                break;
            case 187:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 177:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 181:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 211:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = (variables[4])+(1);
                break;
            case 212:
                current_player = 1;
                break;
            case 191:
                current_player = 0;
                break;
            case 193:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 50;
                break;
            case 194:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 50;
                break;
            case 196:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 100;
                break;
            case 197:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 0;
                break;
            case 199:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 50;
                break;
            case 200:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 50;
                break;
            case 201:
                current_player = 0;
                break;
            case 203:
                current_player = 0;
                break;
            case 207:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 100;
                break;
            case 208:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 0;
                break;
            case 209:
                current_player = 0;
                break;
            case 399:
                current_player = 0;
                break;
            case 213:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 0;
                break;
            case 219:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 260:
                ri.vrr.emplace_back(variables[2], 2);
                variables[2] = 1;
                break;
            case 231:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 1;
                break;
            case 230:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 259:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 5;
                break;
            case 239:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 1;
                break;
            case 242:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 250:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 1;
                break;
            case 255:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 262:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 286:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 0;
                break;
            case 285:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 288:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 304:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 5;
                break;
            case 303:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 306:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 342:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 4;
                break;
            case 341:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 344:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 360:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 2;
                break;
            case 359:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 362:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 383:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 370:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 3;
                break;
            case 372:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 5;
                break;
            case 373:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 2;
                break;
            case 374:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 0;
                break;
            case 375:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 4;
                break;
            case 381:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 3;
                break;
            case 382:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 1;
                break;
            case 393:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 395:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 3;
                break;
            case 396:
                ri.vrr.emplace_back(variables[3], 3);
                variables[3] = 0;
                break;
            case 397:
                ri.vrr.emplace_back(variables[4], 4);
                variables[4] = 0;
                break;
            case 387:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 391:
                ri.brr.emplace_back(pieces[action.cell], action.cell);
                pieces[action.cell] = 7;
                break;
            case 401:
                current_player = 0;
                break;
            case 403:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 50;
                break;
            case 404:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 50;
                break;
            case 406:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 100;
                break;
            case 407:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 0;
                break;
            case 409:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 50;
                break;
            case 410:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 50;
                break;
            case 411:
                current_player = 0;
                break;
            case 413:
                current_player = 0;
                break;
            case 417:
                ri.vrr.emplace_back(variables[0], 0);
                variables[0] = 100;
                break;
            case 418:
                ri.vrr.emplace_back(variables[1], 1);
                variables[1] = 0;
                break;
            case 419:
                current_player = 0;
                break;
            default:
                break;
        }
    }

    void game_state::apply_action(const action_representation& action){
        switch(action.index){
            case 1:
                variables[4] = (variables[4])+(1);
                break;
            case 2:
                current_player = 2;
                current_cell = action.cell;
                current_state = 1;
                break;
            case 189:
                current_player = 0;
                current_cell = action.cell;
                current_state = 178;
                break;
            case 3:
                variables[3] = 0;
                break;
            case 9:
                pieces[action.cell] = 7;
                break;
            case 50:
                variables[5] = 1;
                break;
            case 21:
                pieces[action.cell] = 9;
                break;
            case 20:
                variables[4] = 0;
                break;
            case 49:
                pieces[action.cell] = 13;
                break;
            case 29:
                pieces[action.cell] = 9;
                break;
            case 32:
                pieces[action.cell] = 7;
                break;
            case 40:
                pieces[action.cell] = 9;
                break;
            case 45:
                pieces[action.cell] = 7;
                break;
            case 52:
                pieces[action.cell] = 7;
                break;
            case 76:
                pieces[action.cell] = 8;
                break;
            case 75:
                variables[4] = 0;
                break;
            case 78:
                pieces[action.cell] = 7;
                break;
            case 94:
                pieces[action.cell] = 13;
                break;
            case 93:
                variables[4] = 0;
                break;
            case 96:
                pieces[action.cell] = 7;
                break;
            case 132:
                pieces[action.cell] = 12;
                break;
            case 131:
                variables[4] = 0;
                break;
            case 134:
                pieces[action.cell] = 7;
                break;
            case 150:
                pieces[action.cell] = 10;
                break;
            case 149:
                variables[4] = 0;
                break;
            case 152:
                pieces[action.cell] = 7;
                break;
            case 173:
                variables[4] = 0;
                break;
            case 160:
                pieces[action.cell] = 11;
                break;
            case 162:
                pieces[action.cell] = 13;
                break;
            case 163:
                pieces[action.cell] = 10;
                break;
            case 164:
                pieces[action.cell] = 8;
                break;
            case 165:
                pieces[action.cell] = 12;
                break;
            case 171:
                pieces[action.cell] = 11;
                break;
            case 172:
                variables[3] = 1;
                break;
            case 183:
                pieces[action.cell] = 7;
                break;
            case 185:
                pieces[action.cell] = 11;
                break;
            case 186:
                variables[3] = 0;
                break;
            case 187:
                variables[4] = 0;
                break;
            case 177:
                pieces[action.cell] = 7;
                break;
            case 181:
                pieces[action.cell] = 7;
                break;
            case 211:
                variables[4] = (variables[4])+(1);
                break;
            case 212:
                current_player = 1;
                current_cell = action.cell;
                current_state = 196;
                break;
            case 191:
                current_player = 0;
                current_cell = action.cell;
                current_state = 181;
                break;
            case 193:
                variables[1] = 50;
                break;
            case 194:
                variables[0] = 50;
                break;
            case 196:
                variables[1] = 100;
                break;
            case 197:
                variables[0] = 0;
                break;
            case 199:
                variables[1] = 50;
                break;
            case 200:
                variables[0] = 50;
                break;
            case 201:
                current_player = 0;
                current_cell = action.cell;
                current_state = 188;
                break;
            case 203:
                current_player = 0;
                current_cell = action.cell;
                current_state = 191;
                break;
            case 207:
                variables[1] = 100;
                break;
            case 208:
                variables[0] = 0;
                break;
            case 209:
                current_player = 0;
                current_cell = action.cell;
                current_state = 194;
                break;
            case 399:
                current_player = 0;
                current_cell = action.cell;
                current_state = 373;
                break;
            case 213:
                variables[3] = 0;
                break;
            case 219:
                pieces[action.cell] = 7;
                break;
            case 260:
                variables[2] = 1;
                break;
            case 231:
                pieces[action.cell] = 1;
                break;
            case 230:
                variables[4] = 0;
                break;
            case 259:
                pieces[action.cell] = 5;
                break;
            case 239:
                pieces[action.cell] = 1;
                break;
            case 242:
                pieces[action.cell] = 7;
                break;
            case 250:
                pieces[action.cell] = 1;
                break;
            case 255:
                pieces[action.cell] = 7;
                break;
            case 262:
                pieces[action.cell] = 7;
                break;
            case 286:
                pieces[action.cell] = 0;
                break;
            case 285:
                variables[4] = 0;
                break;
            case 288:
                pieces[action.cell] = 7;
                break;
            case 304:
                pieces[action.cell] = 5;
                break;
            case 303:
                variables[4] = 0;
                break;
            case 306:
                pieces[action.cell] = 7;
                break;
            case 342:
                pieces[action.cell] = 4;
                break;
            case 341:
                variables[4] = 0;
                break;
            case 344:
                pieces[action.cell] = 7;
                break;
            case 360:
                pieces[action.cell] = 2;
                break;
            case 359:
                variables[4] = 0;
                break;
            case 362:
                pieces[action.cell] = 7;
                break;
            case 383:
                variables[4] = 0;
                break;
            case 370:
                pieces[action.cell] = 3;
                break;
            case 372:
                pieces[action.cell] = 5;
                break;
            case 373:
                pieces[action.cell] = 2;
                break;
            case 374:
                pieces[action.cell] = 0;
                break;
            case 375:
                pieces[action.cell] = 4;
                break;
            case 381:
                pieces[action.cell] = 3;
                break;
            case 382:
                variables[3] = 1;
                break;
            case 393:
                pieces[action.cell] = 7;
                break;
            case 395:
                pieces[action.cell] = 3;
                break;
            case 396:
                variables[3] = 0;
                break;
            case 397:
                variables[4] = 0;
                break;
            case 387:
                pieces[action.cell] = 7;
                break;
            case 391:
                pieces[action.cell] = 7;
                break;
            case 401:
                current_player = 0;
                current_cell = action.cell;
                current_state = 376;
                break;
            case 403:
                variables[0] = 50;
                break;
            case 404:
                variables[1] = 50;
                break;
            case 406:
                variables[0] = 100;
                break;
            case 407:
                variables[1] = 0;
                break;
            case 409:
                variables[0] = 50;
                break;
            case 410:
                variables[1] = 50;
                break;
            case 411:
                current_player = 0;
                current_cell = action.cell;
                current_state = 383;
                break;
            case 413:
                current_player = 0;
                current_cell = action.cell;
                current_state = 386;
                break;
            case 417:
                variables[0] = 100;
                break;
            case 418:
                variables[1] = 0;
                break;
            case 419:
                current_player = 0;
                current_cell = action.cell;
                current_state = 389;
                break;
            default:
                break;
        }
    }

    bool game_state::evaluate0(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset0();
        if(get_pattern_value0_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value0_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate1(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset1();
        if(get_pattern_value1_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value1_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate2(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset2();
        if(get_pattern_value2_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value2_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate3(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset3();
        if(get_pattern_value3_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate4(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset4();
        if(get_pattern_value4_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate5(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset5();
        if(get_pattern_value5_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate6(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset6();
        if(get_pattern_value6_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate7(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset7();
        if(get_pattern_value7_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate8(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset8();
        if(get_pattern_value8_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value8_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate9(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset9();
        if(get_pattern_value9_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value9_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate10(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset10();
        if(get_pattern_value10_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value10_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate11(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset11();
        if(get_pattern_value11_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate12(int cell, resettable_bitarray_stack& cache){
        if(get_pattern_value12_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value12_0_169(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate13(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset13();
        if(get_pattern_value13_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value13_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate14(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset14();
        if(get_pattern_value14_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value14_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate15(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset15();
        if(get_pattern_value15_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value15_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate16(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset16();
        if(get_pattern_value16_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate17(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset17();
        if(get_pattern_value17_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate18(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset18();
        if(get_pattern_value18_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate19(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset19();
        if(get_pattern_value19_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate20(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset20();
        if(get_pattern_value20_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate21(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset21();
        if(get_pattern_value21_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value21_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate22(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset22();
        if(get_pattern_value22_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value22_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate23(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset23();
        if(get_pattern_value23_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_5(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_15(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_25(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_35(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_45(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_55(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_65(cell, cache)){
            return true;
        }
        if(get_pattern_value23_0_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate24(int cell, resettable_bitarray_stack& cache){
        cache.pattern_reset24();
        if(get_pattern_value24_0_1(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::evaluate25(int cell, resettable_bitarray_stack& cache){
        if(get_pattern_value25_0_2(cell, cache)){
            return true;
        }
        if(get_pattern_value25_0_169(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_1_3([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int variable_change0 = variables[3];
        variables[3] = 0;
        for(int el=1;el<65;++el){
            if(apply_any_move_5_7(el, cache)){
                return true;
            }
            if(apply_any_move_5_27(el, cache)){
                return true;
            }
            if(apply_any_move_5_56(el, cache)){
                return true;
            }
            if(apply_any_move_5_85(el, cache)){
                return true;
            }
            if(apply_any_move_5_134(el, cache)){
                return true;
            }
            if(apply_any_move_5_143(el, cache)){
                return true;
            }
        }
        variables[3] = variable_change0;
        return false;
    }

    bool game_state::apply_any_move_1_170([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[3] != 1){
            return false;
        }
        if(apply_any_move_171_173(cell, cache)){
            return true;
        }
        if(apply_any_move_171_175(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_5_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_8_10(cell, cache)){
            return true;
        }
        if(apply_any_move_8_18(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_5_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_28_32(cell, cache)){
            return true;
        }
        if(apply_any_move_28_37(cell, cache)){
            return true;
        }
        if(apply_any_move_28_42(cell, cache)){
            return true;
        }
        if(apply_any_move_28_47(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_5_56([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_57_61(cell, cache)){
            return true;
        }
        if(apply_any_move_57_66(cell, cache)){
            return true;
        }
        if(apply_any_move_57_71(cell, cache)){
            return true;
        }
        if(apply_any_move_57_76(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_5_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_86_90(cell, cache)){
            return true;
        }
        if(apply_any_move_86_95(cell, cache)){
            return true;
        }
        if(apply_any_move_86_100(cell, cache)){
            return true;
        }
        if(apply_any_move_86_105(cell, cache)){
            return true;
        }
        if(apply_any_move_86_110(cell, cache)){
            return true;
        }
        if(apply_any_move_86_115(cell, cache)){
            return true;
        }
        if(apply_any_move_86_120(cell, cache)){
            return true;
        }
        if(apply_any_move_86_125(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_5_134([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        for(const auto el: shift_table1[cell]){
            if(apply_any_move_136_138(el, cache)){
                return true;
            }
            if(apply_any_move_136_140(el, cache)){
                return true;
            }
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_5_143([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_144_146(cell, cache)){
            return true;
        }
        if(apply_any_move_144_167(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table0[cell]){
            if(apply_any_move_11_13(el, cache)){
                return true;
            }
            if(apply_any_move_11_15(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::apply_any_move_8_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[5] != 0){
            return false;
        }
        if(evaluate0(cell, cache)){
            return false;
        }
        if(apply_any_move_19_21(cell, cache)){
            return true;
        }
        if(apply_any_move_19_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        [[maybe_unused]] int variable_change1 = variables[5];
        variables[5] = 1;
        if(evaluate3(cell, cache)){
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_11_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 9;
        [[maybe_unused]] int variable_change2 = variables[5];
        variables[5] = 1;
        if(evaluate3(cell, cache)){
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_19_21([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate1(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 13;
        [[maybe_unused]] int variable_change3 = variables[5];
        variables[5] = 1;
        if(evaluate3(cell, cache)){
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_19_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate2(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 13;
        [[maybe_unused]] int variable_change3 = variables[5];
        variables[5] = 1;
        if(evaluate3(cell, cache)){
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_28_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_32_30(cell, cache)){
            return true;
        }
        if(apply_any_move_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_28_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_37_35(cell, cache)){
            return true;
        }
        if(apply_any_move_37_38(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_28_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_42_40(cell, cache)){
            return true;
        }
        if(apply_any_move_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_28_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_47_45(cell, cache)){
            return true;
        }
        if(apply_any_move_47_48(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_29_51([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 8;
        if(evaluate3(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_29_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 8;
        if(evaluate3(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_31_33(cell, cache)){
            return true;
        }
        if(apply_any_move_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_31_33(cell, cache)){
            return true;
        }
        if(apply_any_move_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_36_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_36_38(cell, cache)){
            return true;
        }
        if(apply_any_move_36_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_37_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_36_38(cell, cache)){
            return true;
        }
        if(apply_any_move_36_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_37_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_41_43(cell, cache)){
            return true;
        }
        if(apply_any_move_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_41_43(cell, cache)){
            return true;
        }
        if(apply_any_move_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_46_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_46_48(cell, cache)){
            return true;
        }
        if(apply_any_move_46_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_47_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_46_48(cell, cache)){
            return true;
        }
        if(apply_any_move_46_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_47_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_29_51(cell, cache)){
            return true;
        }
        if(apply_any_move_29_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_57_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_61_59(cell, cache)){
            return true;
        }
        if(apply_any_move_61_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_57_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_66_64(cell, cache)){
            return true;
        }
        if(apply_any_move_66_67(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_57_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_71_69(cell, cache)){
            return true;
        }
        if(apply_any_move_71_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_57_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_76_74(cell, cache)){
            return true;
        }
        if(apply_any_move_76_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_58_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 13;
        if(evaluate3(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_58_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 13;
        if(evaluate3(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_60_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_60_59([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_60_62(cell, cache)){
            return true;
        }
        if(apply_any_move_60_59(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_61_59([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_60_62(cell, cache)){
            return true;
        }
        if(apply_any_move_60_59(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_61_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_65_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_65_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_65_67(cell, cache)){
            return true;
        }
        if(apply_any_move_65_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_66_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_65_67(cell, cache)){
            return true;
        }
        if(apply_any_move_65_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_66_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_70_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_70_69([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_70_72(cell, cache)){
            return true;
        }
        if(apply_any_move_70_69(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_71_69([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_70_72(cell, cache)){
            return true;
        }
        if(apply_any_move_70_69(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_71_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_75_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_75_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_75_77(cell, cache)){
            return true;
        }
        if(apply_any_move_75_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_76_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_75_77(cell, cache)){
            return true;
        }
        if(apply_any_move_75_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_76_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_58_80(cell, cache)){
            return true;
        }
        if(apply_any_move_58_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_90_88(cell, cache)){
            return true;
        }
        if(apply_any_move_90_91(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_95_93(cell, cache)){
            return true;
        }
        if(apply_any_move_95_96(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_100_98(cell, cache)){
            return true;
        }
        if(apply_any_move_100_101(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_105_103(cell, cache)){
            return true;
        }
        if(apply_any_move_105_106(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_110_108(cell, cache)){
            return true;
        }
        if(apply_any_move_110_111(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_115_113(cell, cache)){
            return true;
        }
        if(apply_any_move_115_116(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_120_118(cell, cache)){
            return true;
        }
        if(apply_any_move_120_121(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_86_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_125_123(cell, cache)){
            return true;
        }
        if(apply_any_move_125_126(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_87_129([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 12;
        if(evaluate3(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_87_131([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 12;
        if(evaluate3(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_89_91([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_89_88([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_89_91(cell, cache)){
            return true;
        }
        if(apply_any_move_89_88(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_90_88([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_89_91(cell, cache)){
            return true;
        }
        if(apply_any_move_89_88(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_90_91([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_94_96([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_94_93([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_94_96(cell, cache)){
            return true;
        }
        if(apply_any_move_94_93(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_95_93([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_94_96(cell, cache)){
            return true;
        }
        if(apply_any_move_94_93(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_95_96([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_99_101([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_99_98([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_99_101(cell, cache)){
            return true;
        }
        if(apply_any_move_99_98(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_100_98([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_99_101(cell, cache)){
            return true;
        }
        if(apply_any_move_99_98(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_100_101([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_104_106([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_104_103([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_104_106(cell, cache)){
            return true;
        }
        if(apply_any_move_104_103(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_105_103([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_104_106(cell, cache)){
            return true;
        }
        if(apply_any_move_104_103(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_105_106([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_109_111([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_109_108([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_109_111(cell, cache)){
            return true;
        }
        if(apply_any_move_109_108(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_110_108([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_109_111(cell, cache)){
            return true;
        }
        if(apply_any_move_109_108(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_110_111([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_114_116([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_114_113([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_114_116(cell, cache)){
            return true;
        }
        if(apply_any_move_114_113(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_115_113([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_114_116(cell, cache)){
            return true;
        }
        if(apply_any_move_114_113(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_115_116([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_119_121([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_119_118([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_119_121(cell, cache)){
            return true;
        }
        if(apply_any_move_119_118(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_120_118([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_119_121(cell, cache)){
            return true;
        }
        if(apply_any_move_119_118(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_120_121([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_124_126([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_124_123([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_124_126(cell, cache)){
            return true;
        }
        if(apply_any_move_124_123(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_125_123([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_124_126(cell, cache)){
            return true;
        }
        if(apply_any_move_124_123(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_125_126([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_87_129(cell, cache)){
            return true;
        }
        if(apply_any_move_87_131(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_136_138([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 10;
        if(evaluate3(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_136_140([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 10;
        if(evaluate3(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_144_146([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_146_148(cell, cache)){
            return true;
        }
        if(apply_any_move_146_150(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_144_167([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table9[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 11;
        [[maybe_unused]] int variable_change1 = variables[3];
        variables[3] = 1;
        [[maybe_unused]] int variable_change2 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_146_148([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_147_154(cell, cache)){
            return true;
        }
        if(apply_any_move_147_156(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_146_150([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table8[cell]){
            if(apply_any_move_151_152(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::apply_any_move_147_154([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return false;
            default:
                break;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 11;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_147_156([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            default:
                return false;
        }
        if(apply_any_move_157_159(cell, cache)){
            return true;
        }
        if(apply_any_move_157_161(cell, cache)){
            return true;
        }
        if(apply_any_move_157_163(cell, cache)){
            return true;
        }
        if(apply_any_move_157_165(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_151_152([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(apply_any_move_147_154(cell, cache)){
            return true;
        }
        if(apply_any_move_147_156(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_157_159([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 13;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_157_161([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 10;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_157_163([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 8;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_157_165([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 12;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_171_173([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 11;
        [[maybe_unused]] int variable_change3 = variables[3];
        variables[3] = 0;
        [[maybe_unused]] int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_171_175([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 11;
        [[maybe_unused]] int variable_change3 = variables[3];
        variables[3] = 0;
        [[maybe_unused]] int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate3(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 178;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_178_180([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[4] >= 50){
            return false;
        }
        current_player = 0;
        current_state = 181;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_178_187([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[4] != 50){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[1];
        variables[1] = 50;
        [[maybe_unused]] int variable_change1 = variables[0];
        variables[0] = 50;
        current_player = 0;
        current_state = 188;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_181_183([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(evaluate4(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[1];
        variables[1] = 50;
        [[maybe_unused]] int variable_change1 = variables[0];
        variables[0] = 50;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return false;
        }
        [[maybe_unused]] int variable_change2 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 1;
        current_state = 196;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_181_185([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(not evaluate5(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[1];
        variables[1] = 100;
        [[maybe_unused]] int variable_change1 = variables[0];
        variables[0] = 0;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return false;
        }
        [[maybe_unused]] int variable_change2 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 1;
        current_state = 196;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_188_190([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(evaluate6(cell, cache)){
            return false;
        }
        current_player = 0;
        current_state = 191;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_188_193([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(not evaluate7(cell, cache)){
            return false;
        }
        if(evaluate12(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[1];
        variables[1] = 100;
        [[maybe_unused]] int variable_change1 = variables[0];
        variables[0] = 0;
        current_player = 0;
        current_state = 194;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_191_192([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 1;
        current_state = 196;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_194_195([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 1;
        current_state = 196;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_196_198([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int variable_change0 = variables[3];
        variables[3] = 0;
        for(int el=1;el<65;++el){
            if(apply_any_move_200_202(el, cache)){
                return true;
            }
            if(apply_any_move_200_222(el, cache)){
                return true;
            }
            if(apply_any_move_200_251(el, cache)){
                return true;
            }
            if(apply_any_move_200_280(el, cache)){
                return true;
            }
            if(apply_any_move_200_329(el, cache)){
                return true;
            }
            if(apply_any_move_200_338(el, cache)){
                return true;
            }
        }
        variables[3] = variable_change0;
        return false;
    }

    bool game_state::apply_any_move_196_365([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[3] != 1){
            return false;
        }
        if(apply_any_move_366_368(cell, cache)){
            return true;
        }
        if(apply_any_move_366_370(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_200_202([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_203_205(cell, cache)){
            return true;
        }
        if(apply_any_move_203_213(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_200_222([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_223_227(cell, cache)){
            return true;
        }
        if(apply_any_move_223_232(cell, cache)){
            return true;
        }
        if(apply_any_move_223_237(cell, cache)){
            return true;
        }
        if(apply_any_move_223_242(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_200_251([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_252_256(cell, cache)){
            return true;
        }
        if(apply_any_move_252_261(cell, cache)){
            return true;
        }
        if(apply_any_move_252_266(cell, cache)){
            return true;
        }
        if(apply_any_move_252_271(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_200_280([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_281_285(cell, cache)){
            return true;
        }
        if(apply_any_move_281_290(cell, cache)){
            return true;
        }
        if(apply_any_move_281_295(cell, cache)){
            return true;
        }
        if(apply_any_move_281_300(cell, cache)){
            return true;
        }
        if(apply_any_move_281_305(cell, cache)){
            return true;
        }
        if(apply_any_move_281_310(cell, cache)){
            return true;
        }
        if(apply_any_move_281_315(cell, cache)){
            return true;
        }
        if(apply_any_move_281_320(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_200_329([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        for(const auto el: shift_table1[cell]){
            if(apply_any_move_331_333(el, cache)){
                return true;
            }
            if(apply_any_move_331_335(el, cache)){
                return true;
            }
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_200_338([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(apply_any_move_339_341(cell, cache)){
            return true;
        }
        if(apply_any_move_339_362(cell, cache)){
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::apply_any_move_203_205([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table0[cell]){
            if(apply_any_move_206_208(el, cache)){
                return true;
            }
            if(apply_any_move_206_210(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::apply_any_move_203_213([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[2] != 0){
            return false;
        }
        if(evaluate13(cell, cache)){
            return false;
        }
        if(apply_any_move_214_216(cell, cache)){
            return true;
        }
        if(apply_any_move_214_218(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_206_208([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        [[maybe_unused]] int variable_change1 = variables[2];
        variables[2] = 1;
        if(evaluate16(cell, cache)){
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_206_210([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 1;
        [[maybe_unused]] int variable_change2 = variables[2];
        variables[2] = 1;
        if(evaluate16(cell, cache)){
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_214_216([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate14(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 5;
        [[maybe_unused]] int variable_change3 = variables[2];
        variables[2] = 1;
        if(evaluate16(cell, cache)){
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_214_218([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate15(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 5;
        [[maybe_unused]] int variable_change3 = variables[2];
        variables[2] = 1;
        if(evaluate16(cell, cache)){
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_223_227([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_227_225(cell, cache)){
            return true;
        }
        if(apply_any_move_227_228(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_223_232([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_232_230(cell, cache)){
            return true;
        }
        if(apply_any_move_232_233(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_223_237([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_237_235(cell, cache)){
            return true;
        }
        if(apply_any_move_237_238(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_223_242([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_242_240(cell, cache)){
            return true;
        }
        if(apply_any_move_242_243(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_224_246([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 0;
        if(evaluate16(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_224_248([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 0;
        if(evaluate16(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_226_228([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_226_225([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_226_228(cell, cache)){
            return true;
        }
        if(apply_any_move_226_225(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_227_225([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_226_228(cell, cache)){
            return true;
        }
        if(apply_any_move_226_225(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_227_228([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_231_233([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_231_230([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_231_233(cell, cache)){
            return true;
        }
        if(apply_any_move_231_230(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_232_230([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_231_233(cell, cache)){
            return true;
        }
        if(apply_any_move_231_230(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_232_233([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_236_238([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_236_235([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_236_238(cell, cache)){
            return true;
        }
        if(apply_any_move_236_235(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_237_235([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_236_238(cell, cache)){
            return true;
        }
        if(apply_any_move_236_235(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_237_238([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_241_243([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_241_240([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_241_243(cell, cache)){
            return true;
        }
        if(apply_any_move_241_240(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_242_240([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_241_243(cell, cache)){
            return true;
        }
        if(apply_any_move_241_240(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_242_243([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_224_246(cell, cache)){
            return true;
        }
        if(apply_any_move_224_248(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_252_256([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_256_254(cell, cache)){
            return true;
        }
        if(apply_any_move_256_257(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_252_261([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_261_259(cell, cache)){
            return true;
        }
        if(apply_any_move_261_262(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_252_266([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_266_264(cell, cache)){
            return true;
        }
        if(apply_any_move_266_267(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_252_271([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_271_269(cell, cache)){
            return true;
        }
        if(apply_any_move_271_272(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_253_275([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 5;
        if(evaluate16(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_253_277([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 5;
        if(evaluate16(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_255_257([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_255_254([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_255_257(cell, cache)){
            return true;
        }
        if(apply_any_move_255_254(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_256_254([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_255_257(cell, cache)){
            return true;
        }
        if(apply_any_move_255_254(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_256_257([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_260_262([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_260_259([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_260_262(cell, cache)){
            return true;
        }
        if(apply_any_move_260_259(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_261_259([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_260_262(cell, cache)){
            return true;
        }
        if(apply_any_move_260_259(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_261_262([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_265_267([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_265_264([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_265_267(cell, cache)){
            return true;
        }
        if(apply_any_move_265_264(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_266_264([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_265_267(cell, cache)){
            return true;
        }
        if(apply_any_move_265_264(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_266_267([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_270_272([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_270_269([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_270_272(cell, cache)){
            return true;
        }
        if(apply_any_move_270_269(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_271_269([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_270_272(cell, cache)){
            return true;
        }
        if(apply_any_move_270_269(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_271_272([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_253_275(cell, cache)){
            return true;
        }
        if(apply_any_move_253_277(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_285([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_285_283(cell, cache)){
            return true;
        }
        if(apply_any_move_285_286(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_290([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_290_288(cell, cache)){
            return true;
        }
        if(apply_any_move_290_291(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_295([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_295_293(cell, cache)){
            return true;
        }
        if(apply_any_move_295_296(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_300([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_300_298(cell, cache)){
            return true;
        }
        if(apply_any_move_300_301(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_305([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_305_303(cell, cache)){
            return true;
        }
        if(apply_any_move_305_306(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_310([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_310_308(cell, cache)){
            return true;
        }
        if(apply_any_move_310_311(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_315([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_315_313(cell, cache)){
            return true;
        }
        if(apply_any_move_315_316(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_281_320([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_320_318(cell, cache)){
            return true;
        }
        if(apply_any_move_320_321(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_282_324([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 4;
        if(evaluate16(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_282_326([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 4;
        if(evaluate16(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_284_286([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_284_283([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_284_286(cell, cache)){
            return true;
        }
        if(apply_any_move_284_283(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_285_283([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_284_286(cell, cache)){
            return true;
        }
        if(apply_any_move_284_283(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_285_286([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_289_291([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_289_288([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_289_291(cell, cache)){
            return true;
        }
        if(apply_any_move_289_288(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_290_288([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_289_291(cell, cache)){
            return true;
        }
        if(apply_any_move_289_288(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_290_291([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_294_296([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_294_293([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_294_296(cell, cache)){
            return true;
        }
        if(apply_any_move_294_293(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_295_293([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_294_296(cell, cache)){
            return true;
        }
        if(apply_any_move_294_293(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_295_296([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_299_301([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_299_298([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_299_301(cell, cache)){
            return true;
        }
        if(apply_any_move_299_298(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_300_298([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_299_301(cell, cache)){
            return true;
        }
        if(apply_any_move_299_298(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_300_301([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_304_306([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_304_303([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_304_306(cell, cache)){
            return true;
        }
        if(apply_any_move_304_303(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_305_303([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_304_306(cell, cache)){
            return true;
        }
        if(apply_any_move_304_303(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_305_306([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_309_311([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_309_308([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_309_311(cell, cache)){
            return true;
        }
        if(apply_any_move_309_308(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_310_308([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_309_311(cell, cache)){
            return true;
        }
        if(apply_any_move_309_308(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_310_311([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_314_316([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_314_313([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_314_316(cell, cache)){
            return true;
        }
        if(apply_any_move_314_313(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_315_313([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_314_316(cell, cache)){
            return true;
        }
        if(apply_any_move_314_313(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_315_316([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_319_321([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_319_318([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_319_321(cell, cache)){
            return true;
        }
        if(apply_any_move_319_318(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_320_318([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_319_321(cell, cache)){
            return true;
        }
        if(apply_any_move_319_318(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_320_321([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(apply_any_move_282_324(cell, cache)){
            return true;
        }
        if(apply_any_move_282_326(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_331_333([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 2;
        if(evaluate16(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_331_335([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = 0;
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 2;
        if(evaluate16(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_339_341([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(apply_any_move_341_343(cell, cache)){
            return true;
        }
        if(apply_any_move_341_345(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_339_362([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table12[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 3;
        [[maybe_unused]] int variable_change1 = variables[3];
        variables[3] = 1;
        [[maybe_unused]] int variable_change2 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_341_343([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(apply_any_move_342_349(cell, cache)){
            return true;
        }
        if(apply_any_move_342_351(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_341_345([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table11[cell]){
            if(apply_any_move_346_347(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::apply_any_move_342_349([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                return false;
            default:
                break;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 3;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_342_351([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                break;
            default:
                return false;
        }
        if(apply_any_move_352_354(cell, cache)){
            return true;
        }
        if(apply_any_move_352_356(cell, cache)){
            return true;
        }
        if(apply_any_move_352_358(cell, cache)){
            return true;
        }
        if(apply_any_move_352_360(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_346_347([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(apply_any_move_342_349(cell, cache)){
            return true;
        }
        if(apply_any_move_342_351(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_352_354([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 5;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_352_356([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 2;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_352_358([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 0;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_352_360([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 4;
        [[maybe_unused]] int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_366_368([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 3;
        [[maybe_unused]] int variable_change3 = variables[3];
        variables[3] = 0;
        [[maybe_unused]] int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_366_370([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        [[maybe_unused]] int board_change0_cell = cell;
        [[maybe_unused]] int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change1_cell = cell;
        [[maybe_unused]] int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        [[maybe_unused]] int board_change2_cell = cell;
        [[maybe_unused]] int board_change2_piece = pieces[cell];
        pieces[cell] = 3;
        [[maybe_unused]] int variable_change3 = variables[3];
        variables[3] = 0;
        [[maybe_unused]] int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate16(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        current_player = 0;
        current_state = 373;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_373_375([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[4] >= 50){
            return false;
        }
        current_player = 0;
        current_state = 376;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_373_382([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[4] != 50){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[0];
        variables[0] = 50;
        [[maybe_unused]] int variable_change1 = variables[1];
        variables[1] = 50;
        current_player = 0;
        current_state = 383;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_374_392([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
    }

    bool game_state::apply_any_move_374_0([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 2;
        current_state = 1;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_376_378([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(evaluate17(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[0];
        variables[0] = 50;
        [[maybe_unused]] int variable_change1 = variables[1];
        variables[1] = 50;
        if(apply_any_move_374_392(cell, cache)){
            return true;
        }
        if(apply_any_move_374_0(cell, cache)){
            return true;
        }
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return false;
    }

    bool game_state::apply_any_move_376_380([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(not evaluate18(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[0];
        variables[0] = 100;
        [[maybe_unused]] int variable_change1 = variables[1];
        variables[1] = 0;
        if(apply_any_move_374_392(cell, cache)){
            return true;
        }
        if(apply_any_move_374_0(cell, cache)){
            return true;
        }
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return false;
    }

    bool game_state::apply_any_move_383_385([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(evaluate19(cell, cache)){
            return false;
        }
        current_player = 0;
        current_state = 386;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_383_388([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(not evaluate20(cell, cache)){
            return false;
        }
        if(evaluate25(cell, cache)){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[0];
        variables[0] = 100;
        [[maybe_unused]] int variable_change1 = variables[1];
        variables[1] = 0;
        current_player = 0;
        current_state = 389;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_386_387([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
        if(apply_any_move_374_392(cell, cache)){
            return true;
        }
        if(apply_any_move_374_0(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_389_390([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
        if(apply_any_move_374_392(cell, cache)){
            return true;
        }
        if(apply_any_move_374_0(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::apply_any_move_391_0([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return false;
        }
        [[maybe_unused]] int variable_change0 = variables[4];
        variables[4] = (variables[4])+(1);
        current_player = 2;
        current_state = 1;
        current_cell = cell;
        return true;
    }

    bool game_state::apply_any_move_391_392([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        return false;
    }

    void game_state::get_all_moves_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(1,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(2,cell);
        moves.emplace_back(mr, cell, 1);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_1_3([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[3];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(3,cell);
        variables[3] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 4);
            mr.resize(previous_changes_list);
            variables[3] = variable_change0;
            return;
        }
        for(int el=1;el<65;++el){
            get_all_moves_5_7(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_27(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_56(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_85(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_134(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_143(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        variables[3] = variable_change0;
        return;
    }

    void game_state::get_all_moves_1_170([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[3] != 1){
            return;
        }
        get_all_moves_171_173(cell, cache, mr, moves, move_length_limit);
        get_all_moves_171_175(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_2_178([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[3];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(3,cell);
        variables[3] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 4);
            mr.resize(previous_changes_list);
            variables[3] = variable_change0;
            return;
        }
        for(int el=1;el<65;++el){
            get_all_moves_5_7(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_27(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_56(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_85(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_134(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_143(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        variables[3] = variable_change0;
        return;
    }

    void game_state::get_all_moves_4_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(int el=1;el<65;++el){
            get_all_moves_5_7(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_27(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_56(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_85(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_134(el, cache, mr, moves, move_length_limit);
            get_all_moves_5_143(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_5_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(9,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 8);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_8_10(cell, cache, mr, moves, move_length_limit);
        get_all_moves_8_18(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_5_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(52,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 28);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_28_32(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_37(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_42(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_47(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_5_56([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(78,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 57);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_57_61(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_66(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_71(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_76(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_5_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 12:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(96,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 86);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_86_90(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_95(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_100(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_105(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_110(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_115(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_120(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_125(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_5_134([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(134,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 135);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        for(const auto el: shift_table1[cell]){
            get_all_moves_136_138(el, cache, mr, moves, move_length_limit);
            get_all_moves_136_140(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_5_143([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(152,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 144);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_144_146(cell, cache, mr, moves, move_length_limit);
        get_all_moves_144_167(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_6_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_7_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(9,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 8);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_8_10(cell, cache, mr, moves, move_length_limit);
        get_all_moves_8_18(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table0[cell]){
            get_all_moves_11_13(el, cache, mr, moves, move_length_limit);
            get_all_moves_11_15(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_8_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[5] != 0){
            return;
        }
        if(evaluate0(cell, cache)){
            return;
        }
        get_all_moves_19_21(cell, cache, mr, moves, move_length_limit);
        get_all_moves_19_23(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_9_26([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[5];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change0;
        return;
    }

    void game_state::get_all_moves_10_11([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table0[cell]){
            get_all_moves_11_13(el, cache, mr, moves, move_length_limit);
            get_all_moves_11_15(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_11_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(20,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 16);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 12);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        int variable_change2 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_12_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_13_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_15_16([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(20,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 16);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 12);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        int variable_change2 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_16_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(21,cell);
        pieces[cell] = 9;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 17);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_17_9([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[5];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change0;
        return;
    }

    void game_state::get_all_moves_18_19([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[5] != 0){
            return;
        }
        if(evaluate0(cell, cache)){
            return;
        }
        get_all_moves_19_21(cell, cache, mr, moves, move_length_limit);
        get_all_moves_19_23(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_19_21([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate1(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(29,cell);
        pieces[cell] = 9;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(32,cell);
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 22);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 20);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_19_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate2(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(40,cell);
        pieces[cell] = 9;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(45,cell);
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 24);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 20);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_20_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_21_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate1(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(29,cell);
        pieces[cell] = 9;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(32,cell);
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 22);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 20);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_23_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate2(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(40,cell);
        pieces[cell] = 9;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(45,cell);
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 24);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 20);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_24_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(49,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 25);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 9);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[5];
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_25_9([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[5];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(50,cell);
        variables[5] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 26);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[5] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[5] = variable_change0;
        return;
    }

    void game_state::get_all_moves_26_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_27_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(52,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 28);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_28_32(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_37(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_42(cell, cache, mr, moves, move_length_limit);
        get_all_moves_28_47(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_28_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_32_30(cell, cache, mr, moves, move_length_limit);
        get_all_moves_32_33(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_28_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_37_35(cell, cache, mr, moves, move_length_limit);
        get_all_moves_37_38(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_28_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_42_40(cell, cache, mr, moves, move_length_limit);
        get_all_moves_42_43(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_28_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_47_45(cell, cache, mr, moves, move_length_limit);
        get_all_moves_47_48(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_29_51([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_29_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(75,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 54);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 50);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_30_31([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_31_33(cell, cache, mr, moves, move_length_limit);
        get_all_moves_31_30(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_31_33(cell, cache, mr, moves, move_length_limit);
        get_all_moves_31_30(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_31_33(cell, cache, mr, moves, move_length_limit);
        get_all_moves_31_30(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_33_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_34_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_35_36([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_36_38(cell, cache, mr, moves, move_length_limit);
        get_all_moves_36_35(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_36_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_36_38(cell, cache, mr, moves, move_length_limit);
        get_all_moves_36_35(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_37_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_36_38(cell, cache, mr, moves, move_length_limit);
        get_all_moves_36_35(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_37_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_38_39([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_39_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_40_41([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_41_43(cell, cache, mr, moves, move_length_limit);
        get_all_moves_41_40(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_41_43(cell, cache, mr, moves, move_length_limit);
        get_all_moves_41_40(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_41_43(cell, cache, mr, moves, move_length_limit);
        get_all_moves_41_40(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_43_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_44_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_45_46([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_46_48(cell, cache, mr, moves, move_length_limit);
        get_all_moves_46_45(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_46_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_46_48(cell, cache, mr, moves, move_length_limit);
        get_all_moves_46_45(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_47_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_46_48(cell, cache, mr, moves, move_length_limit);
        get_all_moves_46_45(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_47_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_48_49([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_49_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_29_51(cell, cache, mr, moves, move_length_limit);
        get_all_moves_29_53(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_50_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_51_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_53_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(75,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 54);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 50);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_54_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(76,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 55);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_55_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_56_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(78,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 57);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_57_61(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_66(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_71(cell, cache, mr, moves, move_length_limit);
        get_all_moves_57_76(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_57_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_61_59(cell, cache, mr, moves, move_length_limit);
        get_all_moves_61_62(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_57_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_66_64(cell, cache, mr, moves, move_length_limit);
        get_all_moves_66_67(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_57_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_71_69(cell, cache, mr, moves, move_length_limit);
        get_all_moves_71_72(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_57_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_76_74(cell, cache, mr, moves, move_length_limit);
        get_all_moves_76_77(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_58_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_58_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(93,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 83);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 79);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_59_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_60_62(cell, cache, mr, moves, move_length_limit);
        get_all_moves_60_59(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_60_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_60_59([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_60_62(cell, cache, mr, moves, move_length_limit);
        get_all_moves_60_59(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_61_59([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_60_62(cell, cache, mr, moves, move_length_limit);
        get_all_moves_60_59(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_61_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_63_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_65_67(cell, cache, mr, moves, move_length_limit);
        get_all_moves_65_64(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_65_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_65_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_65_67(cell, cache, mr, moves, move_length_limit);
        get_all_moves_65_64(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_66_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_65_67(cell, cache, mr, moves, move_length_limit);
        get_all_moves_65_64(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_66_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_67_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_68_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_69_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_70_72(cell, cache, mr, moves, move_length_limit);
        get_all_moves_70_69(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_70_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_70_69([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_70_72(cell, cache, mr, moves, move_length_limit);
        get_all_moves_70_69(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_71_69([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_70_72(cell, cache, mr, moves, move_length_limit);
        get_all_moves_70_69(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_71_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_73_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_75_77(cell, cache, mr, moves, move_length_limit);
        get_all_moves_75_74(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_75_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_75_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_75_77(cell, cache, mr, moves, move_length_limit);
        get_all_moves_75_74(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_76_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_75_77(cell, cache, mr, moves, move_length_limit);
        get_all_moves_75_74(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_76_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_77_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_78_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_58_80(cell, cache, mr, moves, move_length_limit);
        get_all_moves_58_82(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_79_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_80_81([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_81_79([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(93,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 83);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 79);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_83_79([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(94,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 84);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_84_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_85_86([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 12:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(96,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 86);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_86_90(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_95(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_100(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_105(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_110(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_115(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_120(cell, cache, mr, moves, move_length_limit);
        get_all_moves_86_125(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_86_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_90_88(cell, cache, mr, moves, move_length_limit);
        get_all_moves_90_91(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_95_93(cell, cache, mr, moves, move_length_limit);
        get_all_moves_95_96(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_100_98(cell, cache, mr, moves, move_length_limit);
        get_all_moves_100_101(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_105_103(cell, cache, mr, moves, move_length_limit);
        get_all_moves_105_106(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_110_108(cell, cache, mr, moves, move_length_limit);
        get_all_moves_110_111(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_115_113(cell, cache, mr, moves, move_length_limit);
        get_all_moves_115_116(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_120_118(cell, cache, mr, moves, move_length_limit);
        get_all_moves_120_121(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_86_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_125_123(cell, cache, mr, moves, move_length_limit);
        get_all_moves_125_126(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_87_129([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_87_131([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(131,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 132);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 128);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_88_89([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_89_91(cell, cache, mr, moves, move_length_limit);
        get_all_moves_89_88(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_89_91([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_89_88([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_89_91(cell, cache, mr, moves, move_length_limit);
        get_all_moves_89_88(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_90_88([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_89_91(cell, cache, mr, moves, move_length_limit);
        get_all_moves_89_88(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_90_91([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_91_92([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_92_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_93_94([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_94_96(cell, cache, mr, moves, move_length_limit);
        get_all_moves_94_93(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_94_96([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_94_93([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_94_96(cell, cache, mr, moves, move_length_limit);
        get_all_moves_94_93(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_95_93([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_94_96(cell, cache, mr, moves, move_length_limit);
        get_all_moves_94_93(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_95_96([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_96_97([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_97_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_98_99([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_99_101(cell, cache, mr, moves, move_length_limit);
        get_all_moves_99_98(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_99_101([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_99_98([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_99_101(cell, cache, mr, moves, move_length_limit);
        get_all_moves_99_98(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_100_98([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_99_101(cell, cache, mr, moves, move_length_limit);
        get_all_moves_99_98(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_100_101([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_101_102([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_102_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_103_104([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_104_106(cell, cache, mr, moves, move_length_limit);
        get_all_moves_104_103(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_104_106([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_104_103([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_104_106(cell, cache, mr, moves, move_length_limit);
        get_all_moves_104_103(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_105_103([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_104_106(cell, cache, mr, moves, move_length_limit);
        get_all_moves_104_103(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_105_106([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_106_107([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_107_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_108_109([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_109_111(cell, cache, mr, moves, move_length_limit);
        get_all_moves_109_108(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_109_111([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_109_108([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_109_111(cell, cache, mr, moves, move_length_limit);
        get_all_moves_109_108(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_110_108([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_109_111(cell, cache, mr, moves, move_length_limit);
        get_all_moves_109_108(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_110_111([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_111_112([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_112_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_113_114([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_114_116(cell, cache, mr, moves, move_length_limit);
        get_all_moves_114_113(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_114_116([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_114_113([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_114_116(cell, cache, mr, moves, move_length_limit);
        get_all_moves_114_113(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_115_113([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_114_116(cell, cache, mr, moves, move_length_limit);
        get_all_moves_114_113(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_115_116([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_116_117([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_117_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_118_119([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_119_121(cell, cache, mr, moves, move_length_limit);
        get_all_moves_119_118(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_119_121([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_119_118([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_119_121(cell, cache, mr, moves, move_length_limit);
        get_all_moves_119_118(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_120_118([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_119_121(cell, cache, mr, moves, move_length_limit);
        get_all_moves_119_118(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_120_121([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_121_122([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_122_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_123_124([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_124_126(cell, cache, mr, moves, move_length_limit);
        get_all_moves_124_123(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_124_126([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_124_123([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_124_126(cell, cache, mr, moves, move_length_limit);
        get_all_moves_124_123(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_125_123([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_124_126(cell, cache, mr, moves, move_length_limit);
        get_all_moves_124_123(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_125_126([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_126_127([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_127_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_87_129(cell, cache, mr, moves, move_length_limit);
        get_all_moves_87_131(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_128_133([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_129_130([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_130_128([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_131_132([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(131,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 132);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 128);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_132_128([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(132,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 133);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_133_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_134_135([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(134,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 135);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        for(const auto el: shift_table1[cell]){
            get_all_moves_136_138(el, cache, mr, moves, move_length_limit);
            get_all_moves_136_140(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_135_136([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table1[cell]){
            get_all_moves_136_138(el, cache, mr, moves, move_length_limit);
            get_all_moves_136_140(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_136_138([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_136_140([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(149,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 141);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 137);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_137_142([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_138_139([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_139_137([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_140_141([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(149,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 141);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 137);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_141_137([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(150,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 142);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_142_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_143_144([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(152,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 144);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_144_146(cell, cache, mr, moves, move_length_limit);
        get_all_moves_144_167(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_144_146([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_146_148(cell, cache, mr, moves, move_length_limit);
        get_all_moves_146_150(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_144_167([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table9[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(171,cell);
        pieces[cell] = 11;
        int variable_change1 = variables[3];
        mr.emplace_back(172,cell);
        variables[3] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 168);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_145_169([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_146_148([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_147_154(cell, cache, mr, moves, move_length_limit);
        get_all_moves_147_156(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_146_150([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table8[cell]){
            get_all_moves_151_152(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_147_154([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(160,cell);
        pieces[cell] = 11;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 155);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_147_156([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            default:
                return;
        }
        get_all_moves_157_159(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_161(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_163(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_165(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_148_149([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_147_154(cell, cache, mr, moves, move_length_limit);
        get_all_moves_147_156(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_149_147([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_147_154(cell, cache, mr, moves, move_length_limit);
        get_all_moves_147_156(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_150_151([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table8[cell]){
            get_all_moves_151_152(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_151_152([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return;
        }
        get_all_moves_147_154(cell, cache, mr, moves, move_length_limit);
        get_all_moves_147_156(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_152_147([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_147_154(cell, cache, mr, moves, move_length_limit);
        get_all_moves_147_156(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_153_145([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_154_155([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(160,cell);
        pieces[cell] = 11;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 155);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_155_153([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_156_157([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            default:
                return;
        }
        get_all_moves_157_159(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_161(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_163(cell, cache, mr, moves, move_length_limit);
        get_all_moves_157_165(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_157_159([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(162,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 160);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_157_161([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(163,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 162);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_157_163([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(164,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 164);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_157_165([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(165,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 166);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_158_153([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_159_160([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(162,cell);
        pieces[cell] = 13;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 160);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_160_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_161_162([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(163,cell);
        pieces[cell] = 10;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 162);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_162_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_163_164([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(164,cell);
        pieces[cell] = 8;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 164);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_164_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_165_166([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(165,cell);
        pieces[cell] = 12;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 166);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 158);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 153);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_166_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_167_168([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table9[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(171,cell);
        pieces[cell] = 11;
        int variable_change1 = variables[3];
        mr.emplace_back(172,cell);
        variables[3] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 168);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 145);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_168_145([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(173,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 169);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 6);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_169_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_170_171([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[3] != 1){
            return;
        }
        get_all_moves_171_173(cell, cache, mr, moves, move_length_limit);
        get_all_moves_171_175(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_171_173([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(177,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 174);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 172);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_171_175([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(181,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 176);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 172);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_172_177([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change2 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_173_174([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(177,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 174);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 172);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_174_172([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change2 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_175_176([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(181,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 176);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 172);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_176_172([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(183,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(185,cell);
        pieces[cell] = 11;
        int variable_change2 = variables[3];
        mr.emplace_back(186,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(187,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 177);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 2);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate3(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_177_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate3(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(189,cell);
        moves.emplace_back(mr, cell, 178);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_178_180([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] >= 50){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(191,cell);
        moves.emplace_back(mr, cell, 181);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_178_187([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] != 50){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(199,cell);
        variables[1] = 50;
        int variable_change1 = variables[0];
        mr.emplace_back(200,cell);
        variables[0] = 50;
        mr.emplace_back(201,cell);
        moves.emplace_back(mr, cell, 188);
        mr.resize(previous_changes_list);
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_179_196([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_180_181([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] >= 50){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(191,cell);
        moves.emplace_back(mr, cell, 181);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_181_183([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate4(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(193,cell);
        variables[1] = 50;
        int variable_change1 = variables[0];
        mr.emplace_back(194,cell);
        variables[0] = 50;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 184);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 182);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 179);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_181_185([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate5(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(196,cell);
        variables[1] = 100;
        int variable_change1 = variables[0];
        mr.emplace_back(197,cell);
        variables[0] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 186);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 182);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 179);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_182_179([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_183_184([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate4(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(193,cell);
        variables[1] = 50;
        int variable_change1 = variables[0];
        mr.emplace_back(194,cell);
        variables[0] = 50;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 184);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 182);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 179);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_184_182([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_185_186([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate5(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(196,cell);
        variables[1] = 100;
        int variable_change1 = variables[0];
        mr.emplace_back(197,cell);
        variables[0] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 186);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 182);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 179);
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            mr.resize(previous_changes_list);
            variables[0] = variable_change1;
            variables[1] = variable_change0;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_186_182([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_187_188([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] != 50){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(199,cell);
        variables[1] = 50;
        int variable_change1 = variables[0];
        mr.emplace_back(200,cell);
        variables[0] = 50;
        mr.emplace_back(201,cell);
        moves.emplace_back(mr, cell, 188);
        mr.resize(previous_changes_list);
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_188_190([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate6(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(203,cell);
        moves.emplace_back(mr, cell, 191);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_188_193([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate7(cell, cache)){
            return;
        }
        if(evaluate12(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(207,cell);
        variables[1] = 100;
        int variable_change1 = variables[0];
        mr.emplace_back(208,cell);
        variables[0] = 0;
        mr.emplace_back(209,cell);
        moves.emplace_back(mr, cell, 194);
        mr.resize(previous_changes_list);
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_189_179([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_190_191([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate6(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(203,cell);
        moves.emplace_back(mr, cell, 191);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_191_192([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_192_189([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_193_194([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate7(cell, cache)){
            return;
        }
        if(evaluate12(cell, cache)){
            return;
        }
        int variable_change0 = variables[1];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(207,cell);
        variables[1] = 100;
        int variable_change1 = variables[0];
        mr.emplace_back(208,cell);
        variables[0] = 0;
        mr.emplace_back(209,cell);
        moves.emplace_back(mr, cell, 194);
        mr.resize(previous_changes_list);
        variables[0] = variable_change1;
        variables[1] = variable_change0;
        return;
    }

    void game_state::get_all_moves_194_195([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_195_189([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(211,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(212,cell);
        moves.emplace_back(mr, cell, 196);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_196_198([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[3];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(213,cell);
        variables[3] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 199);
            mr.resize(previous_changes_list);
            variables[3] = variable_change0;
            return;
        }
        for(int el=1;el<65;++el){
            get_all_moves_200_202(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_222(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_251(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_280(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_329(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_338(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        variables[3] = variable_change0;
        return;
    }

    void game_state::get_all_moves_196_365([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[3] != 1){
            return;
        }
        get_all_moves_366_368(cell, cache, mr, moves, move_length_limit);
        get_all_moves_366_370(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_197_373([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_198_199([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[3];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(213,cell);
        variables[3] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 199);
            mr.resize(previous_changes_list);
            variables[3] = variable_change0;
            return;
        }
        for(int el=1;el<65;++el){
            get_all_moves_200_202(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_222(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_251(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_280(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_329(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_338(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        variables[3] = variable_change0;
        return;
    }

    void game_state::get_all_moves_199_200([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(int el=1;el<65;++el){
            get_all_moves_200_202(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_222(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_251(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_280(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_329(el, cache, mr, moves, move_length_limit);
            get_all_moves_200_338(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_200_202([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(219,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 203);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_203_205(cell, cache, mr, moves, move_length_limit);
        get_all_moves_203_213(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_200_222([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(262,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 223);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_223_227(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_232(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_237(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_242(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_200_251([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(288,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 252);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_252_256(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_261(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_266(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_271(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_200_280([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 4:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(306,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 281);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_281_285(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_290(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_295(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_300(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_305(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_310(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_315(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_320(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_200_329([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(344,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 330);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        for(const auto el: shift_table1[cell]){
            get_all_moves_331_333(el, cache, mr, moves, move_length_limit);
            get_all_moves_331_335(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_200_338([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(362,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 339);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_339_341(cell, cache, mr, moves, move_length_limit);
        get_all_moves_339_362(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_201_197([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_202_203([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(219,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 203);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_203_205(cell, cache, mr, moves, move_length_limit);
        get_all_moves_203_213(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_203_205([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table0[cell]){
            get_all_moves_206_208(el, cache, mr, moves, move_length_limit);
            get_all_moves_206_210(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_203_213([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[2] != 0){
            return;
        }
        if(evaluate13(cell, cache)){
            return;
        }
        get_all_moves_214_216(cell, cache, mr, moves, move_length_limit);
        get_all_moves_214_218(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_204_221([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[2];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change0;
        return;
    }

    void game_state::get_all_moves_205_206([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table0[cell]){
            get_all_moves_206_208(el, cache, mr, moves, move_length_limit);
            get_all_moves_206_210(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_206_208([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_206_210([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(230,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 211);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 207);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        int variable_change2 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_207_212([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_208_209([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_209_207([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_210_211([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(230,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 211);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 207);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        int variable_change2 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_211_207([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(231,cell);
        pieces[cell] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 212);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_212_204([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[2];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change0;
        return;
    }

    void game_state::get_all_moves_213_214([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[2] != 0){
            return;
        }
        if(evaluate13(cell, cache)){
            return;
        }
        get_all_moves_214_216(cell, cache, mr, moves, move_length_limit);
        get_all_moves_214_218(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_214_216([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate14(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(239,cell);
        pieces[cell] = 1;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(242,cell);
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 217);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 215);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_214_218([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate15(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(250,cell);
        pieces[cell] = 1;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(255,cell);
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 219);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 215);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_215_220([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_216_217([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate14(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(239,cell);
        pieces[cell] = 1;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(242,cell);
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 217);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 215);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_217_215([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_218_219([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        if(evaluate15(cell, cache)){
            return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(250,cell);
        pieces[cell] = 1;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                mr.resize(previous_changes_list);
                pieces[board_change0_cell] = board_change0_piece;
                return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(255,cell);
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 219);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 215);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change3 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_219_215([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(259,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 220);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 204);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[2];
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_220_204([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[2];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(260,cell);
        variables[2] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 221);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[2] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[2] = variable_change0;
        return;
    }

    void game_state::get_all_moves_221_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_222_223([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 0:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(262,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 223);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_223_227(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_232(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_237(cell, cache, mr, moves, move_length_limit);
        get_all_moves_223_242(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_223_227([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_227_225(cell, cache, mr, moves, move_length_limit);
        get_all_moves_227_228(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_223_232([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_232_230(cell, cache, mr, moves, move_length_limit);
        get_all_moves_232_233(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_223_237([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_237_235(cell, cache, mr, moves, move_length_limit);
        get_all_moves_237_238(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_223_242([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_242_240(cell, cache, mr, moves, move_length_limit);
        get_all_moves_242_243(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_224_246([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_224_248([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(285,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 249);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 245);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_225_226([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_226_228(cell, cache, mr, moves, move_length_limit);
        get_all_moves_226_225(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_226_228([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_226_225([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_226_228(cell, cache, mr, moves, move_length_limit);
        get_all_moves_226_225(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_227_225([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_226_228(cell, cache, mr, moves, move_length_limit);
        get_all_moves_226_225(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_227_228([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_228_229([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_229_224([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_230_231([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_231_233(cell, cache, mr, moves, move_length_limit);
        get_all_moves_231_230(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_231_233([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_231_230([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_231_233(cell, cache, mr, moves, move_length_limit);
        get_all_moves_231_230(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_232_230([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_231_233(cell, cache, mr, moves, move_length_limit);
        get_all_moves_231_230(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_232_233([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_233_234([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_234_224([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_235_236([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_236_238(cell, cache, mr, moves, move_length_limit);
        get_all_moves_236_235(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_236_238([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_236_235([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_236_238(cell, cache, mr, moves, move_length_limit);
        get_all_moves_236_235(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_237_235([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_236_238(cell, cache, mr, moves, move_length_limit);
        get_all_moves_236_235(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_237_238([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_238_239([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_239_224([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_240_241([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_241_243(cell, cache, mr, moves, move_length_limit);
        get_all_moves_241_240(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_241_243([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_241_240([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_241_243(cell, cache, mr, moves, move_length_limit);
        get_all_moves_241_240(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_242_240([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_241_243(cell, cache, mr, moves, move_length_limit);
        get_all_moves_241_240(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_242_243([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_243_244([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_244_224([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_224_246(cell, cache, mr, moves, move_length_limit);
        get_all_moves_224_248(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_245_250([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_246_247([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_247_245([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_248_249([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(285,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 249);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 245);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_249_245([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(286,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 250);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_250_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_251_252([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 5:
            case 6:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(288,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 252);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_252_256(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_261(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_266(cell, cache, mr, moves, move_length_limit);
        get_all_moves_252_271(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_252_256([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_256_254(cell, cache, mr, moves, move_length_limit);
        get_all_moves_256_257(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_252_261([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_261_259(cell, cache, mr, moves, move_length_limit);
        get_all_moves_261_262(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_252_266([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_266_264(cell, cache, mr, moves, move_length_limit);
        get_all_moves_266_267(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_252_271([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_271_269(cell, cache, mr, moves, move_length_limit);
        get_all_moves_271_272(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_253_275([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_253_277([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(303,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 278);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 274);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_254_255([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_255_257(cell, cache, mr, moves, move_length_limit);
        get_all_moves_255_254(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_255_257([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_255_254([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_255_257(cell, cache, mr, moves, move_length_limit);
        get_all_moves_255_254(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_256_254([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_255_257(cell, cache, mr, moves, move_length_limit);
        get_all_moves_255_254(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_256_257([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_257_258([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_258_253([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_259_260([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_260_262(cell, cache, mr, moves, move_length_limit);
        get_all_moves_260_259(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_260_262([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_260_259([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_260_262(cell, cache, mr, moves, move_length_limit);
        get_all_moves_260_259(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_261_259([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_260_262(cell, cache, mr, moves, move_length_limit);
        get_all_moves_260_259(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_261_262([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_262_263([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_263_253([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_264_265([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_265_267(cell, cache, mr, moves, move_length_limit);
        get_all_moves_265_264(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_265_267([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_265_264([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_265_267(cell, cache, mr, moves, move_length_limit);
        get_all_moves_265_264(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_266_264([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_265_267(cell, cache, mr, moves, move_length_limit);
        get_all_moves_265_264(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_266_267([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_267_268([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_268_253([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_269_270([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_270_272(cell, cache, mr, moves, move_length_limit);
        get_all_moves_270_269(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_270_272([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_270_269([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_270_272(cell, cache, mr, moves, move_length_limit);
        get_all_moves_270_269(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_271_269([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_270_272(cell, cache, mr, moves, move_length_limit);
        get_all_moves_270_269(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_271_272([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_272_273([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_273_253([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_253_275(cell, cache, mr, moves, move_length_limit);
        get_all_moves_253_277(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_274_279([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_275_276([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_276_274([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_277_278([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(303,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 278);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 274);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_278_274([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(304,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 279);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_279_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_280_281([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 4:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(306,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 281);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_281_285(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_290(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_295(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_300(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_305(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_310(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_315(cell, cache, mr, moves, move_length_limit);
        get_all_moves_281_320(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_281_285([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_285_283(cell, cache, mr, moves, move_length_limit);
        get_all_moves_285_286(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_290([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_290_288(cell, cache, mr, moves, move_length_limit);
        get_all_moves_290_291(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_295([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_295_293(cell, cache, mr, moves, move_length_limit);
        get_all_moves_295_296(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_300([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_300_298(cell, cache, mr, moves, move_length_limit);
        get_all_moves_300_301(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_305([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_305_303(cell, cache, mr, moves, move_length_limit);
        get_all_moves_305_306(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_310([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_310_308(cell, cache, mr, moves, move_length_limit);
        get_all_moves_310_311(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_315([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_315_313(cell, cache, mr, moves, move_length_limit);
        get_all_moves_315_316(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_281_320([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_320_318(cell, cache, mr, moves, move_length_limit);
        get_all_moves_320_321(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_282_324([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_282_326([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(341,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 327);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 323);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_283_284([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_284_286(cell, cache, mr, moves, move_length_limit);
        get_all_moves_284_283(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_284_286([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_284_283([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_284_286(cell, cache, mr, moves, move_length_limit);
        get_all_moves_284_283(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_285_283([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_284_286(cell, cache, mr, moves, move_length_limit);
        get_all_moves_284_283(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_285_286([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_286_287([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table2[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_287_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_288_289([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_289_291(cell, cache, mr, moves, move_length_limit);
        get_all_moves_289_288(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_289_291([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_289_288([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_289_291(cell, cache, mr, moves, move_length_limit);
        get_all_moves_289_288(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_290_288([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_289_291(cell, cache, mr, moves, move_length_limit);
        get_all_moves_289_288(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_290_291([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_291_292([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table3[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_292_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_293_294([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_294_296(cell, cache, mr, moves, move_length_limit);
        get_all_moves_294_293(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_294_296([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_294_293([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_294_296(cell, cache, mr, moves, move_length_limit);
        get_all_moves_294_293(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_295_293([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_294_296(cell, cache, mr, moves, move_length_limit);
        get_all_moves_294_293(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_295_296([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_296_297([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table4[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_297_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_298_299([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_299_301(cell, cache, mr, moves, move_length_limit);
        get_all_moves_299_298(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_299_301([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_299_298([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_299_301(cell, cache, mr, moves, move_length_limit);
        get_all_moves_299_298(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_300_298([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_299_301(cell, cache, mr, moves, move_length_limit);
        get_all_moves_299_298(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_300_301([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_301_302([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table5[cell];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_302_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_303_304([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_304_306(cell, cache, mr, moves, move_length_limit);
        get_all_moves_304_303(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_304_306([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_304_303([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_304_306(cell, cache, mr, moves, move_length_limit);
        get_all_moves_304_303(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_305_303([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_304_306(cell, cache, mr, moves, move_length_limit);
        get_all_moves_304_303(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_305_306([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_306_307([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_307_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_308_309([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_309_311(cell, cache, mr, moves, move_length_limit);
        get_all_moves_309_308(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_309_311([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_309_308([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_309_311(cell, cache, mr, moves, move_length_limit);
        get_all_moves_309_308(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_310_308([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_309_311(cell, cache, mr, moves, move_length_limit);
        get_all_moves_309_308(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_310_311([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_311_312([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_312_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_313_314([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_314_316(cell, cache, mr, moves, move_length_limit);
        get_all_moves_314_313(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_314_316([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_314_313([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_314_316(cell, cache, mr, moves, move_length_limit);
        get_all_moves_314_313(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_315_313([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_314_316(cell, cache, mr, moves, move_length_limit);
        get_all_moves_314_313(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_315_316([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_316_317([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_317_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_318_319([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_319_321(cell, cache, mr, moves, move_length_limit);
        get_all_moves_319_318(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_319_321([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_319_318([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_319_321(cell, cache, mr, moves, move_length_limit);
        get_all_moves_319_318(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_320_318([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_319_321(cell, cache, mr, moves, move_length_limit);
        get_all_moves_319_318(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_320_321([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_321_322([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return;
        }
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_322_282([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_282_324(cell, cache, mr, moves, move_length_limit);
        get_all_moves_282_326(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_323_328([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_324_325([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_325_323([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_326_327([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(341,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 327);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 323);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_327_323([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(342,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 328);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_328_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_329_330([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(344,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 330);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        for(const auto el: shift_table1[cell]){
            get_all_moves_331_333(el, cache, mr, moves, move_length_limit);
            get_all_moves_331_335(el, cache, mr, moves, move_length_limit);
        }
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_330_331([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table1[cell]){
            get_all_moves_331_333(el, cache, mr, moves, move_length_limit);
            get_all_moves_331_335(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_331_333([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_331_335([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(359,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 336);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 332);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_332_337([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_333_334([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_334_332([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_335_336([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(359,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 336);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 332);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_336_332([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(360,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 337);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_337_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_338_339([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(362,cell);
        pieces[cell] = 7;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 339);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        get_all_moves_339_341(cell, cache, mr, moves, move_length_limit);
        get_all_moves_339_362(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_339_341([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_341_343(cell, cache, mr, moves, move_length_limit);
        get_all_moves_341_345(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_339_362([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table12[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(381,cell);
        pieces[cell] = 3;
        int variable_change1 = variables[3];
        mr.emplace_back(382,cell);
        variables[3] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 363);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_340_364([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_341_343([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_342_349(cell, cache, mr, moves, move_length_limit);
        get_all_moves_342_351(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_341_345([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table11[cell]){
            get_all_moves_346_347(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_342_349([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                return;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(370,cell);
        pieces[cell] = 3;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 350);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_342_351([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                break;
            default:
                return;
        }
        get_all_moves_352_354(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_356(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_358(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_360(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_343_344([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        get_all_moves_342_349(cell, cache, mr, moves, move_length_limit);
        get_all_moves_342_351(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_344_342([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_342_349(cell, cache, mr, moves, move_length_limit);
        get_all_moves_342_351(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_345_346([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        for(const auto el: shift_table11[cell]){
            get_all_moves_346_347(el, cache, mr, moves, move_length_limit);
        }
        return;
    }

    void game_state::get_all_moves_346_347([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return;
        }
        get_all_moves_342_349(cell, cache, mr, moves, move_length_limit);
        get_all_moves_342_351(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_347_342([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_342_349(cell, cache, mr, moves, move_length_limit);
        get_all_moves_342_351(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_348_340([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_349_350([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                return;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(370,cell);
        pieces[cell] = 3;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 350);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_350_348([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_351_352([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                break;
            default:
                return;
        }
        get_all_moves_352_354(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_356(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_358(cell, cache, mr, moves, move_length_limit);
        get_all_moves_352_360(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_352_354([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(372,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 355);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_352_356([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(373,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 357);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_352_358([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(374,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 359);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_352_360([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(375,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 361);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_353_348([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_354_355([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(372,cell);
        pieces[cell] = 5;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 355);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_355_353([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_356_357([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(373,cell);
        pieces[cell] = 2;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 357);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_357_353([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_358_359([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(374,cell);
        pieces[cell] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 359);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_359_353([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_360_361([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(375,cell);
        pieces[cell] = 4;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 361);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 353);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 348);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change1 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_361_353([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_362_363([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = shift_table12[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(381,cell);
        pieces[cell] = 3;
        int variable_change1 = variables[3];
        mr.emplace_back(382,cell);
        variables[3] = 1;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 363);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 340);
            mr.resize(previous_changes_list);
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int variable_change2 = variables[4];
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_363_340([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(383,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 364);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 201);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change0;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_364_201([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_365_366([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[3] != 1){
            return;
        }
        get_all_moves_366_368(cell, cache, mr, moves, move_length_limit);
        get_all_moves_366_370(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_366_368([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(387,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 369);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 367);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_366_370([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(391,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 371);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 367);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_367_372([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change2 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_368_369([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(387,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 369);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 367);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_369_367([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change2 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_370_371([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(391,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 371);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 367);
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change4 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_371_367([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(393,cell);
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            mr.resize(previous_changes_list);
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        mr.emplace_back(395,cell);
        pieces[cell] = 3;
        int variable_change2 = variables[3];
        mr.emplace_back(396,cell);
        variables[3] = 0;
        int variable_change3 = variables[4];
        mr.emplace_back(397,cell);
        variables[4] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 372);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 197);
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        if(evaluate16(cell, cache)){
            mr.resize(previous_changes_list);
            variables[4] = variable_change3;
            variables[3] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return;
        }
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        variables[4] = variable_change3;
        variables[3] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return;
    }

    void game_state::get_all_moves_372_197([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate16(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(399,cell);
        moves.emplace_back(mr, cell, 373);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_373_375([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] >= 50){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(401,cell);
        moves.emplace_back(mr, cell, 376);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_373_382([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] != 50){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(409,cell);
        variables[0] = 50;
        int variable_change1 = variables[1];
        mr.emplace_back(410,cell);
        variables[1] = 50;
        mr.emplace_back(411,cell);
        moves.emplace_back(mr, cell, 383);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_374_392([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
    }

    void game_state::get_all_moves_374_0([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(1,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(2,cell);
        moves.emplace_back(mr, cell, 1);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_375_376([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] >= 50){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(401,cell);
        moves.emplace_back(mr, cell, 376);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_376_378([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate17(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(403,cell);
        variables[0] = 50;
        int variable_change1 = variables[1];
        mr.emplace_back(404,cell);
        variables[1] = 50;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 379);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 377);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 374);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_376_380([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate18(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(406,cell);
        variables[0] = 100;
        int variable_change1 = variables[1];
        mr.emplace_back(407,cell);
        variables[1] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 381);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 377);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 374);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_377_374([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_378_379([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate17(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(403,cell);
        variables[0] = 50;
        int variable_change1 = variables[1];
        mr.emplace_back(404,cell);
        variables[1] = 50;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 379);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 377);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 374);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_379_377([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_380_381([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate18(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(406,cell);
        variables[0] = 100;
        int variable_change1 = variables[1];
        mr.emplace_back(407,cell);
        variables[1] = 0;
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 381);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 377);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        if(mr.size()>=move_length_limit){
            moves.emplace_back(mr, cell, 374);
            mr.resize(previous_changes_list);
            variables[1] = variable_change1;
            variables[0] = variable_change0;
            return;
        }
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_381_377([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_382_383([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(variables[4] != 50){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(409,cell);
        variables[0] = 50;
        int variable_change1 = variables[1];
        mr.emplace_back(410,cell);
        variables[1] = 50;
        mr.emplace_back(411,cell);
        moves.emplace_back(mr, cell, 383);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_383_385([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate19(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(413,cell);
        moves.emplace_back(mr, cell, 386);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_383_388([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate20(cell, cache)){
            return;
        }
        if(evaluate25(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(417,cell);
        variables[0] = 100;
        int variable_change1 = variables[1];
        mr.emplace_back(418,cell);
        variables[1] = 0;
        mr.emplace_back(419,cell);
        moves.emplace_back(mr, cell, 389);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_384_374([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_385_386([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(evaluate19(cell, cache)){
            return;
        }
        const auto previous_changes_list = mr.size();
        mr.emplace_back(413,cell);
        moves.emplace_back(mr, cell, 386);
        mr.resize(previous_changes_list);
        return;
    }

    void game_state::get_all_moves_386_387([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_387_384([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_388_389([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if(not evaluate20(cell, cache)){
            return;
        }
        if(evaluate25(cell, cache)){
            return;
        }
        int variable_change0 = variables[0];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(417,cell);
        variables[0] = 100;
        int variable_change1 = variables[1];
        mr.emplace_back(418,cell);
        variables[1] = 0;
        mr.emplace_back(419,cell);
        moves.emplace_back(mr, cell, 389);
        mr.resize(previous_changes_list);
        variables[1] = variable_change1;
        variables[0] = variable_change0;
        return;
    }

    void game_state::get_all_moves_389_390([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_390_384([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        get_all_moves_374_392(cell, cache, mr, moves, move_length_limit);
        get_all_moves_374_0(cell, cache, mr, moves, move_length_limit);
        return;
    }

    void game_state::get_all_moves_391_0([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        if((variables[4])+(1) > bounds[4] or (variables[4])+(1) <0){
            return;
        }
        int variable_change0 = variables[4];
        const auto previous_changes_list = mr.size();
        mr.emplace_back(1,cell);
        variables[4] = (variables[4])+(1);
        mr.emplace_back(2,cell);
        moves.emplace_back(mr, cell, 1);
        mr.resize(previous_changes_list);
        variables[4] = variable_change0;
        return;
    }

    void game_state::get_all_moves_391_392([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache, [[maybe_unused]] move_representation& mr, [[maybe_unused]] std::vector<semimove>& moves, [[maybe_unused]] unsigned int move_length_limit){
        return;
    }

    bool game_state::get_pattern_value0_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value0_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value0_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value0_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value0_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value0_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value0_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value0_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value0_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value0_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value0_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(0, cell-1)){
            return false;
        }
        cache.pattern_set0(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value0_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(0, cell-1)){
            return false;
        }
        cache.pattern_set0(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value0_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value0_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(0, cell-1)){
            return false;
        }
        cache.pattern_set0(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(1, cell-1)){
            return false;
        }
        cache.pattern_set0(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value0_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(1, cell-1)){
            return false;
        }
        cache.pattern_set0(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value0_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value0_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(1, cell-1)){
            return false;
        }
        cache.pattern_set0(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(2, cell-1)){
            return false;
        }
        cache.pattern_set0(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value0_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(2, cell-1)){
            return false;
        }
        cache.pattern_set0(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value0_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value0_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(2, cell-1)){
            return false;
        }
        cache.pattern_set0(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(3, cell-1)){
            return false;
        }
        cache.pattern_set0(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value0_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(3, cell-1)){
            return false;
        }
        cache.pattern_set0(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value0_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value0_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(3, cell-1)){
            return false;
        }
        cache.pattern_set0(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(4, cell-1)){
            return false;
        }
        cache.pattern_set0(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value0_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(4, cell-1)){
            return false;
        }
        cache.pattern_set0(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value0_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value0_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(4, cell-1)){
            return false;
        }
        cache.pattern_set0(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(5, cell-1)){
            return false;
        }
        cache.pattern_set0(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value0_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(5, cell-1)){
            return false;
        }
        cache.pattern_set0(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value0_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value0_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(5, cell-1)){
            return false;
        }
        cache.pattern_set0(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(6, cell-1)){
            return false;
        }
        cache.pattern_set0(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value0_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(6, cell-1)){
            return false;
        }
        cache.pattern_set0(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value0_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value0_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(6, cell-1)){
            return false;
        }
        cache.pattern_set0(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(7, cell-1)){
            return false;
        }
        cache.pattern_set0(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value0_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value0_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(7, cell-1)){
            return false;
        }
        cache.pattern_set0(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value0_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value0_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value0_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value0_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value0_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set0(7, cell-1)){
            return false;
        }
        cache.pattern_set0(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value1_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value1_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value1_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value1_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value1_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value1_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value1_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value1_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value1_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value1_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(0, cell-1)){
            return false;
        }
        cache.pattern_set1(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value1_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(0, cell-1)){
            return false;
        }
        cache.pattern_set1(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value1_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value1_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(0, cell-1)){
            return false;
        }
        cache.pattern_set1(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(1, cell-1)){
            return false;
        }
        cache.pattern_set1(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value1_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(1, cell-1)){
            return false;
        }
        cache.pattern_set1(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value1_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value1_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(1, cell-1)){
            return false;
        }
        cache.pattern_set1(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(2, cell-1)){
            return false;
        }
        cache.pattern_set1(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value1_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(2, cell-1)){
            return false;
        }
        cache.pattern_set1(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value1_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value1_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(2, cell-1)){
            return false;
        }
        cache.pattern_set1(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(3, cell-1)){
            return false;
        }
        cache.pattern_set1(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value1_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(3, cell-1)){
            return false;
        }
        cache.pattern_set1(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value1_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value1_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(3, cell-1)){
            return false;
        }
        cache.pattern_set1(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(4, cell-1)){
            return false;
        }
        cache.pattern_set1(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value1_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(4, cell-1)){
            return false;
        }
        cache.pattern_set1(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value1_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value1_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(4, cell-1)){
            return false;
        }
        cache.pattern_set1(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(5, cell-1)){
            return false;
        }
        cache.pattern_set1(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value1_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(5, cell-1)){
            return false;
        }
        cache.pattern_set1(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value1_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value1_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(5, cell-1)){
            return false;
        }
        cache.pattern_set1(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(6, cell-1)){
            return false;
        }
        cache.pattern_set1(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value1_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(6, cell-1)){
            return false;
        }
        cache.pattern_set1(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value1_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value1_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(6, cell-1)){
            return false;
        }
        cache.pattern_set1(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(7, cell-1)){
            return false;
        }
        cache.pattern_set1(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value1_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value1_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(7, cell-1)){
            return false;
        }
        cache.pattern_set1(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value1_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value1_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value1_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value1_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value1_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set1(7, cell-1)){
            return false;
        }
        cache.pattern_set1(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value2_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value2_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value2_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value2_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value2_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value2_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value2_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value2_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value2_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value2_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(0, cell-1)){
            return false;
        }
        cache.pattern_set2(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value2_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(0, cell-1)){
            return false;
        }
        cache.pattern_set2(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value2_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value2_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(0, cell-1)){
            return false;
        }
        cache.pattern_set2(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(1, cell-1)){
            return false;
        }
        cache.pattern_set2(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value2_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(1, cell-1)){
            return false;
        }
        cache.pattern_set2(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value2_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value2_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(1, cell-1)){
            return false;
        }
        cache.pattern_set2(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(2, cell-1)){
            return false;
        }
        cache.pattern_set2(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value2_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(2, cell-1)){
            return false;
        }
        cache.pattern_set2(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value2_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value2_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(2, cell-1)){
            return false;
        }
        cache.pattern_set2(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(3, cell-1)){
            return false;
        }
        cache.pattern_set2(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value2_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(3, cell-1)){
            return false;
        }
        cache.pattern_set2(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value2_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value2_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(3, cell-1)){
            return false;
        }
        cache.pattern_set2(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(4, cell-1)){
            return false;
        }
        cache.pattern_set2(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value2_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(4, cell-1)){
            return false;
        }
        cache.pattern_set2(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value2_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value2_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(4, cell-1)){
            return false;
        }
        cache.pattern_set2(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(5, cell-1)){
            return false;
        }
        cache.pattern_set2(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value2_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(5, cell-1)){
            return false;
        }
        cache.pattern_set2(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value2_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value2_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(5, cell-1)){
            return false;
        }
        cache.pattern_set2(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(6, cell-1)){
            return false;
        }
        cache.pattern_set2(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value2_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(6, cell-1)){
            return false;
        }
        cache.pattern_set2(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value2_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value2_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(6, cell-1)){
            return false;
        }
        cache.pattern_set2(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(7, cell-1)){
            return false;
        }
        cache.pattern_set2(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value2_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value2_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(7, cell-1)){
            return false;
        }
        cache.pattern_set2(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value2_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value2_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value2_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value2_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value2_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set2(7, cell-1)){
            return false;
        }
        cache.pattern_set2(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value3_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value3_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value3_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value3_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set3(0, el-1)){
                continue;
            }
            cache.pattern_set3(0, el-1);
            if(get_pattern_value3_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value3_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value3_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value3_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value3_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value3_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value3_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value3_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value3_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value3_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(1, cell-1)){
            return false;
        }
        cache.pattern_set3(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value3_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(3, cell-1)){
            return false;
        }
        cache.pattern_set3(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(1, cell-1)){
            return false;
        }
        cache.pattern_set3(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(2, cell-1)){
            return false;
        }
        cache.pattern_set3(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value3_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(2, cell-1)){
            return false;
        }
        cache.pattern_set3(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value3_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(3, cell-1)){
            return false;
        }
        cache.pattern_set3(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(1, cell-1)){
            return false;
        }
        cache.pattern_set3(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(4, cell-1)){
            return false;
        }
        cache.pattern_set3(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value3_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(6, cell-1)){
            return false;
        }
        cache.pattern_set3(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(4, cell-1)){
            return false;
        }
        cache.pattern_set3(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(5, cell-1)){
            return false;
        }
        cache.pattern_set3(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value3_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(5, cell-1)){
            return false;
        }
        cache.pattern_set3(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value3_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(6, cell-1)){
            return false;
        }
        cache.pattern_set3(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(4, cell-1)){
            return false;
        }
        cache.pattern_set3(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(7, cell-1)){
            return false;
        }
        cache.pattern_set3(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value3_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(9, cell-1)){
            return false;
        }
        cache.pattern_set3(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(7, cell-1)){
            return false;
        }
        cache.pattern_set3(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(8, cell-1)){
            return false;
        }
        cache.pattern_set3(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value3_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(8, cell-1)){
            return false;
        }
        cache.pattern_set3(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value3_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(9, cell-1)){
            return false;
        }
        cache.pattern_set3(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(7, cell-1)){
            return false;
        }
        cache.pattern_set3(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(10, cell-1)){
            return false;
        }
        cache.pattern_set3(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value3_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(12, cell-1)){
            return false;
        }
        cache.pattern_set3(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(10, cell-1)){
            return false;
        }
        cache.pattern_set3(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(11, cell-1)){
            return false;
        }
        cache.pattern_set3(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value3_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(11, cell-1)){
            return false;
        }
        cache.pattern_set3(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value3_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(12, cell-1)){
            return false;
        }
        cache.pattern_set3(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(10, cell-1)){
            return false;
        }
        cache.pattern_set3(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(13, cell-1)){
            return false;
        }
        cache.pattern_set3(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value3_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(15, cell-1)){
            return false;
        }
        cache.pattern_set3(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(13, cell-1)){
            return false;
        }
        cache.pattern_set3(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(14, cell-1)){
            return false;
        }
        cache.pattern_set3(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value3_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(14, cell-1)){
            return false;
        }
        cache.pattern_set3(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value3_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(15, cell-1)){
            return false;
        }
        cache.pattern_set3(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(13, cell-1)){
            return false;
        }
        cache.pattern_set3(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(16, cell-1)){
            return false;
        }
        cache.pattern_set3(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value3_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(18, cell-1)){
            return false;
        }
        cache.pattern_set3(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(16, cell-1)){
            return false;
        }
        cache.pattern_set3(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(17, cell-1)){
            return false;
        }
        cache.pattern_set3(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value3_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(17, cell-1)){
            return false;
        }
        cache.pattern_set3(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value3_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(18, cell-1)){
            return false;
        }
        cache.pattern_set3(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(16, cell-1)){
            return false;
        }
        cache.pattern_set3(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(19, cell-1)){
            return false;
        }
        cache.pattern_set3(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value3_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(21, cell-1)){
            return false;
        }
        cache.pattern_set3(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(19, cell-1)){
            return false;
        }
        cache.pattern_set3(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(20, cell-1)){
            return false;
        }
        cache.pattern_set3(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value3_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(20, cell-1)){
            return false;
        }
        cache.pattern_set3(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value3_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(21, cell-1)){
            return false;
        }
        cache.pattern_set3(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(19, cell-1)){
            return false;
        }
        cache.pattern_set3(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(22, cell-1)){
            return false;
        }
        cache.pattern_set3(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value3_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value3_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(24, cell-1)){
            return false;
        }
        cache.pattern_set3(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(22, cell-1)){
            return false;
        }
        cache.pattern_set3(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value3_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(23, cell-1)){
            return false;
        }
        cache.pattern_set3(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value3_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(23, cell-1)){
            return false;
        }
        cache.pattern_set3(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value3_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value3_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value3_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set3(24, cell-1)){
            return false;
        }
        cache.pattern_set3(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set3(22, cell-1)){
            return false;
        }
        cache.pattern_set3(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value4_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value4_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value4_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value4_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set4(0, el-1)){
                continue;
            }
            cache.pattern_set4(0, el-1);
            if(get_pattern_value4_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value4_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value4_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value4_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value4_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value4_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value4_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value4_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value4_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value4_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(1, cell-1)){
            return false;
        }
        cache.pattern_set4(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value4_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(3, cell-1)){
            return false;
        }
        cache.pattern_set4(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(1, cell-1)){
            return false;
        }
        cache.pattern_set4(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(2, cell-1)){
            return false;
        }
        cache.pattern_set4(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value4_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(2, cell-1)){
            return false;
        }
        cache.pattern_set4(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value4_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(3, cell-1)){
            return false;
        }
        cache.pattern_set4(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(1, cell-1)){
            return false;
        }
        cache.pattern_set4(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(4, cell-1)){
            return false;
        }
        cache.pattern_set4(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value4_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(6, cell-1)){
            return false;
        }
        cache.pattern_set4(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(4, cell-1)){
            return false;
        }
        cache.pattern_set4(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(5, cell-1)){
            return false;
        }
        cache.pattern_set4(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value4_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(5, cell-1)){
            return false;
        }
        cache.pattern_set4(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value4_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(6, cell-1)){
            return false;
        }
        cache.pattern_set4(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(4, cell-1)){
            return false;
        }
        cache.pattern_set4(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(7, cell-1)){
            return false;
        }
        cache.pattern_set4(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value4_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(9, cell-1)){
            return false;
        }
        cache.pattern_set4(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(7, cell-1)){
            return false;
        }
        cache.pattern_set4(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(8, cell-1)){
            return false;
        }
        cache.pattern_set4(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value4_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(8, cell-1)){
            return false;
        }
        cache.pattern_set4(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value4_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(9, cell-1)){
            return false;
        }
        cache.pattern_set4(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(7, cell-1)){
            return false;
        }
        cache.pattern_set4(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(10, cell-1)){
            return false;
        }
        cache.pattern_set4(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value4_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(12, cell-1)){
            return false;
        }
        cache.pattern_set4(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(10, cell-1)){
            return false;
        }
        cache.pattern_set4(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(11, cell-1)){
            return false;
        }
        cache.pattern_set4(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value4_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(11, cell-1)){
            return false;
        }
        cache.pattern_set4(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value4_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(12, cell-1)){
            return false;
        }
        cache.pattern_set4(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(10, cell-1)){
            return false;
        }
        cache.pattern_set4(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(13, cell-1)){
            return false;
        }
        cache.pattern_set4(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value4_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(15, cell-1)){
            return false;
        }
        cache.pattern_set4(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(13, cell-1)){
            return false;
        }
        cache.pattern_set4(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(14, cell-1)){
            return false;
        }
        cache.pattern_set4(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value4_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(14, cell-1)){
            return false;
        }
        cache.pattern_set4(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value4_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(15, cell-1)){
            return false;
        }
        cache.pattern_set4(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(13, cell-1)){
            return false;
        }
        cache.pattern_set4(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(16, cell-1)){
            return false;
        }
        cache.pattern_set4(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value4_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(18, cell-1)){
            return false;
        }
        cache.pattern_set4(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(16, cell-1)){
            return false;
        }
        cache.pattern_set4(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(17, cell-1)){
            return false;
        }
        cache.pattern_set4(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value4_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(17, cell-1)){
            return false;
        }
        cache.pattern_set4(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value4_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(18, cell-1)){
            return false;
        }
        cache.pattern_set4(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(16, cell-1)){
            return false;
        }
        cache.pattern_set4(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(19, cell-1)){
            return false;
        }
        cache.pattern_set4(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value4_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(21, cell-1)){
            return false;
        }
        cache.pattern_set4(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(19, cell-1)){
            return false;
        }
        cache.pattern_set4(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(20, cell-1)){
            return false;
        }
        cache.pattern_set4(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value4_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(20, cell-1)){
            return false;
        }
        cache.pattern_set4(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value4_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(21, cell-1)){
            return false;
        }
        cache.pattern_set4(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(19, cell-1)){
            return false;
        }
        cache.pattern_set4(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(22, cell-1)){
            return false;
        }
        cache.pattern_set4(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value4_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value4_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(24, cell-1)){
            return false;
        }
        cache.pattern_set4(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(22, cell-1)){
            return false;
        }
        cache.pattern_set4(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value4_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(23, cell-1)){
            return false;
        }
        cache.pattern_set4(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value4_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(23, cell-1)){
            return false;
        }
        cache.pattern_set4(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value4_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value4_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value4_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set4(24, cell-1)){
            return false;
        }
        cache.pattern_set4(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set4(22, cell-1)){
            return false;
        }
        cache.pattern_set4(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value5_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value5_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value5_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value5_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set5(0, el-1)){
                continue;
            }
            cache.pattern_set5(0, el-1);
            if(get_pattern_value5_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value5_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value5_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value5_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value5_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value5_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value5_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value5_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value5_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value5_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(1, cell-1)){
            return false;
        }
        cache.pattern_set5(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value5_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(3, cell-1)){
            return false;
        }
        cache.pattern_set5(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(1, cell-1)){
            return false;
        }
        cache.pattern_set5(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(2, cell-1)){
            return false;
        }
        cache.pattern_set5(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value5_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(2, cell-1)){
            return false;
        }
        cache.pattern_set5(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value5_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(3, cell-1)){
            return false;
        }
        cache.pattern_set5(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(1, cell-1)){
            return false;
        }
        cache.pattern_set5(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(4, cell-1)){
            return false;
        }
        cache.pattern_set5(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value5_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(6, cell-1)){
            return false;
        }
        cache.pattern_set5(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(4, cell-1)){
            return false;
        }
        cache.pattern_set5(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(5, cell-1)){
            return false;
        }
        cache.pattern_set5(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value5_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(5, cell-1)){
            return false;
        }
        cache.pattern_set5(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value5_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(6, cell-1)){
            return false;
        }
        cache.pattern_set5(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(4, cell-1)){
            return false;
        }
        cache.pattern_set5(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(7, cell-1)){
            return false;
        }
        cache.pattern_set5(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value5_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(9, cell-1)){
            return false;
        }
        cache.pattern_set5(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(7, cell-1)){
            return false;
        }
        cache.pattern_set5(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(8, cell-1)){
            return false;
        }
        cache.pattern_set5(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value5_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(8, cell-1)){
            return false;
        }
        cache.pattern_set5(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value5_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(9, cell-1)){
            return false;
        }
        cache.pattern_set5(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(7, cell-1)){
            return false;
        }
        cache.pattern_set5(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(10, cell-1)){
            return false;
        }
        cache.pattern_set5(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value5_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(12, cell-1)){
            return false;
        }
        cache.pattern_set5(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(10, cell-1)){
            return false;
        }
        cache.pattern_set5(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(11, cell-1)){
            return false;
        }
        cache.pattern_set5(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value5_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(11, cell-1)){
            return false;
        }
        cache.pattern_set5(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value5_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(12, cell-1)){
            return false;
        }
        cache.pattern_set5(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(10, cell-1)){
            return false;
        }
        cache.pattern_set5(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(13, cell-1)){
            return false;
        }
        cache.pattern_set5(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value5_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(15, cell-1)){
            return false;
        }
        cache.pattern_set5(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(13, cell-1)){
            return false;
        }
        cache.pattern_set5(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(14, cell-1)){
            return false;
        }
        cache.pattern_set5(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value5_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(14, cell-1)){
            return false;
        }
        cache.pattern_set5(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value5_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(15, cell-1)){
            return false;
        }
        cache.pattern_set5(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(13, cell-1)){
            return false;
        }
        cache.pattern_set5(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(16, cell-1)){
            return false;
        }
        cache.pattern_set5(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value5_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(18, cell-1)){
            return false;
        }
        cache.pattern_set5(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(16, cell-1)){
            return false;
        }
        cache.pattern_set5(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(17, cell-1)){
            return false;
        }
        cache.pattern_set5(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value5_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(17, cell-1)){
            return false;
        }
        cache.pattern_set5(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value5_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(18, cell-1)){
            return false;
        }
        cache.pattern_set5(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(16, cell-1)){
            return false;
        }
        cache.pattern_set5(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(19, cell-1)){
            return false;
        }
        cache.pattern_set5(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value5_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(21, cell-1)){
            return false;
        }
        cache.pattern_set5(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(19, cell-1)){
            return false;
        }
        cache.pattern_set5(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(20, cell-1)){
            return false;
        }
        cache.pattern_set5(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value5_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(20, cell-1)){
            return false;
        }
        cache.pattern_set5(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value5_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(21, cell-1)){
            return false;
        }
        cache.pattern_set5(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(19, cell-1)){
            return false;
        }
        cache.pattern_set5(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(22, cell-1)){
            return false;
        }
        cache.pattern_set5(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value5_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value5_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(24, cell-1)){
            return false;
        }
        cache.pattern_set5(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(22, cell-1)){
            return false;
        }
        cache.pattern_set5(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value5_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(23, cell-1)){
            return false;
        }
        cache.pattern_set5(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value5_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(23, cell-1)){
            return false;
        }
        cache.pattern_set5(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value5_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value5_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value5_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set5(24, cell-1)){
            return false;
        }
        cache.pattern_set5(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set5(22, cell-1)){
            return false;
        }
        cache.pattern_set5(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value6_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value6_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value6_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value6_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set6(0, el-1)){
                continue;
            }
            cache.pattern_set6(0, el-1);
            if(get_pattern_value6_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value6_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value6_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value6_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value6_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value6_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value6_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value6_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value6_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value6_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(1, cell-1)){
            return false;
        }
        cache.pattern_set6(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value6_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(3, cell-1)){
            return false;
        }
        cache.pattern_set6(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(1, cell-1)){
            return false;
        }
        cache.pattern_set6(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(2, cell-1)){
            return false;
        }
        cache.pattern_set6(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value6_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(2, cell-1)){
            return false;
        }
        cache.pattern_set6(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value6_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(3, cell-1)){
            return false;
        }
        cache.pattern_set6(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(1, cell-1)){
            return false;
        }
        cache.pattern_set6(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(4, cell-1)){
            return false;
        }
        cache.pattern_set6(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value6_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(6, cell-1)){
            return false;
        }
        cache.pattern_set6(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(4, cell-1)){
            return false;
        }
        cache.pattern_set6(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(5, cell-1)){
            return false;
        }
        cache.pattern_set6(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value6_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(5, cell-1)){
            return false;
        }
        cache.pattern_set6(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value6_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(6, cell-1)){
            return false;
        }
        cache.pattern_set6(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(4, cell-1)){
            return false;
        }
        cache.pattern_set6(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(7, cell-1)){
            return false;
        }
        cache.pattern_set6(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value6_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(9, cell-1)){
            return false;
        }
        cache.pattern_set6(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(7, cell-1)){
            return false;
        }
        cache.pattern_set6(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(8, cell-1)){
            return false;
        }
        cache.pattern_set6(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value6_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(8, cell-1)){
            return false;
        }
        cache.pattern_set6(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value6_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(9, cell-1)){
            return false;
        }
        cache.pattern_set6(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(7, cell-1)){
            return false;
        }
        cache.pattern_set6(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(10, cell-1)){
            return false;
        }
        cache.pattern_set6(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value6_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(12, cell-1)){
            return false;
        }
        cache.pattern_set6(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(10, cell-1)){
            return false;
        }
        cache.pattern_set6(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(11, cell-1)){
            return false;
        }
        cache.pattern_set6(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value6_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(11, cell-1)){
            return false;
        }
        cache.pattern_set6(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value6_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(12, cell-1)){
            return false;
        }
        cache.pattern_set6(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(10, cell-1)){
            return false;
        }
        cache.pattern_set6(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(13, cell-1)){
            return false;
        }
        cache.pattern_set6(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value6_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(15, cell-1)){
            return false;
        }
        cache.pattern_set6(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(13, cell-1)){
            return false;
        }
        cache.pattern_set6(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(14, cell-1)){
            return false;
        }
        cache.pattern_set6(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value6_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(14, cell-1)){
            return false;
        }
        cache.pattern_set6(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value6_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(15, cell-1)){
            return false;
        }
        cache.pattern_set6(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(13, cell-1)){
            return false;
        }
        cache.pattern_set6(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(16, cell-1)){
            return false;
        }
        cache.pattern_set6(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value6_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(18, cell-1)){
            return false;
        }
        cache.pattern_set6(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(16, cell-1)){
            return false;
        }
        cache.pattern_set6(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(17, cell-1)){
            return false;
        }
        cache.pattern_set6(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value6_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(17, cell-1)){
            return false;
        }
        cache.pattern_set6(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value6_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(18, cell-1)){
            return false;
        }
        cache.pattern_set6(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(16, cell-1)){
            return false;
        }
        cache.pattern_set6(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(19, cell-1)){
            return false;
        }
        cache.pattern_set6(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value6_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(21, cell-1)){
            return false;
        }
        cache.pattern_set6(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(19, cell-1)){
            return false;
        }
        cache.pattern_set6(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(20, cell-1)){
            return false;
        }
        cache.pattern_set6(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value6_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(20, cell-1)){
            return false;
        }
        cache.pattern_set6(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value6_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(21, cell-1)){
            return false;
        }
        cache.pattern_set6(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(19, cell-1)){
            return false;
        }
        cache.pattern_set6(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(22, cell-1)){
            return false;
        }
        cache.pattern_set6(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value6_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value6_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(24, cell-1)){
            return false;
        }
        cache.pattern_set6(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(22, cell-1)){
            return false;
        }
        cache.pattern_set6(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value6_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(23, cell-1)){
            return false;
        }
        cache.pattern_set6(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value6_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(23, cell-1)){
            return false;
        }
        cache.pattern_set6(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value6_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value6_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value6_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set6(24, cell-1)){
            return false;
        }
        cache.pattern_set6(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set6(22, cell-1)){
            return false;
        }
        cache.pattern_set6(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value7_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value7_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value7_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value7_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set7(0, el-1)){
                continue;
            }
            cache.pattern_set7(0, el-1);
            if(get_pattern_value7_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value7_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value7_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value7_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value7_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value7_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value7_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value7_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value7_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value7_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(1, cell-1)){
            return false;
        }
        cache.pattern_set7(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value7_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(3, cell-1)){
            return false;
        }
        cache.pattern_set7(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(1, cell-1)){
            return false;
        }
        cache.pattern_set7(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(2, cell-1)){
            return false;
        }
        cache.pattern_set7(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value7_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(2, cell-1)){
            return false;
        }
        cache.pattern_set7(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value7_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(3, cell-1)){
            return false;
        }
        cache.pattern_set7(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(1, cell-1)){
            return false;
        }
        cache.pattern_set7(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(4, cell-1)){
            return false;
        }
        cache.pattern_set7(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value7_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(6, cell-1)){
            return false;
        }
        cache.pattern_set7(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(4, cell-1)){
            return false;
        }
        cache.pattern_set7(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(5, cell-1)){
            return false;
        }
        cache.pattern_set7(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value7_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(5, cell-1)){
            return false;
        }
        cache.pattern_set7(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value7_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(6, cell-1)){
            return false;
        }
        cache.pattern_set7(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(4, cell-1)){
            return false;
        }
        cache.pattern_set7(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(7, cell-1)){
            return false;
        }
        cache.pattern_set7(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value7_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(9, cell-1)){
            return false;
        }
        cache.pattern_set7(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(7, cell-1)){
            return false;
        }
        cache.pattern_set7(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(8, cell-1)){
            return false;
        }
        cache.pattern_set7(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value7_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(8, cell-1)){
            return false;
        }
        cache.pattern_set7(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value7_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(9, cell-1)){
            return false;
        }
        cache.pattern_set7(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(7, cell-1)){
            return false;
        }
        cache.pattern_set7(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(10, cell-1)){
            return false;
        }
        cache.pattern_set7(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value7_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(12, cell-1)){
            return false;
        }
        cache.pattern_set7(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(10, cell-1)){
            return false;
        }
        cache.pattern_set7(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(11, cell-1)){
            return false;
        }
        cache.pattern_set7(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value7_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(11, cell-1)){
            return false;
        }
        cache.pattern_set7(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value7_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(12, cell-1)){
            return false;
        }
        cache.pattern_set7(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(10, cell-1)){
            return false;
        }
        cache.pattern_set7(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(13, cell-1)){
            return false;
        }
        cache.pattern_set7(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value7_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(15, cell-1)){
            return false;
        }
        cache.pattern_set7(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(13, cell-1)){
            return false;
        }
        cache.pattern_set7(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(14, cell-1)){
            return false;
        }
        cache.pattern_set7(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value7_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(14, cell-1)){
            return false;
        }
        cache.pattern_set7(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value7_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(15, cell-1)){
            return false;
        }
        cache.pattern_set7(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(13, cell-1)){
            return false;
        }
        cache.pattern_set7(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(16, cell-1)){
            return false;
        }
        cache.pattern_set7(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value7_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(18, cell-1)){
            return false;
        }
        cache.pattern_set7(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(16, cell-1)){
            return false;
        }
        cache.pattern_set7(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(17, cell-1)){
            return false;
        }
        cache.pattern_set7(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value7_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(17, cell-1)){
            return false;
        }
        cache.pattern_set7(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value7_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(18, cell-1)){
            return false;
        }
        cache.pattern_set7(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(16, cell-1)){
            return false;
        }
        cache.pattern_set7(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(19, cell-1)){
            return false;
        }
        cache.pattern_set7(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value7_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(21, cell-1)){
            return false;
        }
        cache.pattern_set7(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(19, cell-1)){
            return false;
        }
        cache.pattern_set7(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(20, cell-1)){
            return false;
        }
        cache.pattern_set7(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value7_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(20, cell-1)){
            return false;
        }
        cache.pattern_set7(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value7_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(21, cell-1)){
            return false;
        }
        cache.pattern_set7(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(19, cell-1)){
            return false;
        }
        cache.pattern_set7(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(22, cell-1)){
            return false;
        }
        cache.pattern_set7(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value7_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value7_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(24, cell-1)){
            return false;
        }
        cache.pattern_set7(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(22, cell-1)){
            return false;
        }
        cache.pattern_set7(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value7_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(23, cell-1)){
            return false;
        }
        cache.pattern_set7(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value7_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(23, cell-1)){
            return false;
        }
        cache.pattern_set7(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value7_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value7_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value7_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set7(24, cell-1)){
            return false;
        }
        cache.pattern_set7(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set7(22, cell-1)){
            return false;
        }
        cache.pattern_set7(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value8_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value8_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value8_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value8_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value8_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value8_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value8_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value8_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value8_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value8_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(0, cell-1)){
            return false;
        }
        cache.pattern_set8(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value8_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(0, cell-1)){
            return false;
        }
        cache.pattern_set8(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value8_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value8_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(0, cell-1)){
            return false;
        }
        cache.pattern_set8(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(1, cell-1)){
            return false;
        }
        cache.pattern_set8(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value8_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(1, cell-1)){
            return false;
        }
        cache.pattern_set8(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value8_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value8_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(1, cell-1)){
            return false;
        }
        cache.pattern_set8(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(2, cell-1)){
            return false;
        }
        cache.pattern_set8(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value8_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(2, cell-1)){
            return false;
        }
        cache.pattern_set8(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value8_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value8_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(2, cell-1)){
            return false;
        }
        cache.pattern_set8(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(3, cell-1)){
            return false;
        }
        cache.pattern_set8(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value8_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(3, cell-1)){
            return false;
        }
        cache.pattern_set8(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value8_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value8_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(3, cell-1)){
            return false;
        }
        cache.pattern_set8(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(4, cell-1)){
            return false;
        }
        cache.pattern_set8(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value8_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(4, cell-1)){
            return false;
        }
        cache.pattern_set8(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value8_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value8_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(4, cell-1)){
            return false;
        }
        cache.pattern_set8(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(5, cell-1)){
            return false;
        }
        cache.pattern_set8(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value8_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(5, cell-1)){
            return false;
        }
        cache.pattern_set8(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value8_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value8_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(5, cell-1)){
            return false;
        }
        cache.pattern_set8(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(6, cell-1)){
            return false;
        }
        cache.pattern_set8(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value8_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(6, cell-1)){
            return false;
        }
        cache.pattern_set8(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value8_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value8_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(6, cell-1)){
            return false;
        }
        cache.pattern_set8(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(7, cell-1)){
            return false;
        }
        cache.pattern_set8(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value8_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value8_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(7, cell-1)){
            return false;
        }
        cache.pattern_set8(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value8_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value8_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value8_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value8_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value8_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set8(7, cell-1)){
            return false;
        }
        cache.pattern_set8(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value9_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value9_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value9_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value9_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value9_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value9_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value9_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value9_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value9_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value9_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(0, cell-1)){
            return false;
        }
        cache.pattern_set9(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value9_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(0, cell-1)){
            return false;
        }
        cache.pattern_set9(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value9_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value9_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(0, cell-1)){
            return false;
        }
        cache.pattern_set9(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(1, cell-1)){
            return false;
        }
        cache.pattern_set9(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value9_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(1, cell-1)){
            return false;
        }
        cache.pattern_set9(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value9_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value9_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(1, cell-1)){
            return false;
        }
        cache.pattern_set9(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(2, cell-1)){
            return false;
        }
        cache.pattern_set9(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value9_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(2, cell-1)){
            return false;
        }
        cache.pattern_set9(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value9_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value9_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(2, cell-1)){
            return false;
        }
        cache.pattern_set9(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(3, cell-1)){
            return false;
        }
        cache.pattern_set9(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value9_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(3, cell-1)){
            return false;
        }
        cache.pattern_set9(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value9_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value9_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(3, cell-1)){
            return false;
        }
        cache.pattern_set9(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(4, cell-1)){
            return false;
        }
        cache.pattern_set9(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value9_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(4, cell-1)){
            return false;
        }
        cache.pattern_set9(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value9_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value9_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(4, cell-1)){
            return false;
        }
        cache.pattern_set9(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(5, cell-1)){
            return false;
        }
        cache.pattern_set9(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value9_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(5, cell-1)){
            return false;
        }
        cache.pattern_set9(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value9_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value9_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(5, cell-1)){
            return false;
        }
        cache.pattern_set9(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(6, cell-1)){
            return false;
        }
        cache.pattern_set9(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value9_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(6, cell-1)){
            return false;
        }
        cache.pattern_set9(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value9_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value9_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(6, cell-1)){
            return false;
        }
        cache.pattern_set9(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(7, cell-1)){
            return false;
        }
        cache.pattern_set9(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value9_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value9_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(7, cell-1)){
            return false;
        }
        cache.pattern_set9(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value9_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value9_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value9_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value9_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value9_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set9(7, cell-1)){
            return false;
        }
        cache.pattern_set9(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value10_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value10_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value10_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value10_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value10_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value10_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value10_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value10_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value10_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value10_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(0, cell-1)){
            return false;
        }
        cache.pattern_set10(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value10_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(0, cell-1)){
            return false;
        }
        cache.pattern_set10(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value10_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value10_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(0, cell-1)){
            return false;
        }
        cache.pattern_set10(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(1, cell-1)){
            return false;
        }
        cache.pattern_set10(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value10_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(1, cell-1)){
            return false;
        }
        cache.pattern_set10(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value10_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value10_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(1, cell-1)){
            return false;
        }
        cache.pattern_set10(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(2, cell-1)){
            return false;
        }
        cache.pattern_set10(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value10_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(2, cell-1)){
            return false;
        }
        cache.pattern_set10(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value10_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value10_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(2, cell-1)){
            return false;
        }
        cache.pattern_set10(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(3, cell-1)){
            return false;
        }
        cache.pattern_set10(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value10_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(3, cell-1)){
            return false;
        }
        cache.pattern_set10(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value10_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value10_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(3, cell-1)){
            return false;
        }
        cache.pattern_set10(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(4, cell-1)){
            return false;
        }
        cache.pattern_set10(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value10_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(4, cell-1)){
            return false;
        }
        cache.pattern_set10(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value10_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value10_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(4, cell-1)){
            return false;
        }
        cache.pattern_set10(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(5, cell-1)){
            return false;
        }
        cache.pattern_set10(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value10_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(5, cell-1)){
            return false;
        }
        cache.pattern_set10(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value10_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value10_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(5, cell-1)){
            return false;
        }
        cache.pattern_set10(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(6, cell-1)){
            return false;
        }
        cache.pattern_set10(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value10_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(6, cell-1)){
            return false;
        }
        cache.pattern_set10(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value10_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value10_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(6, cell-1)){
            return false;
        }
        cache.pattern_set10(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(7, cell-1)){
            return false;
        }
        cache.pattern_set10(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value10_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value10_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(7, cell-1)){
            return false;
        }
        cache.pattern_set10(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value10_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value10_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value10_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value10_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value10_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set10(7, cell-1)){
            return false;
        }
        cache.pattern_set10(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value11_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value11_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value11_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value11_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set11(0, el-1)){
                continue;
            }
            cache.pattern_set11(0, el-1);
            if(get_pattern_value11_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value11_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value11_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value11_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value11_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value11_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value11_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value11_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value11_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value11_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(1, cell-1)){
            return false;
        }
        cache.pattern_set11(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value11_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(3, cell-1)){
            return false;
        }
        cache.pattern_set11(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(1, cell-1)){
            return false;
        }
        cache.pattern_set11(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(2, cell-1)){
            return false;
        }
        cache.pattern_set11(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value11_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(2, cell-1)){
            return false;
        }
        cache.pattern_set11(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value11_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(3, cell-1)){
            return false;
        }
        cache.pattern_set11(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(1, cell-1)){
            return false;
        }
        cache.pattern_set11(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(4, cell-1)){
            return false;
        }
        cache.pattern_set11(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value11_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(6, cell-1)){
            return false;
        }
        cache.pattern_set11(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(4, cell-1)){
            return false;
        }
        cache.pattern_set11(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(5, cell-1)){
            return false;
        }
        cache.pattern_set11(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value11_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(5, cell-1)){
            return false;
        }
        cache.pattern_set11(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value11_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(6, cell-1)){
            return false;
        }
        cache.pattern_set11(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(4, cell-1)){
            return false;
        }
        cache.pattern_set11(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(7, cell-1)){
            return false;
        }
        cache.pattern_set11(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value11_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(9, cell-1)){
            return false;
        }
        cache.pattern_set11(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(7, cell-1)){
            return false;
        }
        cache.pattern_set11(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(8, cell-1)){
            return false;
        }
        cache.pattern_set11(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value11_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(8, cell-1)){
            return false;
        }
        cache.pattern_set11(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value11_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(9, cell-1)){
            return false;
        }
        cache.pattern_set11(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(7, cell-1)){
            return false;
        }
        cache.pattern_set11(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(10, cell-1)){
            return false;
        }
        cache.pattern_set11(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value11_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(12, cell-1)){
            return false;
        }
        cache.pattern_set11(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(10, cell-1)){
            return false;
        }
        cache.pattern_set11(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(11, cell-1)){
            return false;
        }
        cache.pattern_set11(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value11_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(11, cell-1)){
            return false;
        }
        cache.pattern_set11(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value11_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(12, cell-1)){
            return false;
        }
        cache.pattern_set11(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(10, cell-1)){
            return false;
        }
        cache.pattern_set11(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(13, cell-1)){
            return false;
        }
        cache.pattern_set11(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value11_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(15, cell-1)){
            return false;
        }
        cache.pattern_set11(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(13, cell-1)){
            return false;
        }
        cache.pattern_set11(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(14, cell-1)){
            return false;
        }
        cache.pattern_set11(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value11_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(14, cell-1)){
            return false;
        }
        cache.pattern_set11(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value11_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(15, cell-1)){
            return false;
        }
        cache.pattern_set11(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(13, cell-1)){
            return false;
        }
        cache.pattern_set11(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(16, cell-1)){
            return false;
        }
        cache.pattern_set11(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value11_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(18, cell-1)){
            return false;
        }
        cache.pattern_set11(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(16, cell-1)){
            return false;
        }
        cache.pattern_set11(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(17, cell-1)){
            return false;
        }
        cache.pattern_set11(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value11_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(17, cell-1)){
            return false;
        }
        cache.pattern_set11(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value11_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(18, cell-1)){
            return false;
        }
        cache.pattern_set11(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(16, cell-1)){
            return false;
        }
        cache.pattern_set11(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(19, cell-1)){
            return false;
        }
        cache.pattern_set11(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value11_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(21, cell-1)){
            return false;
        }
        cache.pattern_set11(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(19, cell-1)){
            return false;
        }
        cache.pattern_set11(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(20, cell-1)){
            return false;
        }
        cache.pattern_set11(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value11_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(20, cell-1)){
            return false;
        }
        cache.pattern_set11(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value11_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(21, cell-1)){
            return false;
        }
        cache.pattern_set11(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(19, cell-1)){
            return false;
        }
        cache.pattern_set11(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(22, cell-1)){
            return false;
        }
        cache.pattern_set11(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value11_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value11_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(24, cell-1)){
            return false;
        }
        cache.pattern_set11(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(22, cell-1)){
            return false;
        }
        cache.pattern_set11(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value11_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(23, cell-1)){
            return false;
        }
        cache.pattern_set11(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value11_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(23, cell-1)){
            return false;
        }
        cache.pattern_set11(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value11_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value11_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value11_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set11(24, cell-1)){
            return false;
        }
        cache.pattern_set11(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set11(22, cell-1)){
            return false;
        }
        cache.pattern_set11(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value12_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int variable_change0 = variables[3];
        variables[3] = 0;
        for(int el=1;el<65;++el){
            if(get_pattern_value12_4_6(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value12_4_26(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value12_4_55(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value12_4_84(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value12_4_133(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value12_4_142(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
        }
        variables[3] = variable_change0;
        return false;
    }

    bool game_state::get_pattern_value12_0_169([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[3] != 1){
            return false;
        }
        if(get_pattern_value12_170_172(cell, cache)){
            return true;
        }
        if(get_pattern_value12_170_174(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_4_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value12_7_9(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_7_17(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_4_26([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value12_27_31(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_27_36(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_27_41(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_27_46(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_4_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value12_56_60(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_56_65(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_56_70(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_56_75(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_4_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value12_85_89(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_94(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_99(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_104(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_109(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_114(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_119(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_85_124(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_4_133([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value12_135_137(el, cache)){
                pieces[board_change0_cell] = board_change0_piece;
                return true;
            }
            if(get_pattern_value12_135_139(el, cache)){
                pieces[board_change0_cell] = board_change0_piece;
                return true;
            }
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_4_142([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value12_143_145(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value12_143_166(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value12_7_9([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table0[cell]){
            if(get_pattern_value12_10_12(el, cache)){
                return true;
            }
            if(get_pattern_value12_10_14(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value12_7_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[5] != 0){
            return false;
        }
        if(evaluate8(cell, cache)){
            return false;
        }
        if(get_pattern_value12_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value12_18_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_10_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        int variable_change1 = variables[5];
        variables[5] = 1;
        if(evaluate11(cell, cache)){
            variables[5] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[5] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_10_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 9;
        int variable_change2 = variables[5];
        variables[5] = 1;
        if(evaluate11(cell, cache)){
            variables[5] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        variables[5] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value12_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate9(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 13;
        int variable_change3 = variables[5];
        variables[5] = 1;
        if(evaluate11(cell, cache)){
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_18_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate10(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 9;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 14:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 13;
        int variable_change3 = variables[5];
        variables[5] = 1;
        if(evaluate11(cell, cache)){
            variables[5] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[5] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_27_31([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_31_29(cell, cache)){
            return true;
        }
        if(get_pattern_value12_31_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_27_36([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_36_34(cell, cache)){
            return true;
        }
        if(get_pattern_value12_36_37(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_27_41([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_41_39(cell, cache)){
            return true;
        }
        if(get_pattern_value12_41_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_27_46([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_46_44(cell, cache)){
            return true;
        }
        if(get_pattern_value12_46_47(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_28_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 8;
        if(evaluate11(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_28_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 8;
        if(evaluate11(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value12_30_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_30_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_30_32(cell, cache)){
            return true;
        }
        if(get_pattern_value12_30_29(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_31_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_30_32(cell, cache)){
            return true;
        }
        if(get_pattern_value12_30_29(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_31_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_35_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_35_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_35_37(cell, cache)){
            return true;
        }
        if(get_pattern_value12_35_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_36_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_35_37(cell, cache)){
            return true;
        }
        if(get_pattern_value12_35_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_36_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_40_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_40_39([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_40_42(cell, cache)){
            return true;
        }
        if(get_pattern_value12_40_39(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_41_39([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_40_42(cell, cache)){
            return true;
        }
        if(get_pattern_value12_40_39(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_41_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_45_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_45_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_45_47(cell, cache)){
            return true;
        }
        if(get_pattern_value12_45_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_46_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_45_47(cell, cache)){
            return true;
        }
        if(get_pattern_value12_45_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_46_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value12_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_56_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_60_58(cell, cache)){
            return true;
        }
        if(get_pattern_value12_60_61(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_56_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_65_63(cell, cache)){
            return true;
        }
        if(get_pattern_value12_65_66(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_56_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_70_68(cell, cache)){
            return true;
        }
        if(get_pattern_value12_70_71(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_56_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_75_73(cell, cache)){
            return true;
        }
        if(get_pattern_value12_75_76(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_57_79([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 13;
        if(evaluate11(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_57_81([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 13;
        if(evaluate11(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value12_59_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_59_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_59_61(cell, cache)){
            return true;
        }
        if(get_pattern_value12_59_58(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_60_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_59_61(cell, cache)){
            return true;
        }
        if(get_pattern_value12_59_58(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_60_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_64_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_64_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_64_66(cell, cache)){
            return true;
        }
        if(get_pattern_value12_64_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_65_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_64_66(cell, cache)){
            return true;
        }
        if(get_pattern_value12_64_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_65_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_69_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_69_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_69_71(cell, cache)){
            return true;
        }
        if(get_pattern_value12_69_68(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_70_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_69_71(cell, cache)){
            return true;
        }
        if(get_pattern_value12_69_68(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_70_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_74_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_74_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_74_76(cell, cache)){
            return true;
        }
        if(get_pattern_value12_74_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_75_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_74_76(cell, cache)){
            return true;
        }
        if(get_pattern_value12_74_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_75_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value12_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_89([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_89_87(cell, cache)){
            return true;
        }
        if(get_pattern_value12_89_90(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_94([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_94_92(cell, cache)){
            return true;
        }
        if(get_pattern_value12_94_95(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_99([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_99_97(cell, cache)){
            return true;
        }
        if(get_pattern_value12_99_100(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_104([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_104_102(cell, cache)){
            return true;
        }
        if(get_pattern_value12_104_105(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_109([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_109_107(cell, cache)){
            return true;
        }
        if(get_pattern_value12_109_110(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_114([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_114_112(cell, cache)){
            return true;
        }
        if(get_pattern_value12_114_115(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_119([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_119_117(cell, cache)){
            return true;
        }
        if(get_pattern_value12_119_120(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_85_124([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_124_122(cell, cache)){
            return true;
        }
        if(get_pattern_value12_124_125(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_86_128([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 12;
        if(evaluate11(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_86_130([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 12;
        if(evaluate11(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value12_88_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_88_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_88_90(cell, cache)){
            return true;
        }
        if(get_pattern_value12_88_87(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_89_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_88_90(cell, cache)){
            return true;
        }
        if(get_pattern_value12_88_87(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_89_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_93_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_93_92([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_93_95(cell, cache)){
            return true;
        }
        if(get_pattern_value12_93_92(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_94_92([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_93_95(cell, cache)){
            return true;
        }
        if(get_pattern_value12_93_92(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_94_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_98_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_98_97([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_98_100(cell, cache)){
            return true;
        }
        if(get_pattern_value12_98_97(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_99_97([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_98_100(cell, cache)){
            return true;
        }
        if(get_pattern_value12_98_97(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_99_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_103_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_103_102([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_103_105(cell, cache)){
            return true;
        }
        if(get_pattern_value12_103_102(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_104_102([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_103_105(cell, cache)){
            return true;
        }
        if(get_pattern_value12_103_102(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_104_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_108_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_108_107([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_108_110(cell, cache)){
            return true;
        }
        if(get_pattern_value12_108_107(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_109_107([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_108_110(cell, cache)){
            return true;
        }
        if(get_pattern_value12_108_107(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_109_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_113_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_113_112([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_113_115(cell, cache)){
            return true;
        }
        if(get_pattern_value12_113_112(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_114_112([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_113_115(cell, cache)){
            return true;
        }
        if(get_pattern_value12_113_112(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_114_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_118_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_118_117([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_118_120(cell, cache)){
            return true;
        }
        if(get_pattern_value12_118_117(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_119_117([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_118_120(cell, cache)){
            return true;
        }
        if(get_pattern_value12_118_117(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_119_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_123_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_123_122([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_123_125(cell, cache)){
            return true;
        }
        if(get_pattern_value12_123_122(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_124_122([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_123_125(cell, cache)){
            return true;
        }
        if(get_pattern_value12_123_122(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_124_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value12_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value12_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_135_137([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 10;
        if(evaluate11(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_135_139([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 10;
        if(evaluate11(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value12_143_145([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value12_145_147(cell, cache)){
            return true;
        }
        if(get_pattern_value12_145_149(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_143_166([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table9[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 11;
        int variable_change1 = variables[3];
        variables[3] = 1;
        int variable_change2 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_145_147([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_146_153(cell, cache)){
            return true;
        }
        if(get_pattern_value12_146_155(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_145_149([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table8[cell]){
            if(get_pattern_value12_150_151(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value12_146_153([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return false;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 11;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_146_155([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_156_158(cell, cache)){
            return true;
        }
        if(get_pattern_value12_156_160(cell, cache)){
            return true;
        }
        if(get_pattern_value12_156_162(cell, cache)){
            return true;
        }
        if(get_pattern_value12_156_164(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_150_151([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(get_pattern_value12_146_153(cell, cache)){
            return true;
        }
        if(get_pattern_value12_146_155(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value12_156_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 13;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_156_160([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 10;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_156_162([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 8;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_156_164([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 12;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_170_172([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        variables[3] = 0;
        int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value12_170_174([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 11:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 11;
        int variable_change3 = variables[3];
        variables[3] = 0;
        int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate11(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value13_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value13_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value13_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value13_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value13_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value13_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value13_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value13_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value13_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value13_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value13_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(0, cell-1)){
            return false;
        }
        cache.pattern_set13(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value13_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(0, cell-1)){
            return false;
        }
        cache.pattern_set13(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value13_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value13_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(0, cell-1)){
            return false;
        }
        cache.pattern_set13(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(1, cell-1)){
            return false;
        }
        cache.pattern_set13(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value13_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(1, cell-1)){
            return false;
        }
        cache.pattern_set13(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value13_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value13_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(1, cell-1)){
            return false;
        }
        cache.pattern_set13(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(2, cell-1)){
            return false;
        }
        cache.pattern_set13(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value13_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(2, cell-1)){
            return false;
        }
        cache.pattern_set13(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value13_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value13_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(2, cell-1)){
            return false;
        }
        cache.pattern_set13(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(3, cell-1)){
            return false;
        }
        cache.pattern_set13(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value13_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(3, cell-1)){
            return false;
        }
        cache.pattern_set13(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value13_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value13_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(3, cell-1)){
            return false;
        }
        cache.pattern_set13(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(4, cell-1)){
            return false;
        }
        cache.pattern_set13(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value13_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(4, cell-1)){
            return false;
        }
        cache.pattern_set13(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value13_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value13_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(4, cell-1)){
            return false;
        }
        cache.pattern_set13(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(5, cell-1)){
            return false;
        }
        cache.pattern_set13(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value13_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(5, cell-1)){
            return false;
        }
        cache.pattern_set13(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value13_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value13_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(5, cell-1)){
            return false;
        }
        cache.pattern_set13(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(6, cell-1)){
            return false;
        }
        cache.pattern_set13(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value13_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(6, cell-1)){
            return false;
        }
        cache.pattern_set13(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value13_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value13_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(6, cell-1)){
            return false;
        }
        cache.pattern_set13(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(7, cell-1)){
            return false;
        }
        cache.pattern_set13(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value13_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value13_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(7, cell-1)){
            return false;
        }
        cache.pattern_set13(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value13_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value13_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value13_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value13_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value13_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set13(7, cell-1)){
            return false;
        }
        cache.pattern_set13(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value14_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value14_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value14_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value14_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value14_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value14_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value14_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value14_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value14_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value14_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(0, cell-1)){
            return false;
        }
        cache.pattern_set14(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value14_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(0, cell-1)){
            return false;
        }
        cache.pattern_set14(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value14_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value14_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(0, cell-1)){
            return false;
        }
        cache.pattern_set14(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(1, cell-1)){
            return false;
        }
        cache.pattern_set14(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value14_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(1, cell-1)){
            return false;
        }
        cache.pattern_set14(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value14_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value14_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(1, cell-1)){
            return false;
        }
        cache.pattern_set14(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(2, cell-1)){
            return false;
        }
        cache.pattern_set14(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value14_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(2, cell-1)){
            return false;
        }
        cache.pattern_set14(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value14_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value14_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(2, cell-1)){
            return false;
        }
        cache.pattern_set14(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(3, cell-1)){
            return false;
        }
        cache.pattern_set14(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value14_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(3, cell-1)){
            return false;
        }
        cache.pattern_set14(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value14_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value14_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(3, cell-1)){
            return false;
        }
        cache.pattern_set14(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(4, cell-1)){
            return false;
        }
        cache.pattern_set14(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value14_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(4, cell-1)){
            return false;
        }
        cache.pattern_set14(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value14_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value14_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(4, cell-1)){
            return false;
        }
        cache.pattern_set14(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(5, cell-1)){
            return false;
        }
        cache.pattern_set14(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value14_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(5, cell-1)){
            return false;
        }
        cache.pattern_set14(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value14_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value14_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(5, cell-1)){
            return false;
        }
        cache.pattern_set14(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(6, cell-1)){
            return false;
        }
        cache.pattern_set14(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value14_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(6, cell-1)){
            return false;
        }
        cache.pattern_set14(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value14_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value14_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(6, cell-1)){
            return false;
        }
        cache.pattern_set14(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(7, cell-1)){
            return false;
        }
        cache.pattern_set14(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value14_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value14_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(7, cell-1)){
            return false;
        }
        cache.pattern_set14(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value14_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value14_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value14_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value14_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value14_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set14(7, cell-1)){
            return false;
        }
        cache.pattern_set14(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value15_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value15_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value15_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value15_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value15_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value15_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value15_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value15_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value15_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value15_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(0, cell-1)){
            return false;
        }
        cache.pattern_set15(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value15_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(0, cell-1)){
            return false;
        }
        cache.pattern_set15(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value15_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value15_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(0, cell-1)){
            return false;
        }
        cache.pattern_set15(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(1, cell-1)){
            return false;
        }
        cache.pattern_set15(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value15_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(1, cell-1)){
            return false;
        }
        cache.pattern_set15(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value15_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value15_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(1, cell-1)){
            return false;
        }
        cache.pattern_set15(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(2, cell-1)){
            return false;
        }
        cache.pattern_set15(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value15_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(2, cell-1)){
            return false;
        }
        cache.pattern_set15(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value15_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value15_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(2, cell-1)){
            return false;
        }
        cache.pattern_set15(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(3, cell-1)){
            return false;
        }
        cache.pattern_set15(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value15_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(3, cell-1)){
            return false;
        }
        cache.pattern_set15(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value15_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value15_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(3, cell-1)){
            return false;
        }
        cache.pattern_set15(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(4, cell-1)){
            return false;
        }
        cache.pattern_set15(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value15_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(4, cell-1)){
            return false;
        }
        cache.pattern_set15(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value15_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value15_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(4, cell-1)){
            return false;
        }
        cache.pattern_set15(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(5, cell-1)){
            return false;
        }
        cache.pattern_set15(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value15_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(5, cell-1)){
            return false;
        }
        cache.pattern_set15(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value15_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value15_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(5, cell-1)){
            return false;
        }
        cache.pattern_set15(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(6, cell-1)){
            return false;
        }
        cache.pattern_set15(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value15_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(6, cell-1)){
            return false;
        }
        cache.pattern_set15(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value15_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value15_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(6, cell-1)){
            return false;
        }
        cache.pattern_set15(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(7, cell-1)){
            return false;
        }
        cache.pattern_set15(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value15_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value15_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(7, cell-1)){
            return false;
        }
        cache.pattern_set15(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value15_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value15_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value15_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value15_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value15_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set15(7, cell-1)){
            return false;
        }
        cache.pattern_set15(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value16_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value16_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value16_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value16_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set16(0, el-1)){
                continue;
            }
            cache.pattern_set16(0, el-1);
            if(get_pattern_value16_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value16_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value16_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value16_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value16_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value16_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value16_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value16_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value16_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value16_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(1, cell-1)){
            return false;
        }
        cache.pattern_set16(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value16_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(3, cell-1)){
            return false;
        }
        cache.pattern_set16(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(1, cell-1)){
            return false;
        }
        cache.pattern_set16(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(2, cell-1)){
            return false;
        }
        cache.pattern_set16(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value16_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(2, cell-1)){
            return false;
        }
        cache.pattern_set16(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value16_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(3, cell-1)){
            return false;
        }
        cache.pattern_set16(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(1, cell-1)){
            return false;
        }
        cache.pattern_set16(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(4, cell-1)){
            return false;
        }
        cache.pattern_set16(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value16_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(6, cell-1)){
            return false;
        }
        cache.pattern_set16(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(4, cell-1)){
            return false;
        }
        cache.pattern_set16(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(5, cell-1)){
            return false;
        }
        cache.pattern_set16(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value16_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(5, cell-1)){
            return false;
        }
        cache.pattern_set16(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value16_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(6, cell-1)){
            return false;
        }
        cache.pattern_set16(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(4, cell-1)){
            return false;
        }
        cache.pattern_set16(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(7, cell-1)){
            return false;
        }
        cache.pattern_set16(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value16_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(9, cell-1)){
            return false;
        }
        cache.pattern_set16(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(7, cell-1)){
            return false;
        }
        cache.pattern_set16(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(8, cell-1)){
            return false;
        }
        cache.pattern_set16(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value16_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(8, cell-1)){
            return false;
        }
        cache.pattern_set16(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value16_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(9, cell-1)){
            return false;
        }
        cache.pattern_set16(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(7, cell-1)){
            return false;
        }
        cache.pattern_set16(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(10, cell-1)){
            return false;
        }
        cache.pattern_set16(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value16_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(12, cell-1)){
            return false;
        }
        cache.pattern_set16(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(10, cell-1)){
            return false;
        }
        cache.pattern_set16(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(11, cell-1)){
            return false;
        }
        cache.pattern_set16(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value16_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(11, cell-1)){
            return false;
        }
        cache.pattern_set16(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value16_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(12, cell-1)){
            return false;
        }
        cache.pattern_set16(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(10, cell-1)){
            return false;
        }
        cache.pattern_set16(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(13, cell-1)){
            return false;
        }
        cache.pattern_set16(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value16_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(15, cell-1)){
            return false;
        }
        cache.pattern_set16(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(13, cell-1)){
            return false;
        }
        cache.pattern_set16(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(14, cell-1)){
            return false;
        }
        cache.pattern_set16(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value16_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(14, cell-1)){
            return false;
        }
        cache.pattern_set16(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value16_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(15, cell-1)){
            return false;
        }
        cache.pattern_set16(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(13, cell-1)){
            return false;
        }
        cache.pattern_set16(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(16, cell-1)){
            return false;
        }
        cache.pattern_set16(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value16_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(18, cell-1)){
            return false;
        }
        cache.pattern_set16(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(16, cell-1)){
            return false;
        }
        cache.pattern_set16(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(17, cell-1)){
            return false;
        }
        cache.pattern_set16(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value16_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(17, cell-1)){
            return false;
        }
        cache.pattern_set16(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value16_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(18, cell-1)){
            return false;
        }
        cache.pattern_set16(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(16, cell-1)){
            return false;
        }
        cache.pattern_set16(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(19, cell-1)){
            return false;
        }
        cache.pattern_set16(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value16_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(21, cell-1)){
            return false;
        }
        cache.pattern_set16(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(19, cell-1)){
            return false;
        }
        cache.pattern_set16(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(20, cell-1)){
            return false;
        }
        cache.pattern_set16(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value16_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(20, cell-1)){
            return false;
        }
        cache.pattern_set16(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value16_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(21, cell-1)){
            return false;
        }
        cache.pattern_set16(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(19, cell-1)){
            return false;
        }
        cache.pattern_set16(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(22, cell-1)){
            return false;
        }
        cache.pattern_set16(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value16_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value16_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(24, cell-1)){
            return false;
        }
        cache.pattern_set16(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(22, cell-1)){
            return false;
        }
        cache.pattern_set16(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value16_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(23, cell-1)){
            return false;
        }
        cache.pattern_set16(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value16_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(23, cell-1)){
            return false;
        }
        cache.pattern_set16(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value16_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value16_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value16_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set16(24, cell-1)){
            return false;
        }
        cache.pattern_set16(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set16(22, cell-1)){
            return false;
        }
        cache.pattern_set16(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value17_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value17_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value17_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value17_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set17(0, el-1)){
                continue;
            }
            cache.pattern_set17(0, el-1);
            if(get_pattern_value17_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value17_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value17_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value17_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value17_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value17_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value17_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value17_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value17_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value17_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(1, cell-1)){
            return false;
        }
        cache.pattern_set17(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value17_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(3, cell-1)){
            return false;
        }
        cache.pattern_set17(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(1, cell-1)){
            return false;
        }
        cache.pattern_set17(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(2, cell-1)){
            return false;
        }
        cache.pattern_set17(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value17_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(2, cell-1)){
            return false;
        }
        cache.pattern_set17(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value17_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(3, cell-1)){
            return false;
        }
        cache.pattern_set17(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(1, cell-1)){
            return false;
        }
        cache.pattern_set17(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(4, cell-1)){
            return false;
        }
        cache.pattern_set17(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value17_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(6, cell-1)){
            return false;
        }
        cache.pattern_set17(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(4, cell-1)){
            return false;
        }
        cache.pattern_set17(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(5, cell-1)){
            return false;
        }
        cache.pattern_set17(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value17_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(5, cell-1)){
            return false;
        }
        cache.pattern_set17(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value17_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(6, cell-1)){
            return false;
        }
        cache.pattern_set17(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(4, cell-1)){
            return false;
        }
        cache.pattern_set17(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(7, cell-1)){
            return false;
        }
        cache.pattern_set17(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value17_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(9, cell-1)){
            return false;
        }
        cache.pattern_set17(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(7, cell-1)){
            return false;
        }
        cache.pattern_set17(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(8, cell-1)){
            return false;
        }
        cache.pattern_set17(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value17_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(8, cell-1)){
            return false;
        }
        cache.pattern_set17(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value17_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(9, cell-1)){
            return false;
        }
        cache.pattern_set17(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(7, cell-1)){
            return false;
        }
        cache.pattern_set17(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(10, cell-1)){
            return false;
        }
        cache.pattern_set17(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value17_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(12, cell-1)){
            return false;
        }
        cache.pattern_set17(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(10, cell-1)){
            return false;
        }
        cache.pattern_set17(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(11, cell-1)){
            return false;
        }
        cache.pattern_set17(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value17_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(11, cell-1)){
            return false;
        }
        cache.pattern_set17(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value17_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(12, cell-1)){
            return false;
        }
        cache.pattern_set17(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(10, cell-1)){
            return false;
        }
        cache.pattern_set17(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(13, cell-1)){
            return false;
        }
        cache.pattern_set17(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value17_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(15, cell-1)){
            return false;
        }
        cache.pattern_set17(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(13, cell-1)){
            return false;
        }
        cache.pattern_set17(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(14, cell-1)){
            return false;
        }
        cache.pattern_set17(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value17_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(14, cell-1)){
            return false;
        }
        cache.pattern_set17(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value17_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(15, cell-1)){
            return false;
        }
        cache.pattern_set17(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(13, cell-1)){
            return false;
        }
        cache.pattern_set17(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(16, cell-1)){
            return false;
        }
        cache.pattern_set17(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value17_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(18, cell-1)){
            return false;
        }
        cache.pattern_set17(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(16, cell-1)){
            return false;
        }
        cache.pattern_set17(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(17, cell-1)){
            return false;
        }
        cache.pattern_set17(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value17_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(17, cell-1)){
            return false;
        }
        cache.pattern_set17(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value17_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(18, cell-1)){
            return false;
        }
        cache.pattern_set17(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(16, cell-1)){
            return false;
        }
        cache.pattern_set17(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(19, cell-1)){
            return false;
        }
        cache.pattern_set17(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value17_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(21, cell-1)){
            return false;
        }
        cache.pattern_set17(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(19, cell-1)){
            return false;
        }
        cache.pattern_set17(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(20, cell-1)){
            return false;
        }
        cache.pattern_set17(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value17_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(20, cell-1)){
            return false;
        }
        cache.pattern_set17(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value17_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(21, cell-1)){
            return false;
        }
        cache.pattern_set17(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(19, cell-1)){
            return false;
        }
        cache.pattern_set17(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(22, cell-1)){
            return false;
        }
        cache.pattern_set17(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value17_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value17_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(24, cell-1)){
            return false;
        }
        cache.pattern_set17(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(22, cell-1)){
            return false;
        }
        cache.pattern_set17(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value17_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(23, cell-1)){
            return false;
        }
        cache.pattern_set17(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value17_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(23, cell-1)){
            return false;
        }
        cache.pattern_set17(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value17_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value17_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value17_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set17(24, cell-1)){
            return false;
        }
        cache.pattern_set17(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set17(22, cell-1)){
            return false;
        }
        cache.pattern_set17(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value18_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value18_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value18_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value18_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set18(0, el-1)){
                continue;
            }
            cache.pattern_set18(0, el-1);
            if(get_pattern_value18_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value18_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value18_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value18_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value18_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value18_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value18_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value18_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value18_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value18_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(1, cell-1)){
            return false;
        }
        cache.pattern_set18(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value18_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(3, cell-1)){
            return false;
        }
        cache.pattern_set18(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(1, cell-1)){
            return false;
        }
        cache.pattern_set18(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(2, cell-1)){
            return false;
        }
        cache.pattern_set18(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value18_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(2, cell-1)){
            return false;
        }
        cache.pattern_set18(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value18_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(3, cell-1)){
            return false;
        }
        cache.pattern_set18(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(1, cell-1)){
            return false;
        }
        cache.pattern_set18(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(4, cell-1)){
            return false;
        }
        cache.pattern_set18(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value18_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(6, cell-1)){
            return false;
        }
        cache.pattern_set18(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(4, cell-1)){
            return false;
        }
        cache.pattern_set18(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(5, cell-1)){
            return false;
        }
        cache.pattern_set18(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value18_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(5, cell-1)){
            return false;
        }
        cache.pattern_set18(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value18_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(6, cell-1)){
            return false;
        }
        cache.pattern_set18(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(4, cell-1)){
            return false;
        }
        cache.pattern_set18(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(7, cell-1)){
            return false;
        }
        cache.pattern_set18(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value18_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(9, cell-1)){
            return false;
        }
        cache.pattern_set18(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(7, cell-1)){
            return false;
        }
        cache.pattern_set18(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(8, cell-1)){
            return false;
        }
        cache.pattern_set18(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value18_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(8, cell-1)){
            return false;
        }
        cache.pattern_set18(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value18_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(9, cell-1)){
            return false;
        }
        cache.pattern_set18(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(7, cell-1)){
            return false;
        }
        cache.pattern_set18(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(10, cell-1)){
            return false;
        }
        cache.pattern_set18(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value18_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(12, cell-1)){
            return false;
        }
        cache.pattern_set18(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(10, cell-1)){
            return false;
        }
        cache.pattern_set18(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(11, cell-1)){
            return false;
        }
        cache.pattern_set18(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value18_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(11, cell-1)){
            return false;
        }
        cache.pattern_set18(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value18_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(12, cell-1)){
            return false;
        }
        cache.pattern_set18(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(10, cell-1)){
            return false;
        }
        cache.pattern_set18(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(13, cell-1)){
            return false;
        }
        cache.pattern_set18(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value18_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(15, cell-1)){
            return false;
        }
        cache.pattern_set18(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(13, cell-1)){
            return false;
        }
        cache.pattern_set18(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(14, cell-1)){
            return false;
        }
        cache.pattern_set18(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value18_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(14, cell-1)){
            return false;
        }
        cache.pattern_set18(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value18_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(15, cell-1)){
            return false;
        }
        cache.pattern_set18(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(13, cell-1)){
            return false;
        }
        cache.pattern_set18(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(16, cell-1)){
            return false;
        }
        cache.pattern_set18(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value18_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(18, cell-1)){
            return false;
        }
        cache.pattern_set18(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(16, cell-1)){
            return false;
        }
        cache.pattern_set18(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(17, cell-1)){
            return false;
        }
        cache.pattern_set18(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value18_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(17, cell-1)){
            return false;
        }
        cache.pattern_set18(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value18_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(18, cell-1)){
            return false;
        }
        cache.pattern_set18(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(16, cell-1)){
            return false;
        }
        cache.pattern_set18(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(19, cell-1)){
            return false;
        }
        cache.pattern_set18(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value18_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(21, cell-1)){
            return false;
        }
        cache.pattern_set18(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(19, cell-1)){
            return false;
        }
        cache.pattern_set18(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(20, cell-1)){
            return false;
        }
        cache.pattern_set18(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value18_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(20, cell-1)){
            return false;
        }
        cache.pattern_set18(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value18_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(21, cell-1)){
            return false;
        }
        cache.pattern_set18(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(19, cell-1)){
            return false;
        }
        cache.pattern_set18(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(22, cell-1)){
            return false;
        }
        cache.pattern_set18(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value18_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value18_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(24, cell-1)){
            return false;
        }
        cache.pattern_set18(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(22, cell-1)){
            return false;
        }
        cache.pattern_set18(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value18_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(23, cell-1)){
            return false;
        }
        cache.pattern_set18(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value18_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(23, cell-1)){
            return false;
        }
        cache.pattern_set18(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value18_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value18_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value18_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set18(24, cell-1)){
            return false;
        }
        cache.pattern_set18(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set18(22, cell-1)){
            return false;
        }
        cache.pattern_set18(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value19_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value19_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value19_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value19_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set19(0, el-1)){
                continue;
            }
            cache.pattern_set19(0, el-1);
            if(get_pattern_value19_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value19_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value19_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value19_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value19_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value19_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value19_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value19_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value19_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value19_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(1, cell-1)){
            return false;
        }
        cache.pattern_set19(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value19_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(3, cell-1)){
            return false;
        }
        cache.pattern_set19(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(1, cell-1)){
            return false;
        }
        cache.pattern_set19(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(2, cell-1)){
            return false;
        }
        cache.pattern_set19(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value19_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(2, cell-1)){
            return false;
        }
        cache.pattern_set19(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value19_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(3, cell-1)){
            return false;
        }
        cache.pattern_set19(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(1, cell-1)){
            return false;
        }
        cache.pattern_set19(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(4, cell-1)){
            return false;
        }
        cache.pattern_set19(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value19_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(6, cell-1)){
            return false;
        }
        cache.pattern_set19(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(4, cell-1)){
            return false;
        }
        cache.pattern_set19(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(5, cell-1)){
            return false;
        }
        cache.pattern_set19(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value19_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(5, cell-1)){
            return false;
        }
        cache.pattern_set19(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value19_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(6, cell-1)){
            return false;
        }
        cache.pattern_set19(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(4, cell-1)){
            return false;
        }
        cache.pattern_set19(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(7, cell-1)){
            return false;
        }
        cache.pattern_set19(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value19_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(9, cell-1)){
            return false;
        }
        cache.pattern_set19(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(7, cell-1)){
            return false;
        }
        cache.pattern_set19(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(8, cell-1)){
            return false;
        }
        cache.pattern_set19(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value19_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(8, cell-1)){
            return false;
        }
        cache.pattern_set19(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value19_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(9, cell-1)){
            return false;
        }
        cache.pattern_set19(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(7, cell-1)){
            return false;
        }
        cache.pattern_set19(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(10, cell-1)){
            return false;
        }
        cache.pattern_set19(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value19_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(12, cell-1)){
            return false;
        }
        cache.pattern_set19(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(10, cell-1)){
            return false;
        }
        cache.pattern_set19(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(11, cell-1)){
            return false;
        }
        cache.pattern_set19(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value19_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(11, cell-1)){
            return false;
        }
        cache.pattern_set19(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value19_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(12, cell-1)){
            return false;
        }
        cache.pattern_set19(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(10, cell-1)){
            return false;
        }
        cache.pattern_set19(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(13, cell-1)){
            return false;
        }
        cache.pattern_set19(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value19_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(15, cell-1)){
            return false;
        }
        cache.pattern_set19(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(13, cell-1)){
            return false;
        }
        cache.pattern_set19(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(14, cell-1)){
            return false;
        }
        cache.pattern_set19(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value19_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(14, cell-1)){
            return false;
        }
        cache.pattern_set19(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value19_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(15, cell-1)){
            return false;
        }
        cache.pattern_set19(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(13, cell-1)){
            return false;
        }
        cache.pattern_set19(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(16, cell-1)){
            return false;
        }
        cache.pattern_set19(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value19_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(18, cell-1)){
            return false;
        }
        cache.pattern_set19(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(16, cell-1)){
            return false;
        }
        cache.pattern_set19(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(17, cell-1)){
            return false;
        }
        cache.pattern_set19(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value19_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(17, cell-1)){
            return false;
        }
        cache.pattern_set19(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value19_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(18, cell-1)){
            return false;
        }
        cache.pattern_set19(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(16, cell-1)){
            return false;
        }
        cache.pattern_set19(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(19, cell-1)){
            return false;
        }
        cache.pattern_set19(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value19_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(21, cell-1)){
            return false;
        }
        cache.pattern_set19(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(19, cell-1)){
            return false;
        }
        cache.pattern_set19(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(20, cell-1)){
            return false;
        }
        cache.pattern_set19(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value19_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(20, cell-1)){
            return false;
        }
        cache.pattern_set19(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value19_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(21, cell-1)){
            return false;
        }
        cache.pattern_set19(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(19, cell-1)){
            return false;
        }
        cache.pattern_set19(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(22, cell-1)){
            return false;
        }
        cache.pattern_set19(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value19_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value19_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(24, cell-1)){
            return false;
        }
        cache.pattern_set19(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(22, cell-1)){
            return false;
        }
        cache.pattern_set19(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value19_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(23, cell-1)){
            return false;
        }
        cache.pattern_set19(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value19_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(23, cell-1)){
            return false;
        }
        cache.pattern_set19(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value19_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value19_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value19_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set19(24, cell-1)){
            return false;
        }
        cache.pattern_set19(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set19(22, cell-1)){
            return false;
        }
        cache.pattern_set19(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value20_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value20_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(get_pattern_value20_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value20_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set20(0, el-1)){
                continue;
            }
            cache.pattern_set20(0, el-1);
            if(get_pattern_value20_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value20_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value20_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value20_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value20_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value20_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value20_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value20_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value20_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value20_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(1, cell-1)){
            return false;
        }
        cache.pattern_set20(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value20_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(3, cell-1)){
            return false;
        }
        cache.pattern_set20(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(1, cell-1)){
            return false;
        }
        cache.pattern_set20(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(2, cell-1)){
            return false;
        }
        cache.pattern_set20(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value20_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(2, cell-1)){
            return false;
        }
        cache.pattern_set20(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value20_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(3, cell-1)){
            return false;
        }
        cache.pattern_set20(3, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(1, cell-1)){
            return false;
        }
        cache.pattern_set20(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
            case 3:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(4, cell-1)){
            return false;
        }
        cache.pattern_set20(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value20_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(6, cell-1)){
            return false;
        }
        cache.pattern_set20(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(4, cell-1)){
            return false;
        }
        cache.pattern_set20(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(5, cell-1)){
            return false;
        }
        cache.pattern_set20(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value20_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(5, cell-1)){
            return false;
        }
        cache.pattern_set20(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value20_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(6, cell-1)){
            return false;
        }
        cache.pattern_set20(6, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(4, cell-1)){
            return false;
        }
        cache.pattern_set20(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(7, cell-1)){
            return false;
        }
        cache.pattern_set20(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value20_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(9, cell-1)){
            return false;
        }
        cache.pattern_set20(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(7, cell-1)){
            return false;
        }
        cache.pattern_set20(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(8, cell-1)){
            return false;
        }
        cache.pattern_set20(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value20_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(8, cell-1)){
            return false;
        }
        cache.pattern_set20(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value20_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(9, cell-1)){
            return false;
        }
        cache.pattern_set20(9, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(7, cell-1)){
            return false;
        }
        cache.pattern_set20(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(10, cell-1)){
            return false;
        }
        cache.pattern_set20(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value20_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(12, cell-1)){
            return false;
        }
        cache.pattern_set20(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(10, cell-1)){
            return false;
        }
        cache.pattern_set20(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(11, cell-1)){
            return false;
        }
        cache.pattern_set20(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value20_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(11, cell-1)){
            return false;
        }
        cache.pattern_set20(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value20_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(12, cell-1)){
            return false;
        }
        cache.pattern_set20(12, cell-1);
        switch(pieces[cell]){
            case 0:
            case 4:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(10, cell-1)){
            return false;
        }
        cache.pattern_set20(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(13, cell-1)){
            return false;
        }
        cache.pattern_set20(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value20_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(15, cell-1)){
            return false;
        }
        cache.pattern_set20(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(13, cell-1)){
            return false;
        }
        cache.pattern_set20(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(14, cell-1)){
            return false;
        }
        cache.pattern_set20(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value20_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(14, cell-1)){
            return false;
        }
        cache.pattern_set20(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value20_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(15, cell-1)){
            return false;
        }
        cache.pattern_set20(15, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(13, cell-1)){
            return false;
        }
        cache.pattern_set20(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(16, cell-1)){
            return false;
        }
        cache.pattern_set20(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value20_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(18, cell-1)){
            return false;
        }
        cache.pattern_set20(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(16, cell-1)){
            return false;
        }
        cache.pattern_set20(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(17, cell-1)){
            return false;
        }
        cache.pattern_set20(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value20_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(17, cell-1)){
            return false;
        }
        cache.pattern_set20(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value20_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(18, cell-1)){
            return false;
        }
        cache.pattern_set20(18, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(16, cell-1)){
            return false;
        }
        cache.pattern_set20(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(19, cell-1)){
            return false;
        }
        cache.pattern_set20(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value20_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(21, cell-1)){
            return false;
        }
        cache.pattern_set20(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(19, cell-1)){
            return false;
        }
        cache.pattern_set20(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(20, cell-1)){
            return false;
        }
        cache.pattern_set20(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value20_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(20, cell-1)){
            return false;
        }
        cache.pattern_set20(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value20_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(21, cell-1)){
            return false;
        }
        cache.pattern_set20(21, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(19, cell-1)){
            return false;
        }
        cache.pattern_set20(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(22, cell-1)){
            return false;
        }
        cache.pattern_set20(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value20_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value20_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(24, cell-1)){
            return false;
        }
        cache.pattern_set20(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(22, cell-1)){
            return false;
        }
        cache.pattern_set20(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value20_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(23, cell-1)){
            return false;
        }
        cache.pattern_set20(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value20_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(23, cell-1)){
            return false;
        }
        cache.pattern_set20(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value20_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value20_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value20_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set20(24, cell-1)){
            return false;
        }
        cache.pattern_set20(24, cell-1);
        switch(pieces[cell]){
            case 4:
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set20(22, cell-1)){
            return false;
        }
        cache.pattern_set20(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value21_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value21_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value21_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value21_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value21_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value21_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value21_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value21_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value21_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value21_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(0, cell-1)){
            return false;
        }
        cache.pattern_set21(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value21_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(0, cell-1)){
            return false;
        }
        cache.pattern_set21(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value21_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value21_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(0, cell-1)){
            return false;
        }
        cache.pattern_set21(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(1, cell-1)){
            return false;
        }
        cache.pattern_set21(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value21_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(1, cell-1)){
            return false;
        }
        cache.pattern_set21(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value21_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value21_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(1, cell-1)){
            return false;
        }
        cache.pattern_set21(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(2, cell-1)){
            return false;
        }
        cache.pattern_set21(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value21_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(2, cell-1)){
            return false;
        }
        cache.pattern_set21(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value21_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value21_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(2, cell-1)){
            return false;
        }
        cache.pattern_set21(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(3, cell-1)){
            return false;
        }
        cache.pattern_set21(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value21_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(3, cell-1)){
            return false;
        }
        cache.pattern_set21(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value21_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value21_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(3, cell-1)){
            return false;
        }
        cache.pattern_set21(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(4, cell-1)){
            return false;
        }
        cache.pattern_set21(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value21_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(4, cell-1)){
            return false;
        }
        cache.pattern_set21(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value21_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value21_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(4, cell-1)){
            return false;
        }
        cache.pattern_set21(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(5, cell-1)){
            return false;
        }
        cache.pattern_set21(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value21_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(5, cell-1)){
            return false;
        }
        cache.pattern_set21(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value21_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value21_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(5, cell-1)){
            return false;
        }
        cache.pattern_set21(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(6, cell-1)){
            return false;
        }
        cache.pattern_set21(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value21_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(6, cell-1)){
            return false;
        }
        cache.pattern_set21(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value21_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value21_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(6, cell-1)){
            return false;
        }
        cache.pattern_set21(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(7, cell-1)){
            return false;
        }
        cache.pattern_set21(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value21_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value21_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(7, cell-1)){
            return false;
        }
        cache.pattern_set21(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value21_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value21_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value21_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value21_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value21_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set21(7, cell-1)){
            return false;
        }
        cache.pattern_set21(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value22_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value22_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value22_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value22_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value22_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value22_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value22_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value22_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value22_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value22_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(0, cell-1)){
            return false;
        }
        cache.pattern_set22(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value22_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(0, cell-1)){
            return false;
        }
        cache.pattern_set22(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value22_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value22_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(0, cell-1)){
            return false;
        }
        cache.pattern_set22(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(1, cell-1)){
            return false;
        }
        cache.pattern_set22(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value22_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(1, cell-1)){
            return false;
        }
        cache.pattern_set22(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value22_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value22_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(1, cell-1)){
            return false;
        }
        cache.pattern_set22(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(2, cell-1)){
            return false;
        }
        cache.pattern_set22(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value22_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(2, cell-1)){
            return false;
        }
        cache.pattern_set22(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value22_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value22_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(2, cell-1)){
            return false;
        }
        cache.pattern_set22(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(3, cell-1)){
            return false;
        }
        cache.pattern_set22(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value22_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(3, cell-1)){
            return false;
        }
        cache.pattern_set22(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value22_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value22_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(3, cell-1)){
            return false;
        }
        cache.pattern_set22(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(4, cell-1)){
            return false;
        }
        cache.pattern_set22(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value22_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(4, cell-1)){
            return false;
        }
        cache.pattern_set22(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value22_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value22_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(4, cell-1)){
            return false;
        }
        cache.pattern_set22(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(5, cell-1)){
            return false;
        }
        cache.pattern_set22(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value22_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(5, cell-1)){
            return false;
        }
        cache.pattern_set22(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value22_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value22_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(5, cell-1)){
            return false;
        }
        cache.pattern_set22(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(6, cell-1)){
            return false;
        }
        cache.pattern_set22(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value22_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(6, cell-1)){
            return false;
        }
        cache.pattern_set22(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value22_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value22_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(6, cell-1)){
            return false;
        }
        cache.pattern_set22(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(7, cell-1)){
            return false;
        }
        cache.pattern_set22(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value22_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value22_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(7, cell-1)){
            return false;
        }
        cache.pattern_set22(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value22_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value22_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value22_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value22_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value22_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set22(7, cell-1)){
            return false;
        }
        cache.pattern_set22(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value23_3_4(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_5([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_6_8(cell, cache)){
            return true;
        }
        if(get_pattern_value23_6_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_16_18(cell, cache)){
            return true;
        }
        if(get_pattern_value23_16_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_26_28(cell, cache)){
            return true;
        }
        if(get_pattern_value23_26_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_36_38(cell, cache)){
            return true;
        }
        if(get_pattern_value23_36_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_46_48(cell, cache)){
            return true;
        }
        if(get_pattern_value23_46_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_56_58(cell, cache)){
            return true;
        }
        if(get_pattern_value23_56_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_66_68(cell, cache)){
            return true;
        }
        if(get_pattern_value23_66_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_0_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_76_78(cell, cache)){
            return true;
        }
        if(get_pattern_value23_76_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_3_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value23_6_8([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(0, cell-1)){
            return false;
        }
        cache.pattern_set23(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_6_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_12_10(cell, cache)){
            return true;
        }
        if(get_pattern_value23_12_13(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_11_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(0, cell-1)){
            return false;
        }
        cache.pattern_set23(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_11_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value23_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_12_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_11_13(cell, cache)){
            return true;
        }
        if(get_pattern_value23_11_10(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_12_13([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(0, cell-1)){
            return false;
        }
        cache.pattern_set23(0, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_16_18([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(1, cell-1)){
            return false;
        }
        cache.pattern_set23(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_16_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_22_20(cell, cache)){
            return true;
        }
        if(get_pattern_value23_22_23(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_21_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(1, cell-1)){
            return false;
        }
        cache.pattern_set23(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_21_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value23_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_22_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_21_23(cell, cache)){
            return true;
        }
        if(get_pattern_value23_21_20(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_22_23([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(1, cell-1)){
            return false;
        }
        cache.pattern_set23(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_26_28([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(2, cell-1)){
            return false;
        }
        cache.pattern_set23(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_26_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_32_30(cell, cache)){
            return true;
        }
        if(get_pattern_value23_32_33(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_31_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(2, cell-1)){
            return false;
        }
        cache.pattern_set23(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_31_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value23_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_32_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_31_33(cell, cache)){
            return true;
        }
        if(get_pattern_value23_31_30(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_32_33([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(2, cell-1)){
            return false;
        }
        cache.pattern_set23(2, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_36_38([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(3, cell-1)){
            return false;
        }
        cache.pattern_set23(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_36_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_42_40(cell, cache)){
            return true;
        }
        if(get_pattern_value23_42_43(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_41_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(3, cell-1)){
            return false;
        }
        cache.pattern_set23(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_41_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value23_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_42_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_41_43(cell, cache)){
            return true;
        }
        if(get_pattern_value23_41_40(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_42_43([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(3, cell-1)){
            return false;
        }
        cache.pattern_set23(3, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_46_48([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(4, cell-1)){
            return false;
        }
        cache.pattern_set23(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_46_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_52_50(cell, cache)){
            return true;
        }
        if(get_pattern_value23_52_53(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_51_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(4, cell-1)){
            return false;
        }
        cache.pattern_set23(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_51_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value23_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_52_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_51_53(cell, cache)){
            return true;
        }
        if(get_pattern_value23_51_50(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_52_53([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(4, cell-1)){
            return false;
        }
        cache.pattern_set23(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_56_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(5, cell-1)){
            return false;
        }
        cache.pattern_set23(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_56_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_62_60(cell, cache)){
            return true;
        }
        if(get_pattern_value23_62_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_61_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(5, cell-1)){
            return false;
        }
        cache.pattern_set23(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_61_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value23_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_62_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_61_63(cell, cache)){
            return true;
        }
        if(get_pattern_value23_61_60(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_62_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(5, cell-1)){
            return false;
        }
        cache.pattern_set23(5, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_66_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(6, cell-1)){
            return false;
        }
        cache.pattern_set23(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_66_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_72_70(cell, cache)){
            return true;
        }
        if(get_pattern_value23_72_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_71_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(6, cell-1)){
            return false;
        }
        cache.pattern_set23(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_71_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value23_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_72_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_71_73(cell, cache)){
            return true;
        }
        if(get_pattern_value23_71_70(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_72_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(6, cell-1)){
            return false;
        }
        cache.pattern_set23(6, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_76_78([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(7, cell-1)){
            return false;
        }
        cache.pattern_set23(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_76_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value23_82_80(cell, cache)){
            return true;
        }
        if(get_pattern_value23_82_83(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_81_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(7, cell-1)){
            return false;
        }
        cache.pattern_set23(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value23_81_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value23_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_82_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value23_81_83(cell, cache)){
            return true;
        }
        if(get_pattern_value23_81_80(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value23_82_83([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set23(7, cell-1)){
            return false;
        }
        cache.pattern_set23(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_0_1([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(int el=1;el<65;++el){
            if(get_pattern_value24_1_2(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value24_1_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        if(get_pattern_value24_2_4(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_7(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_17(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_27(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_37(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_47(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_57(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_67(cell, cache)){
            return true;
        }
        if(get_pattern_value24_2_77(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_4([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table1[cell]){
            if(cache.pattern_is_set24(0, el-1)){
                continue;
            }
            cache.pattern_set24(0, el-1);
            if(get_pattern_value24_5_6(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_7([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_8_10(cell, cache)){
            return true;
        }
        if(get_pattern_value24_8_14(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value24_18_24(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_27([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_28_30(cell, cache)){
            return true;
        }
        if(get_pattern_value24_28_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_38_40(cell, cache)){
            return true;
        }
        if(get_pattern_value24_38_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_48_50(cell, cache)){
            return true;
        }
        if(get_pattern_value24_48_54(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_57([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_58_60(cell, cache)){
            return true;
        }
        if(get_pattern_value24_58_64(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_67([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_68_70(cell, cache)){
            return true;
        }
        if(get_pattern_value24_68_74(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_2_77([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_78_80(cell, cache)){
            return true;
        }
        if(get_pattern_value24_78_84(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_5_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 10:
                break;
            default:
                return false;
        }
        return true;
    }

    bool game_state::get_pattern_value24_8_10([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(1, cell-1)){
            return false;
        }
        cache.pattern_set24(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_8_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_14_12(cell, cache)){
            return true;
        }
        if(get_pattern_value24_14_15(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_13_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(3, cell-1)){
            return false;
        }
        cache.pattern_set24(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(1, cell-1)){
            return false;
        }
        cache.pattern_set24(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_13_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(2, cell-1)){
            return false;
        }
        cache.pattern_set24(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value24_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_14_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(2, cell-1)){
            return false;
        }
        cache.pattern_set24(2, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_13_15(cell, cache)){
            return true;
        }
        if(get_pattern_value24_13_12(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_14_15([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(3, cell-1)){
            return false;
        }
        cache.pattern_set24(3, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(1, cell-1)){
            return false;
        }
        cache.pattern_set24(1, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
            case 11:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(4, cell-1)){
            return false;
        }
        cache.pattern_set24(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_18_24([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_24_22(cell, cache)){
            return true;
        }
        if(get_pattern_value24_24_25(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_23_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(6, cell-1)){
            return false;
        }
        cache.pattern_set24(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(4, cell-1)){
            return false;
        }
        cache.pattern_set24(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_23_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(5, cell-1)){
            return false;
        }
        cache.pattern_set24(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value24_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_24_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(5, cell-1)){
            return false;
        }
        cache.pattern_set24(5, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_23_25(cell, cache)){
            return true;
        }
        if(get_pattern_value24_23_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_24_25([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(6, cell-1)){
            return false;
        }
        cache.pattern_set24(6, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(4, cell-1)){
            return false;
        }
        cache.pattern_set24(4, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_28_30([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(7, cell-1)){
            return false;
        }
        cache.pattern_set24(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_28_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_34_32(cell, cache)){
            return true;
        }
        if(get_pattern_value24_34_35(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_33_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(9, cell-1)){
            return false;
        }
        cache.pattern_set24(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(7, cell-1)){
            return false;
        }
        cache.pattern_set24(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_33_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(8, cell-1)){
            return false;
        }
        cache.pattern_set24(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value24_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_34_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(8, cell-1)){
            return false;
        }
        cache.pattern_set24(8, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_33_35(cell, cache)){
            return true;
        }
        if(get_pattern_value24_33_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_34_35([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(9, cell-1)){
            return false;
        }
        cache.pattern_set24(9, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(7, cell-1)){
            return false;
        }
        cache.pattern_set24(7, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_38_40([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(10, cell-1)){
            return false;
        }
        cache.pattern_set24(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_38_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_44_42(cell, cache)){
            return true;
        }
        if(get_pattern_value24_44_45(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_43_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(12, cell-1)){
            return false;
        }
        cache.pattern_set24(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(10, cell-1)){
            return false;
        }
        cache.pattern_set24(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_43_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(11, cell-1)){
            return false;
        }
        cache.pattern_set24(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value24_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_44_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(11, cell-1)){
            return false;
        }
        cache.pattern_set24(11, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_43_45(cell, cache)){
            return true;
        }
        if(get_pattern_value24_43_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_44_45([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(12, cell-1)){
            return false;
        }
        cache.pattern_set24(12, cell-1);
        switch(pieces[cell]){
            case 8:
            case 12:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(10, cell-1)){
            return false;
        }
        cache.pattern_set24(10, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_48_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(13, cell-1)){
            return false;
        }
        cache.pattern_set24(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_48_54([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_54_52(cell, cache)){
            return true;
        }
        if(get_pattern_value24_54_55(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_53_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(15, cell-1)){
            return false;
        }
        cache.pattern_set24(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(13, cell-1)){
            return false;
        }
        cache.pattern_set24(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_53_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(14, cell-1)){
            return false;
        }
        cache.pattern_set24(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value24_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_54_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(14, cell-1)){
            return false;
        }
        cache.pattern_set24(14, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_53_55(cell, cache)){
            return true;
        }
        if(get_pattern_value24_53_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_54_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(15, cell-1)){
            return false;
        }
        cache.pattern_set24(15, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(13, cell-1)){
            return false;
        }
        cache.pattern_set24(13, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_58_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(16, cell-1)){
            return false;
        }
        cache.pattern_set24(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_58_64([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_64_62(cell, cache)){
            return true;
        }
        if(get_pattern_value24_64_65(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_63_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(18, cell-1)){
            return false;
        }
        cache.pattern_set24(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(16, cell-1)){
            return false;
        }
        cache.pattern_set24(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_63_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(17, cell-1)){
            return false;
        }
        cache.pattern_set24(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value24_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_64_62([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(17, cell-1)){
            return false;
        }
        cache.pattern_set24(17, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_63_65(cell, cache)){
            return true;
        }
        if(get_pattern_value24_63_62(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_64_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(18, cell-1)){
            return false;
        }
        cache.pattern_set24(18, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(16, cell-1)){
            return false;
        }
        cache.pattern_set24(16, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_68_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(19, cell-1)){
            return false;
        }
        cache.pattern_set24(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_68_74([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_74_72(cell, cache)){
            return true;
        }
        if(get_pattern_value24_74_75(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_73_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(21, cell-1)){
            return false;
        }
        cache.pattern_set24(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(19, cell-1)){
            return false;
        }
        cache.pattern_set24(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_73_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(20, cell-1)){
            return false;
        }
        cache.pattern_set24(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value24_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_74_72([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(20, cell-1)){
            return false;
        }
        cache.pattern_set24(20, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_73_75(cell, cache)){
            return true;
        }
        if(get_pattern_value24_73_72(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_74_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(21, cell-1)){
            return false;
        }
        cache.pattern_set24(21, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(19, cell-1)){
            return false;
        }
        cache.pattern_set24(19, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_78_80([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 9:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(22, cell-1)){
            return false;
        }
        cache.pattern_set24(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_78_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value24_84_82(cell, cache)){
            return true;
        }
        if(get_pattern_value24_84_85(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_83_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(24, cell-1)){
            return false;
        }
        cache.pattern_set24(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(22, cell-1)){
            return false;
        }
        cache.pattern_set24(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value24_83_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(23, cell-1)){
            return false;
        }
        cache.pattern_set24(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value24_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_84_82([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(23, cell-1)){
            return false;
        }
        cache.pattern_set24(23, cell-1);
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value24_83_85(cell, cache)){
            return true;
        }
        if(get_pattern_value24_83_82(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value24_84_85([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(cache.pattern_is_set24(24, cell-1)){
            return false;
        }
        cache.pattern_set24(24, cell-1);
        switch(pieces[cell]){
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(cache.pattern_is_set24(22, cell-1)){
            return false;
        }
        cache.pattern_set24(22, cell-1);
        return true;
    }

    bool game_state::get_pattern_value25_0_2([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int variable_change0 = variables[3];
        variables[3] = 0;
        for(int el=1;el<65;++el){
            if(get_pattern_value25_4_6(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value25_4_26(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value25_4_55(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value25_4_84(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value25_4_133(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
            if(get_pattern_value25_4_142(el, cache)){
                variables[3] = variable_change0;
                return true;
            }
        }
        variables[3] = variable_change0;
        return false;
    }

    bool game_state::get_pattern_value25_0_169([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[3] != 1){
            return false;
        }
        if(get_pattern_value25_170_172(cell, cache)){
            return true;
        }
        if(get_pattern_value25_170_174(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_4_6([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 1:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value25_7_9(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_7_17(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_4_26([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 0:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value25_27_31(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_27_36(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_27_41(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_27_46(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_4_55([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 5:
            case 6:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value25_56_60(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_56_65(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_56_70(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_56_75(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_4_84([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 4:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value25_85_89(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_94(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_99(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_104(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_109(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_114(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_119(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_85_124(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_4_133([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 2:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        for(const auto el: shift_table1[cell]){
            if(get_pattern_value25_135_137(el, cache)){
                pieces[board_change0_cell] = board_change0_piece;
                return true;
            }
            if(get_pattern_value25_135_139(el, cache)){
                pieces[board_change0_cell] = board_change0_piece;
                return true;
            }
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_4_142([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        if(get_pattern_value25_143_145(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        if(get_pattern_value25_143_166(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return true;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return false;
    }

    bool game_state::get_pattern_value25_7_9([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table0[cell]){
            if(get_pattern_value25_10_12(el, cache)){
                return true;
            }
            if(get_pattern_value25_10_14(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value25_7_17([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(variables[2] != 0){
            return false;
        }
        if(evaluate21(cell, cache)){
            return false;
        }
        if(get_pattern_value25_18_20(cell, cache)){
            return true;
        }
        if(get_pattern_value25_18_22(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_10_12([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        int variable_change1 = variables[2];
        variables[2] = 1;
        if(evaluate24(cell, cache)){
            variables[2] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[2] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_10_14([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 1;
        int variable_change2 = variables[2];
        variables[2] = 1;
        if(evaluate24(cell, cache)){
            variables[2] = variable_change2;
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        variables[2] = variable_change2;
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value25_18_20([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate22(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table6[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 5;
        int variable_change3 = variables[2];
        variables[2] = 1;
        if(evaluate24(cell, cache)){
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_18_22([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(evaluate23(cell, cache)){
            return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 1;
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 6:
                break;
            default:
                pieces[board_change0_cell] = board_change0_piece;
                return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = shift_table7[cell];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 5;
        int variable_change3 = variables[2];
        variables[2] = 1;
        if(evaluate24(cell, cache)){
            variables[2] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[2] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_27_31([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_31_29(cell, cache)){
            return true;
        }
        if(get_pattern_value25_31_32(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_27_36([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_36_34(cell, cache)){
            return true;
        }
        if(get_pattern_value25_36_37(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_27_41([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_41_39(cell, cache)){
            return true;
        }
        if(get_pattern_value25_41_42(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_27_46([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_46_44(cell, cache)){
            return true;
        }
        if(get_pattern_value25_46_47(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_28_50([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 0;
        if(evaluate24(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_28_52([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 0;
        if(evaluate24(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value25_30_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_30_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_30_32(cell, cache)){
            return true;
        }
        if(get_pattern_value25_30_29(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_31_29([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_30_32(cell, cache)){
            return true;
        }
        if(get_pattern_value25_30_29(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_31_32([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_35_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_35_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_35_37(cell, cache)){
            return true;
        }
        if(get_pattern_value25_35_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_36_34([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_35_37(cell, cache)){
            return true;
        }
        if(get_pattern_value25_35_34(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_36_37([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_40_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_40_39([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_40_42(cell, cache)){
            return true;
        }
        if(get_pattern_value25_40_39(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_41_39([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_40_42(cell, cache)){
            return true;
        }
        if(get_pattern_value25_40_39(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_41_42([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_45_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_45_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_45_47(cell, cache)){
            return true;
        }
        if(get_pattern_value25_45_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_46_44([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_45_47(cell, cache)){
            return true;
        }
        if(get_pattern_value25_45_44(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_46_47([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_28_50(cell, cache)){
            return true;
        }
        if(get_pattern_value25_28_52(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_56_60([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_60_58(cell, cache)){
            return true;
        }
        if(get_pattern_value25_60_61(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_56_65([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_65_63(cell, cache)){
            return true;
        }
        if(get_pattern_value25_65_66(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_56_70([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_70_68(cell, cache)){
            return true;
        }
        if(get_pattern_value25_70_71(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_56_75([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_75_73(cell, cache)){
            return true;
        }
        if(get_pattern_value25_75_76(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_57_79([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 5;
        if(evaluate24(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_57_81([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 5;
        if(evaluate24(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value25_59_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_59_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_59_61(cell, cache)){
            return true;
        }
        if(get_pattern_value25_59_58(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_60_58([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_59_61(cell, cache)){
            return true;
        }
        if(get_pattern_value25_59_58(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_60_61([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_64_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_64_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_64_66(cell, cache)){
            return true;
        }
        if(get_pattern_value25_64_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_65_63([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_64_66(cell, cache)){
            return true;
        }
        if(get_pattern_value25_64_63(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_65_66([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_69_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_69_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_69_71(cell, cache)){
            return true;
        }
        if(get_pattern_value25_69_68(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_70_68([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_69_71(cell, cache)){
            return true;
        }
        if(get_pattern_value25_69_68(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_70_71([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_74_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_74_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_74_76(cell, cache)){
            return true;
        }
        if(get_pattern_value25_74_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_75_73([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_74_76(cell, cache)){
            return true;
        }
        if(get_pattern_value25_74_73(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_75_76([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_57_79(cell, cache)){
            return true;
        }
        if(get_pattern_value25_57_81(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_89([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_89_87(cell, cache)){
            return true;
        }
        if(get_pattern_value25_89_90(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_94([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_94_92(cell, cache)){
            return true;
        }
        if(get_pattern_value25_94_95(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_99([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_99_97(cell, cache)){
            return true;
        }
        if(get_pattern_value25_99_100(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_104([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_104_102(cell, cache)){
            return true;
        }
        if(get_pattern_value25_104_105(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_109([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_109_107(cell, cache)){
            return true;
        }
        if(get_pattern_value25_109_110(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_114([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_114_112(cell, cache)){
            return true;
        }
        if(get_pattern_value25_114_115(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_119([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_119_117(cell, cache)){
            return true;
        }
        if(get_pattern_value25_119_120(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_85_124([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_124_122(cell, cache)){
            return true;
        }
        if(get_pattern_value25_124_125(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_86_128([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 4;
        if(evaluate24(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_86_130([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 4;
        if(evaluate24(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value25_88_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_88_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_88_90(cell, cache)){
            return true;
        }
        if(get_pattern_value25_88_87(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_89_87([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_88_90(cell, cache)){
            return true;
        }
        if(get_pattern_value25_88_87(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_89_90([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table2[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_93_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_93_92([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_93_95(cell, cache)){
            return true;
        }
        if(get_pattern_value25_93_92(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_94_92([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_93_95(cell, cache)){
            return true;
        }
        if(get_pattern_value25_93_92(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_94_95([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table3[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_98_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_98_97([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_98_100(cell, cache)){
            return true;
        }
        if(get_pattern_value25_98_97(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_99_97([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_98_100(cell, cache)){
            return true;
        }
        if(get_pattern_value25_98_97(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_99_100([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table4[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_103_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_103_102([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_103_105(cell, cache)){
            return true;
        }
        if(get_pattern_value25_103_102(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_104_102([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_103_105(cell, cache)){
            return true;
        }
        if(get_pattern_value25_103_102(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_104_105([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table5[cell];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_108_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_108_107([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_108_110(cell, cache)){
            return true;
        }
        if(get_pattern_value25_108_107(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_109_107([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_108_110(cell, cache)){
            return true;
        }
        if(get_pattern_value25_108_107(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_109_110([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][3];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_113_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_113_112([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_113_115(cell, cache)){
            return true;
        }
        if(get_pattern_value25_113_112(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_114_112([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_113_115(cell, cache)){
            return true;
        }
        if(get_pattern_value25_113_112(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_114_115([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_118_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_118_117([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_118_120(cell, cache)){
            return true;
        }
        if(get_pattern_value25_118_117(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_119_117([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_118_120(cell, cache)){
            return true;
        }
        if(get_pattern_value25_118_117(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_119_120([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_123_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_123_122([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_123_125(cell, cache)){
            return true;
        }
        if(get_pattern_value25_123_122(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_124_122([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_123_125(cell, cache)){
            return true;
        }
        if(get_pattern_value25_123_122(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_124_125([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            return false;
        }
        if(get_pattern_value25_86_128(cell, cache)){
            return true;
        }
        if(get_pattern_value25_86_130(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_135_137([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 2;
        if(evaluate24(cell, cache)){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_135_139([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        int variable_change0 = variables[4];
        variables[4] = 0;
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 2;
        if(evaluate24(cell, cache)){
            pieces[board_change1_cell] = board_change1_piece;
            variables[4] = variable_change0;
            return false;
        }
        pieces[board_change1_cell] = board_change1_piece;
        variables[4] = variable_change0;
        return true;
    }

    bool game_state::get_pattern_value25_143_145([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        if(get_pattern_value25_145_147(cell, cache)){
            return true;
        }
        if(get_pattern_value25_145_149(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_143_166([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = shift_table12[cell];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 3;
        int variable_change1 = variables[3];
        variables[3] = 1;
        int variable_change2 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change2;
            variables[3] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change2;
        variables[3] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_145_147([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][0];
        switch(pieces[cell]){
            case 7:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_146_153(cell, cache)){
            return true;
        }
        if(get_pattern_value25_146_155(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_145_149([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        for(const auto el: shift_table11[cell]){
            if(get_pattern_value25_150_151(el, cache)){
                return true;
            }
        }
        return false;
    }

    bool game_state::get_pattern_value25_146_153([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                return false;
            default:
                break;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 3;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_146_155([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(cell){
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_156_158(cell, cache)){
            return true;
        }
        if(get_pattern_value25_156_160(cell, cache)){
            return true;
        }
        if(get_pattern_value25_156_162(cell, cache)){
            return true;
        }
        if(get_pattern_value25_156_164(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_150_151([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        switch(pieces[cell]){
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break;
            default:
                return false;
        }
        if(get_pattern_value25_146_153(cell, cache)){
            return true;
        }
        if(get_pattern_value25_146_155(cell, cache)){
            return true;
        }
        return false;
    }

    bool game_state::get_pattern_value25_156_158([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 5;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_156_160([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 2;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_156_162([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 0;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_156_164([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 4;
        int variable_change1 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change1;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change1;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_170_172([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][2];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][1];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        variables[3] = 0;
        int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

    bool game_state::get_pattern_value25_170_174([[maybe_unused]] int cell, [[maybe_unused]] resettable_bitarray_stack& cache){
        cell = cell_neighbors[cell][1];
        switch(pieces[cell]){
            case 3:
                break;
            default:
                return false;
        }
        int board_change0_cell = cell;
        int board_change0_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][2];
        if(cell == 0){
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change1_cell = cell;
        int board_change1_piece = pieces[cell];
        pieces[cell] = 7;
        cell = cell_neighbors[cell][0];
        if(cell == 0){
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        int board_change2_cell = cell;
        int board_change2_piece = pieces[cell];
        pieces[cell] = 3;
        int variable_change3 = variables[3];
        variables[3] = 0;
        int variable_change4 = variables[4];
        variables[4] = 0;
        if(evaluate24(cell, cache)){
            variables[4] = variable_change4;
            variables[3] = variable_change3;
            pieces[board_change2_cell] = board_change2_piece;
            pieces[board_change1_cell] = board_change1_piece;
            pieces[board_change0_cell] = board_change0_piece;
            return false;
        }
        variables[4] = variable_change4;
        variables[3] = variable_change3;
        pieces[board_change2_cell] = board_change2_piece;
        pieces[board_change1_cell] = board_change1_piece;
        pieces[board_change0_cell] = board_change0_piece;
        return true;
    }

}
